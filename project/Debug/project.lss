
AVRASM ver. 2.2.6  C:\Users\Edward\Desktop\project\project\main.asm Wed May 31 13:51:33 2017

[builtin](2): Including file 'D:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.2.132\avrasm\inc\m2560def.inc'
C:\Users\Edward\Desktop\project\project\main.asm(8): Including file 'D:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.2.132\avrasm\inc\m2560def.inc'
C:\Users\Edward\Desktop\project\project\main.asm(20): warning: Register r26 already defined by the .DEF directive
C:\Users\Edward\Desktop\project\project\main.asm(21): warning: Register r27 already defined by the .DEF directive
[builtin](2): Including file 'D:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.2.132\avrasm\inc\m2560def.inc'
C:\Users\Edward\Desktop\project\project\main.asm(8): Including file 'D:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.2.132\avrasm\inc\m2560def.inc'
                                 
                                 ;
                                 
                                 ;***** Created: 2011-02-09 12:03 ******* Source: ATmega2560.xml **********
                                 ;*************************************************************************
                                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                                 ;* 
                                 ;* Number            : AVR000
                                 ;* File Name         : "m2560def.inc"
                                 ;* Title             : Register/Bit Definitions for the ATmega2560
                                 ;* Date              : 2011-02-09
                                 ;* Version           : 2.35
                                 ;* Support E-mail    : avr@atmel.com
                                 ;* Target MCU        : ATmega2560
                                 ;* 
                                 ;* DESCRIPTION
                                 ;* When including this file in the assembly program file, all I/O register 
                                 ;* names and I/O register bit names appearing in the data book can be used.
                                 ;* In addition, the six registers forming the three data pointers X, Y and 
                                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                                 ;* SRAM is also defined 
                                 ;* 
                                 ;* The Register names are represented by their hexadecimal address.
                                 ;* 
                                 ;* The Register Bit names are represented by their bit number (0-7).
                                 ;* 
                                 ;* Please observe the difference in using the bit names with instructions
                                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                                 ;* (skip if bit in register set/cleared). The following example illustrates
                                 ;* this:
                                 ;* 
                                 ;* in    r16,PORTB             ;read PORTB latch
                                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                                 ;* out   PORTB,r16             ;output to PORTB
                                 ;* 
                                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                                 ;* rjmp  TOV0_is_set           ;jump if set
                                 ;* ...                         ;otherwise do something else
                                 ;*************************************************************************
                                 
                                 #ifndef _M2560DEF_INC_
                                 #define _M2560DEF_INC_
                                 
                                 
                                 #pragma partinc 0
                                 
                                 ; ***** SPECIFY DEVICE ***************************************************
                                 .device ATmega2560
                                 #pragma AVRPART ADMIN PART_NAME ATmega2560
                                 .equ	SIGNATURE_000	= 0x1e
                                 .equ	SIGNATURE_001	= 0x98
                                 .equ	SIGNATURE_002	= 0x01
                                 
                                 #pragma AVRPART CORE CORE_VERSION V3
                                 
                                 
                                 ; ***** I/O REGISTER DEFINITIONS *****************************************
                                 ; NOTE:
                                 ; Definitions marked "MEMORY MAPPED"are extended I/O ports
                                 ; and cannot be used with IN/OUT instructions
                                 .equ	UDR3	= 0x136	; MEMORY MAPPED
                                 .equ	UBRR3L	= 0x134	; MEMORY MAPPED
                                 .equ	UBRR3H	= 0x135	; MEMORY MAPPED
                                 .equ	UCSR3C	= 0x132	; MEMORY MAPPED
                                 .equ	UCSR3B	= 0x131	; MEMORY MAPPED
                                 .equ	UCSR3A	= 0x130	; MEMORY MAPPED
                                 .equ	OCR5CL	= 0x12c	; MEMORY MAPPED
                                 .equ	OCR5CH	= 0x12d	; MEMORY MAPPED
                                 .equ	OCR5BL	= 0x12a	; MEMORY MAPPED
                                 .equ	OCR5BH	= 0x12b	; MEMORY MAPPED
                                 .equ	OCR5AL	= 0x128	; MEMORY MAPPED
                                 .equ	OCR5AH	= 0x129	; MEMORY MAPPED
                                 .equ	ICR5H	= 0x127	; MEMORY MAPPED
                                 .equ	ICR5L	= 0x126	; MEMORY MAPPED
                                 .equ	TCNT5L	= 0x124	; MEMORY MAPPED
                                 .equ	TCNT5H	= 0x125	; MEMORY MAPPED
                                 .equ	TCCR5C	= 0x122	; MEMORY MAPPED
                                 .equ	TCCR5B	= 0x121	; MEMORY MAPPED
                                 .equ	TCCR5A	= 0x120	; MEMORY MAPPED
                                 .equ	PORTL	= 0x10b	; MEMORY MAPPED
                                 .equ	DDRL	= 0x10a	; MEMORY MAPPED
                                 .equ	PINL	= 0x109	; MEMORY MAPPED
                                 .equ	PORTK	= 0x108	; MEMORY MAPPED
                                 .equ	DDRK	= 0x107	; MEMORY MAPPED
                                 .equ	PINK	= 0x106	; MEMORY MAPPED
                                 .equ	PORTJ	= 0x105	; MEMORY MAPPED
                                 .equ	DDRJ	= 0x104	; MEMORY MAPPED
                                 .equ	PINJ	= 0x103	; MEMORY MAPPED
                                 .equ	PORTH	= 0x102	; MEMORY MAPPED
                                 .equ	DDRH	= 0x101	; MEMORY MAPPED
                                 .equ	PINH	= 0x100	; MEMORY MAPPED
                                 .equ	UDR2	= 0xd6	; MEMORY MAPPED
                                 .equ	UBRR2L	= 0xd4	; MEMORY MAPPED
                                 .equ	UBRR2H	= 0xd5	; MEMORY MAPPED
                                 .equ	UCSR2C	= 0xd2	; MEMORY MAPPED
                                 .equ	UCSR2B	= 0xd1	; MEMORY MAPPED
                                 .equ	UCSR2A	= 0xd0	; MEMORY MAPPED
                                 .equ	UDR1	= 0xce	; MEMORY MAPPED
                                 .equ	UBRR1L	= 0xcc	; MEMORY MAPPED
                                 .equ	UBRR1H	= 0xcd	; MEMORY MAPPED
                                 .equ	UCSR1C	= 0xca	; MEMORY MAPPED
                                 .equ	UCSR1B	= 0xc9	; MEMORY MAPPED
                                 .equ	UCSR1A	= 0xc8	; MEMORY MAPPED
                                 .equ	UDR0	= 0xc6	; MEMORY MAPPED
                                 .equ	UBRR0L	= 0xc4	; MEMORY MAPPED
                                 .equ	UBRR0H	= 0xc5	; MEMORY MAPPED
                                 .equ	UCSR0C	= 0xc2	; MEMORY MAPPED
                                 .equ	UCSR0B	= 0xc1	; MEMORY MAPPED
                                 .equ	UCSR0A	= 0xc0	; MEMORY MAPPED
                                 .equ	TWAMR	= 0xbd	; MEMORY MAPPED
                                 .equ	TWCR	= 0xbc	; MEMORY MAPPED
                                 .equ	TWDR	= 0xbb	; MEMORY MAPPED
                                 .equ	TWAR	= 0xba	; MEMORY MAPPED
                                 .equ	TWSR	= 0xb9	; MEMORY MAPPED
                                 .equ	TWBR	= 0xb8	; MEMORY MAPPED
                                 .equ	ASSR	= 0xb6	; MEMORY MAPPED
                                 .equ	OCR2B	= 0xb4	; MEMORY MAPPED
                                 .equ	OCR2A	= 0xb3	; MEMORY MAPPED
                                 .equ	TCNT2	= 0xb2	; MEMORY MAPPED
                                 .equ	TCCR2B	= 0xb1	; MEMORY MAPPED
                                 .equ	TCCR2A	= 0xb0	; MEMORY MAPPED
                                 .equ	OCR4CL	= 0xac	; MEMORY MAPPED
                                 .equ	OCR4CH	= 0xad	; MEMORY MAPPED
                                 .equ	OCR4BL	= 0xaa	; MEMORY MAPPED
                                 .equ	OCR4BH	= 0xab	; MEMORY MAPPED
                                 .equ	OCR4AL	= 0xa8	; MEMORY MAPPED
                                 .equ	OCR4AH	= 0xa9	; MEMORY MAPPED
                                 .equ	ICR4L	= 0xa6	; MEMORY MAPPED
                                 .equ	ICR4H	= 0xa7	; MEMORY MAPPED
                                 .equ	TCNT4L	= 0xa4	; MEMORY MAPPED
                                 .equ	TCNT4H	= 0xa5	; MEMORY MAPPED
                                 .equ	TCCR4C	= 0xa2	; MEMORY MAPPED
                                 .equ	TCCR4B	= 0xa1	; MEMORY MAPPED
                                 .equ	TCCR4A	= 0xa0	; MEMORY MAPPED
                                 .equ	OCR3CL	= 0x9c	; MEMORY MAPPED
                                 .equ	OCR3CH	= 0x9d	; MEMORY MAPPED
                                 .equ	OCR3BL	= 0x9a	; MEMORY MAPPED
                                 .equ	OCR3BH	= 0x9b	; MEMORY MAPPED
                                 .equ	OCR3AL	= 0x98	; MEMORY MAPPED
                                 .equ	OCR3AH	= 0x99	; MEMORY MAPPED
                                 .equ	ICR3L	= 0x96	; MEMORY MAPPED
                                 .equ	ICR3H	= 0x97	; MEMORY MAPPED
                                 .equ	TCNT3L	= 0x94	; MEMORY MAPPED
                                 .equ	TCNT3H	= 0x95	; MEMORY MAPPED
                                 .equ	TCCR3C	= 0x92	; MEMORY MAPPED
                                 .equ	TCCR3B	= 0x91	; MEMORY MAPPED
                                 .equ	TCCR3A	= 0x90	; MEMORY MAPPED
                                 .equ	OCR1CL	= 0x8c	; MEMORY MAPPED
                                 .equ	OCR1CH	= 0x8d	; MEMORY MAPPED
                                 .equ	OCR1BL	= 0x8a	; MEMORY MAPPED
                                 .equ	OCR1BH	= 0x8b	; MEMORY MAPPED
                                 .equ	OCR1AL	= 0x88	; MEMORY MAPPED
                                 .equ	OCR1AH	= 0x89	; MEMORY MAPPED
                                 .equ	ICR1L	= 0x86	; MEMORY MAPPED
                                 .equ	ICR1H	= 0x87	; MEMORY MAPPED
                                 .equ	TCNT1L	= 0x84	; MEMORY MAPPED
                                 .equ	TCNT1H	= 0x85	; MEMORY MAPPED
                                 .equ	TCCR1C	= 0x82	; MEMORY MAPPED
                                 .equ	TCCR1B	= 0x81	; MEMORY MAPPED
                                 .equ	TCCR1A	= 0x80	; MEMORY MAPPED
                                 .equ	DIDR1	= 0x7f	; MEMORY MAPPED
                                 .equ	DIDR0	= 0x7e	; MEMORY MAPPED
                                 .equ	DIDR2	= 0x7d	; MEMORY MAPPED
                                 .equ	ADMUX	= 0x7c	; MEMORY MAPPED
                                 .equ	ADCSRB	= 0x7b	; MEMORY MAPPED
                                 .equ	ADCSRA	= 0x7a	; MEMORY MAPPED
                                 .equ	ADCH	= 0x79	; MEMORY MAPPED
                                 .equ	ADCL	= 0x78	; MEMORY MAPPED
                                 .equ	XMCRB	= 0x75	; MEMORY MAPPED
                                 .equ	XMCRA	= 0x74	; MEMORY MAPPED
                                 .equ	TIMSK5	= 0x73	; MEMORY MAPPED
                                 .equ	TIMSK4	= 0x72	; MEMORY MAPPED
                                 .equ	TIMSK3	= 0x71	; MEMORY MAPPED
                                 .equ	TIMSK2	= 0x70	; MEMORY MAPPED
                                 .equ	TIMSK1	= 0x6f	; MEMORY MAPPED
                                 .equ	TIMSK0	= 0x6e	; MEMORY MAPPED
                                 .equ	PCMSK2	= 0x6d	; MEMORY MAPPED
                                 .equ	PCMSK1	= 0x6c	; MEMORY MAPPED
                                 .equ	PCMSK0	= 0x6b	; MEMORY MAPPED
                                 .equ	EICRB	= 0x6a	; MEMORY MAPPED
                                 .equ	EICRA	= 0x69	; MEMORY MAPPED
                                 .equ	PCICR	= 0x68	; MEMORY MAPPED
                                 .equ	OSCCAL	= 0x66	; MEMORY MAPPED
                                 .equ	PRR1	= 0x65	; MEMORY MAPPED
                                 .equ	PRR0	= 0x64	; MEMORY MAPPED
                                 .equ	CLKPR	= 0x61	; MEMORY MAPPED
                                 .equ	WDTCSR	= 0x60	; MEMORY MAPPED
                                 .equ	SREG	= 0x3f
                                 .equ	SPL	= 0x3d
                                 .equ	SPH	= 0x3e
                                 .equ	EIND	= 0x3c
                                 .equ	RAMPZ	= 0x3b
                                 .equ	SPMCSR	= 0x37
                                 .equ	MCUCR	= 0x35
                                 .equ	MCUSR	= 0x34
                                 .equ	SMCR	= 0x33
                                 .equ	OCDR	= 0x31
                                 .equ	ACSR	= 0x30
                                 .equ	SPDR	= 0x2e
                                 .equ	SPSR	= 0x2d
                                 .equ	SPCR	= 0x2c
                                 .equ	GPIOR2	= 0x2b
                                 .equ	GPIOR1	= 0x2a
                                 .equ	OCR0B	= 0x28
                                 .equ	OCR0A	= 0x27
                                 .equ	TCNT0	= 0x26
                                 .equ	TCCR0B	= 0x25
                                 .equ	TCCR0A	= 0x24
                                 .equ	GTCCR	= 0x23
                                 .equ	EEARH	= 0x22
                                 .equ	EEARL	= 0x21
                                 .equ	EEDR	= 0x20
                                 .equ	EECR	= 0x1f
                                 .equ	GPIOR0	= 0x1e
                                 .equ	EIMSK	= 0x1d
                                 .equ	EIFR	= 0x1c
                                 .equ	PCIFR	= 0x1b
                                 .equ	TIFR5	= 0x1a
                                 .equ	TIFR4	= 0x19
                                 .equ	TIFR3	= 0x18
                                 .equ	TIFR2	= 0x17
                                 .equ	TIFR1	= 0x16
                                 .equ	TIFR0	= 0x15
                                 .equ	PORTG	= 0x14
                                 .equ	DDRG	= 0x13
                                 .equ	PING	= 0x12
                                 .equ	PORTF	= 0x11
                                 .equ	DDRF	= 0x10
                                 .equ	PINF	= 0x0f
                                 .equ	PORTE	= 0x0e
                                 .equ	DDRE	= 0x0d
                                 .equ	PINE	= 0x0c
                                 .equ	PORTD	= 0x0b
                                 .equ	DDRD	= 0x0a
                                 .equ	PIND	= 0x09
                                 .equ	PORTC	= 0x08
                                 .equ	DDRC	= 0x07
                                 .equ	PINC	= 0x06
                                 .equ	PORTB	= 0x05
                                 .equ	DDRB	= 0x04
                                 .equ	PINB	= 0x03
                                 .equ	PORTA	= 0x02
                                 .equ	DDRA	= 0x01
                                 .equ	PINA	= 0x00
                                 
                                 
                                 ; ***** BIT DEFINITIONS **************************************************
                                 
                                 ; ***** ANALOG_COMPARATOR ************
                                 ; ADCSRB - ADC Control and Status Register B
                                 .equ	ACME	= 6	; Analog Comparator Multiplexer Enable
                                 
                                 ; ACSR - Analog Comparator Control And Status Register
                                 .equ	ACIS0	= 0	; Analog Comparator Interrupt Mode Select bit 0
                                 .equ	ACIS1	= 1	; Analog Comparator Interrupt Mode Select bit 1
                                 .equ	ACIC	= 2	; Analog Comparator Input Capture Enable
                                 .equ	ACIE	= 3	; Analog Comparator Interrupt Enable
                                 .equ	ACI	= 4	; Analog Comparator Interrupt Flag
                                 .equ	ACO	= 5	; Analog Compare Output
                                 .equ	ACBG	= 6	; Analog Comparator Bandgap Select
                                 .equ	ACD	= 7	; Analog Comparator Disable
                                 
                                 ; DIDR1 - Digital Input Disable Register 1
                                 .equ	AIN0D	= 0	; AIN0 Digital Input Disable
                                 .equ	AIN1D	= 1	; AIN1 Digital Input Disable
                                 
                                 
                                 ; ***** USART0 ***********************
                                 ; UDR0 - USART I/O Data Register
                                 .equ	UDR0_0	= 0	; USART I/O Data Register bit 0
                                 .equ	UDR0_1	= 1	; USART I/O Data Register bit 1
                                 .equ	UDR0_2	= 2	; USART I/O Data Register bit 2
                                 .equ	UDR0_3	= 3	; USART I/O Data Register bit 3
                                 .equ	UDR0_4	= 4	; USART I/O Data Register bit 4
                                 .equ	UDR0_5	= 5	; USART I/O Data Register bit 5
                                 .equ	UDR0_6	= 6	; USART I/O Data Register bit 6
                                 .equ	UDR0_7	= 7	; USART I/O Data Register bit 7
                                 
                                 ; UCSR0A - USART Control and Status Register A
                                 .equ	MPCM0	= 0	; Multi-processor Communication Mode
                                 .equ	U2X0	= 1	; Double the USART transmission speed
                                 .equ	UPE0	= 2	; Parity Error
                                 .equ	DOR0	= 3	; Data overRun
                                 .equ	FE0	= 4	; Framing Error
                                 .equ	UDRE0	= 5	; USART Data Register Empty
                                 .equ	TXC0	= 6	; USART Transmitt Complete
                                 .equ	RXC0	= 7	; USART Receive Complete
                                 
                                 ; UCSR0B - USART Control and Status Register B
                                 .equ	TXB80	= 0	; Transmit Data Bit 8
                                 .equ	RXB80	= 1	; Receive Data Bit 8
                                 .equ	UCSZ02	= 2	; Character Size
                                 .equ	TXEN0	= 3	; Transmitter Enable
                                 .equ	RXEN0	= 4	; Receiver Enable
                                 .equ	UDRIE0	= 5	; USART Data register Empty Interrupt Enable
                                 .equ	TXCIE0	= 6	; TX Complete Interrupt Enable
                                 .equ	RXCIE0	= 7	; RX Complete Interrupt Enable
                                 
                                 ; UCSR0C - USART Control and Status Register C
                                 .equ	UCPOL0	= 0	; Clock Polarity
                                 .equ	UCSZ00	= 1	; Character Size
                                 .equ	UCPHA0	= UCSZ00	; For compatibility
                                 .equ	UCSZ01	= 2	; Character Size
                                 .equ	UDORD0	= UCSZ01	; For compatibility
                                 .equ	USBS0	= 3	; Stop Bit Select
                                 .equ	UPM00	= 4	; Parity Mode Bit 0
                                 .equ	UPM01	= 5	; Parity Mode Bit 1
                                 .equ	UMSEL00	= 6	; USART Mode Select
                                 .equ	UMSEL0	= UMSEL00	; For compatibility
                                 .equ	UMSEL01	= 7	; USART Mode Select
                                 .equ	UMSEL1	= UMSEL01	; For compatibility
                                 
                                 ; UBRR0H - USART Baud Rate Register High Byte
                                 .equ	UBRR8	= 0	; USART Baud Rate Register bit 8
                                 .equ	UBRR9	= 1	; USART Baud Rate Register bit 9
                                 .equ	UBRR10	= 2	; USART Baud Rate Register bit 10
                                 .equ	UBRR11	= 3	; USART Baud Rate Register bit 11
                                 
                                 ; UBRR0L - USART Baud Rate Register Low Byte
                                 .equ	_UBRR0	= 0	; USART Baud Rate Register bit 0
                                 .equ	_UBRR1	= 1	; USART Baud Rate Register bit 1
                                 .equ	UBRR2	= 2	; USART Baud Rate Register bit 2
                                 .equ	UBRR3	= 3	; USART Baud Rate Register bit 3
                                 .equ	UBRR4	= 4	; USART Baud Rate Register bit 4
                                 .equ	UBRR5	= 5	; USART Baud Rate Register bit 5
                                 .equ	UBRR6	= 6	; USART Baud Rate Register bit 6
                                 .equ	UBRR7	= 7	; USART Baud Rate Register bit 7
                                 
                                 
                                 ; ***** TWI **************************
                                 ; TWAMR - TWI (Slave) Address Mask Register
                                 .equ	TWAM0	= 1	; 
                                 .equ	TWAMR0	= TWAM0	; For compatibility
                                 .equ	TWAM1	= 2	; 
                                 .equ	TWAMR1	= TWAM1	; For compatibility
                                 .equ	TWAM2	= 3	; 
                                 .equ	TWAMR2	= TWAM2	; For compatibility
                                 .equ	TWAM3	= 4	; 
                                 .equ	TWAMR3	= TWAM3	; For compatibility
                                 .equ	TWAM4	= 5	; 
                                 .equ	TWAMR4	= TWAM4	; For compatibility
                                 .equ	TWAM5	= 6	; 
                                 .equ	TWAMR5	= TWAM5	; For compatibility
                                 .equ	TWAM6	= 7	; 
                                 .equ	TWAMR6	= TWAM6	; For compatibility
                                 
                                 ; TWBR - TWI Bit Rate register
                                 .equ	TWBR0	= 0	; 
                                 .equ	TWBR1	= 1	; 
                                 .equ	TWBR2	= 2	; 
                                 .equ	TWBR3	= 3	; 
                                 .equ	TWBR4	= 4	; 
                                 .equ	TWBR5	= 5	; 
                                 .equ	TWBR6	= 6	; 
                                 .equ	TWBR7	= 7	; 
                                 
                                 ; TWCR - TWI Control Register
                                 .equ	TWIE	= 0	; TWI Interrupt Enable
                                 .equ	TWEN	= 2	; TWI Enable Bit
                                 .equ	TWWC	= 3	; TWI Write Collition Flag
                                 .equ	TWSTO	= 4	; TWI Stop Condition Bit
                                 .equ	TWSTA	= 5	; TWI Start Condition Bit
                                 .equ	TWEA	= 6	; TWI Enable Acknowledge Bit
                                 .equ	TWINT	= 7	; TWI Interrupt Flag
                                 
                                 ; TWSR - TWI Status Register
                                 .equ	TWPS0	= 0	; TWI Prescaler
                                 .equ	TWPS1	= 1	; TWI Prescaler
                                 .equ	TWS3	= 3	; TWI Status
                                 .equ	TWS4	= 4	; TWI Status
                                 .equ	TWS5	= 5	; TWI Status
                                 .equ	TWS6	= 6	; TWI Status
                                 .equ	TWS7	= 7	; TWI Status
                                 
                                 ; TWDR - TWI Data register
                                 .equ	TWD0	= 0	; TWI Data Register Bit 0
                                 .equ	TWD1	= 1	; TWI Data Register Bit 1
                                 .equ	TWD2	= 2	; TWI Data Register Bit 2
                                 .equ	TWD3	= 3	; TWI Data Register Bit 3
                                 .equ	TWD4	= 4	; TWI Data Register Bit 4
                                 .equ	TWD5	= 5	; TWI Data Register Bit 5
                                 .equ	TWD6	= 6	; TWI Data Register Bit 6
                                 .equ	TWD7	= 7	; TWI Data Register Bit 7
                                 
                                 ; TWAR - TWI (Slave) Address register
                                 .equ	TWGCE	= 0	; TWI General Call Recognition Enable Bit
                                 .equ	TWA0	= 1	; TWI (Slave) Address register Bit 0
                                 .equ	TWA1	= 2	; TWI (Slave) Address register Bit 1
                                 .equ	TWA2	= 3	; TWI (Slave) Address register Bit 2
                                 .equ	TWA3	= 4	; TWI (Slave) Address register Bit 3
                                 .equ	TWA4	= 5	; TWI (Slave) Address register Bit 4
                                 .equ	TWA5	= 6	; TWI (Slave) Address register Bit 5
                                 .equ	TWA6	= 7	; TWI (Slave) Address register Bit 6
                                 
                                 
                                 ; ***** SPI **************************
                                 ; SPDR - SPI Data Register
                                 .equ	SPDR0	= 0	; SPI Data Register bit 0
                                 .equ	SPDR1	= 1	; SPI Data Register bit 1
                                 .equ	SPDR2	= 2	; SPI Data Register bit 2
                                 .equ	SPDR3	= 3	; SPI Data Register bit 3
                                 .equ	SPDR4	= 4	; SPI Data Register bit 4
                                 .equ	SPDR5	= 5	; SPI Data Register bit 5
                                 .equ	SPDR6	= 6	; SPI Data Register bit 6
                                 .equ	SPDR7	= 7	; SPI Data Register bit 7
                                 
                                 ; SPSR - SPI Status Register
                                 .equ	SPI2X	= 0	; Double SPI Speed Bit
                                 .equ	WCOL	= 6	; Write Collision Flag
                                 .equ	SPIF	= 7	; SPI Interrupt Flag
                                 
                                 ; SPCR - SPI Control Register
                                 .equ	SPR0	= 0	; SPI Clock Rate Select 0
                                 .equ	SPR1	= 1	; SPI Clock Rate Select 1
                                 .equ	CPHA	= 2	; Clock Phase
                                 .equ	CPOL	= 3	; Clock polarity
                                 .equ	MSTR	= 4	; Master/Slave Select
                                 .equ	DORD	= 5	; Data Order
                                 .equ	SPE	= 6	; SPI Enable
                                 .equ	SPIE	= 7	; SPI Interrupt Enable
                                 
                                 
                                 ; ***** PORTA ************************
                                 ; PORTA - Port A Data Register
                                 .equ	PORTA0	= 0	; Port A Data Register bit 0
                                 .equ	PA0	= 0	; For compatibility
                                 .equ	PORTA1	= 1	; Port A Data Register bit 1
                                 .equ	PA1	= 1	; For compatibility
                                 .equ	PORTA2	= 2	; Port A Data Register bit 2
                                 .equ	PA2	= 2	; For compatibility
                                 .equ	PORTA3	= 3	; Port A Data Register bit 3
                                 .equ	PA3	= 3	; For compatibility
                                 .equ	PORTA4	= 4	; Port A Data Register bit 4
                                 .equ	PA4	= 4	; For compatibility
                                 .equ	PORTA5	= 5	; Port A Data Register bit 5
                                 .equ	PA5	= 5	; For compatibility
                                 .equ	PORTA6	= 6	; Port A Data Register bit 6
                                 .equ	PA6	= 6	; For compatibility
                                 .equ	PORTA7	= 7	; Port A Data Register bit 7
                                 .equ	PA7	= 7	; For compatibility
                                 
                                 ; DDRA - Port A Data Direction Register
                                 .equ	DDA0	= 0	; Data Direction Register, Port A, bit 0
                                 .equ	DDA1	= 1	; Data Direction Register, Port A, bit 1
                                 .equ	DDA2	= 2	; Data Direction Register, Port A, bit 2
                                 .equ	DDA3	= 3	; Data Direction Register, Port A, bit 3
                                 .equ	DDA4	= 4	; Data Direction Register, Port A, bit 4
                                 .equ	DDA5	= 5	; Data Direction Register, Port A, bit 5
                                 .equ	DDA6	= 6	; Data Direction Register, Port A, bit 6
                                 .equ	DDA7	= 7	; Data Direction Register, Port A, bit 7
                                 
                                 ; PINA - Port A Input Pins
                                 .equ	PINA0	= 0	; Input Pins, Port A bit 0
                                 .equ	PINA1	= 1	; Input Pins, Port A bit 1
                                 .equ	PINA2	= 2	; Input Pins, Port A bit 2
                                 .equ	PINA3	= 3	; Input Pins, Port A bit 3
                                 .equ	PINA4	= 4	; Input Pins, Port A bit 4
                                 .equ	PINA5	= 5	; Input Pins, Port A bit 5
                                 .equ	PINA6	= 6	; Input Pins, Port A bit 6
                                 .equ	PINA7	= 7	; Input Pins, Port A bit 7
                                 
                                 
                                 ; ***** PORTB ************************
                                 ; PORTB - Port B Data Register
                                 .equ	PORTB0	= 0	; Port B Data Register bit 0
                                 .equ	PB0	= 0	; For compatibility
                                 .equ	PORTB1	= 1	; Port B Data Register bit 1
                                 .equ	PB1	= 1	; For compatibility
                                 .equ	PORTB2	= 2	; Port B Data Register bit 2
                                 .equ	PB2	= 2	; For compatibility
                                 .equ	PORTB3	= 3	; Port B Data Register bit 3
                                 .equ	PB3	= 3	; For compatibility
                                 .equ	PORTB4	= 4	; Port B Data Register bit 4
                                 .equ	PB4	= 4	; For compatibility
                                 .equ	PORTB5	= 5	; Port B Data Register bit 5
                                 .equ	PB5	= 5	; For compatibility
                                 .equ	PORTB6	= 6	; Port B Data Register bit 6
                                 .equ	PB6	= 6	; For compatibility
                                 .equ	PORTB7	= 7	; Port B Data Register bit 7
                                 .equ	PB7	= 7	; For compatibility
                                 
                                 ; DDRB - Port B Data Direction Register
                                 .equ	DDB0	= 0	; Port B Data Direction Register bit 0
                                 .equ	DDB1	= 1	; Port B Data Direction Register bit 1
                                 .equ	DDB2	= 2	; Port B Data Direction Register bit 2
                                 .equ	DDB3	= 3	; Port B Data Direction Register bit 3
                                 .equ	DDB4	= 4	; Port B Data Direction Register bit 4
                                 .equ	DDB5	= 5	; Port B Data Direction Register bit 5
                                 .equ	DDB6	= 6	; Port B Data Direction Register bit 6
                                 .equ	DDB7	= 7	; Port B Data Direction Register bit 7
                                 
                                 ; PINB - Port B Input Pins
                                 .equ	PINB0	= 0	; Port B Input Pins bit 0
                                 .equ	PINB1	= 1	; Port B Input Pins bit 1
                                 .equ	PINB2	= 2	; Port B Input Pins bit 2
                                 .equ	PINB3	= 3	; Port B Input Pins bit 3
                                 .equ	PINB4	= 4	; Port B Input Pins bit 4
                                 .equ	PINB5	= 5	; Port B Input Pins bit 5
                                 .equ	PINB6	= 6	; Port B Input Pins bit 6
                                 .equ	PINB7	= 7	; Port B Input Pins bit 7
                                 
                                 
                                 ; ***** PORTC ************************
                                 ; PORTC - Port C Data Register
                                 .equ	PORTC0	= 0	; Port C Data Register bit 0
                                 .equ	PC0	= 0	; For compatibility
                                 .equ	PORTC1	= 1	; Port C Data Register bit 1
                                 .equ	PC1	= 1	; For compatibility
                                 .equ	PORTC2	= 2	; Port C Data Register bit 2
                                 .equ	PC2	= 2	; For compatibility
                                 .equ	PORTC3	= 3	; Port C Data Register bit 3
                                 .equ	PC3	= 3	; For compatibility
                                 .equ	PORTC4	= 4	; Port C Data Register bit 4
                                 .equ	PC4	= 4	; For compatibility
                                 .equ	PORTC5	= 5	; Port C Data Register bit 5
                                 .equ	PC5	= 5	; For compatibility
                                 .equ	PORTC6	= 6	; Port C Data Register bit 6
                                 .equ	PC6	= 6	; For compatibility
                                 .equ	PORTC7	= 7	; Port C Data Register bit 7
                                 .equ	PC7	= 7	; For compatibility
                                 
                                 ; DDRC - Port C Data Direction Register
                                 .equ	DDC0	= 0	; Port C Data Direction Register bit 0
                                 .equ	DDC1	= 1	; Port C Data Direction Register bit 1
                                 .equ	DDC2	= 2	; Port C Data Direction Register bit 2
                                 .equ	DDC3	= 3	; Port C Data Direction Register bit 3
                                 .equ	DDC4	= 4	; Port C Data Direction Register bit 4
                                 .equ	DDC5	= 5	; Port C Data Direction Register bit 5
                                 .equ	DDC6	= 6	; Port C Data Direction Register bit 6
                                 .equ	DDC7	= 7	; Port C Data Direction Register bit 7
                                 
                                 ; PINC - Port C Input Pins
                                 .equ	PINC0	= 0	; Port C Input Pins bit 0
                                 .equ	PINC1	= 1	; Port C Input Pins bit 1
                                 .equ	PINC2	= 2	; Port C Input Pins bit 2
                                 .equ	PINC3	= 3	; Port C Input Pins bit 3
                                 .equ	PINC4	= 4	; Port C Input Pins bit 4
                                 .equ	PINC5	= 5	; Port C Input Pins bit 5
                                 .equ	PINC6	= 6	; Port C Input Pins bit 6
                                 .equ	PINC7	= 7	; Port C Input Pins bit 7
                                 
                                 
                                 ; ***** PORTD ************************
                                 ; PORTD - Port D Data Register
                                 .equ	PORTD0	= 0	; Port D Data Register bit 0
                                 .equ	PD0	= 0	; For compatibility
                                 .equ	PORTD1	= 1	; Port D Data Register bit 1
                                 .equ	PD1	= 1	; For compatibility
                                 .equ	PORTD2	= 2	; Port D Data Register bit 2
                                 .equ	PD2	= 2	; For compatibility
                                 .equ	PORTD3	= 3	; Port D Data Register bit 3
                                 .equ	PD3	= 3	; For compatibility
                                 .equ	PORTD4	= 4	; Port D Data Register bit 4
                                 .equ	PD4	= 4	; For compatibility
                                 .equ	PORTD5	= 5	; Port D Data Register bit 5
                                 .equ	PD5	= 5	; For compatibility
                                 .equ	PORTD6	= 6	; Port D Data Register bit 6
                                 .equ	PD6	= 6	; For compatibility
                                 .equ	PORTD7	= 7	; Port D Data Register bit 7
                                 .equ	PD7	= 7	; For compatibility
                                 
                                 ; DDRD - Port D Data Direction Register
                                 .equ	DDD0	= 0	; Port D Data Direction Register bit 0
                                 .equ	DDD1	= 1	; Port D Data Direction Register bit 1
                                 .equ	DDD2	= 2	; Port D Data Direction Register bit 2
                                 .equ	DDD3	= 3	; Port D Data Direction Register bit 3
                                 .equ	DDD4	= 4	; Port D Data Direction Register bit 4
                                 .equ	DDD5	= 5	; Port D Data Direction Register bit 5
                                 .equ	DDD6	= 6	; Port D Data Direction Register bit 6
                                 .equ	DDD7	= 7	; Port D Data Direction Register bit 7
                                 
                                 ; PIND - Port D Input Pins
                                 .equ	PIND0	= 0	; Port D Input Pins bit 0
                                 .equ	PIND1	= 1	; Port D Input Pins bit 1
                                 .equ	PIND2	= 2	; Port D Input Pins bit 2
                                 .equ	PIND3	= 3	; Port D Input Pins bit 3
                                 .equ	PIND4	= 4	; Port D Input Pins bit 4
                                 .equ	PIND5	= 5	; Port D Input Pins bit 5
                                 .equ	PIND6	= 6	; Port D Input Pins bit 6
                                 .equ	PIND7	= 7	; Port D Input Pins bit 7
                                 
                                 
                                 ; ***** PORTE ************************
                                 ; PORTE - Data Register, Port E
                                 .equ	PORTE0	= 0	; 
                                 .equ	PE0	= 0	; For compatibility
                                 .equ	PORTE1	= 1	; 
                                 .equ	PE1	= 1	; For compatibility
                                 .equ	PORTE2	= 2	; 
                                 .equ	PE2	= 2	; For compatibility
                                 .equ	PORTE3	= 3	; 
                                 .equ	PE3	= 3	; For compatibility
                                 .equ	PORTE4	= 4	; 
                                 .equ	PE4	= 4	; For compatibility
                                 .equ	PORTE5	= 5	; 
                                 .equ	PE5	= 5	; For compatibility
                                 .equ	PORTE6	= 6	; 
                                 .equ	PE6	= 6	; For compatibility
                                 .equ	PORTE7	= 7	; 
                                 .equ	PE7	= 7	; For compatibility
                                 
                                 ; DDRE - Data Direction Register, Port E
                                 .equ	DDE0	= 0	; 
                                 .equ	DDE1	= 1	; 
                                 .equ	DDE2	= 2	; 
                                 .equ	DDE3	= 3	; 
                                 .equ	DDE4	= 4	; 
                                 .equ	DDE5	= 5	; 
                                 .equ	DDE6	= 6	; 
                                 .equ	DDE7	= 7	; 
                                 
                                 ; PINE - Input Pins, Port E
                                 .equ	PINE0	= 0	; 
                                 .equ	PINE1	= 1	; 
                                 .equ	PINE2	= 2	; 
                                 .equ	PINE3	= 3	; 
                                 .equ	PINE4	= 4	; 
                                 .equ	PINE5	= 5	; 
                                 .equ	PINE6	= 6	; 
                                 .equ	PINE7	= 7	; 
                                 
                                 
                                 ; ***** PORTF ************************
                                 ; PORTF - Data Register, Port F
                                 .equ	PORTF0	= 0	; 
                                 .equ	PF0	= 0	; For compatibility
                                 .equ	PORTF1	= 1	; 
                                 .equ	PF1	= 1	; For compatibility
                                 .equ	PORTF2	= 2	; 
                                 .equ	PF2	= 2	; For compatibility
                                 .equ	PORTF3	= 3	; 
                                 .equ	PF3	= 3	; For compatibility
                                 .equ	PORTF4	= 4	; 
                                 .equ	PF4	= 4	; For compatibility
                                 .equ	PORTF5	= 5	; 
                                 .equ	PF5	= 5	; For compatibility
                                 .equ	PORTF6	= 6	; 
                                 .equ	PF6	= 6	; For compatibility
                                 .equ	PORTF7	= 7	; 
                                 .equ	PF7	= 7	; For compatibility
                                 
                                 ; DDRF - Data Direction Register, Port F
                                 .equ	DDF0	= 0	; 
                                 .equ	DDF1	= 1	; 
                                 .equ	DDF2	= 2	; 
                                 .equ	DDF3	= 3	; 
                                 .equ	DDF4	= 4	; 
                                 .equ	DDF5	= 5	; 
                                 .equ	DDF6	= 6	; 
                                 .equ	DDF7	= 7	; 
                                 
                                 ; PINF - Input Pins, Port F
                                 .equ	PINF0	= 0	; 
                                 .equ	PINF1	= 1	; 
                                 .equ	PINF2	= 2	; 
                                 .equ	PINF3	= 3	; 
                                 .equ	PINF4	= 4	; 
                                 .equ	PINF5	= 5	; 
                                 .equ	PINF6	= 6	; 
                                 .equ	PINF7	= 7	; 
                                 
                                 
                                 ; ***** PORTG ************************
                                 ; PORTG - Data Register, Port G
                                 .equ	PORTG0	= 0	; 
                                 .equ	PG0	= 0	; For compatibility
                                 .equ	PORTG1	= 1	; 
                                 .equ	PG1	= 1	; For compatibility
                                 .equ	PORTG2	= 2	; 
                                 .equ	PG2	= 2	; For compatibility
                                 .equ	PORTG3	= 3	; 
                                 .equ	PG3	= 3	; For compatibility
                                 .equ	PORTG4	= 4	; 
                                 .equ	PG4	= 4	; For compatibility
                                 .equ	PORTG5	= 5	; 
                                 .equ	PG5	= 5	; For compatibility
                                 
                                 ; DDRG - Data Direction Register, Port G
                                 .equ	DDG0	= 0	; 
                                 .equ	DDG1	= 1	; 
                                 .equ	DDG2	= 2	; 
                                 .equ	DDG3	= 3	; 
                                 .equ	DDG4	= 4	; 
                                 .equ	DDG5	= 5	; 
                                 
                                 ; PING - Input Pins, Port G
                                 .equ	PING0	= 0	; 
                                 .equ	PING1	= 1	; 
                                 .equ	PING2	= 2	; 
                                 .equ	PING3	= 3	; 
                                 .equ	PING4	= 4	; 
                                 .equ	PING5	= 5	; 
                                 
                                 
                                 ; ***** PORTH ************************
                                 ; PORTH - PORT H Data Register
                                 .equ	PORTH0	= 0	; PORT H Data Register bit 0
                                 .equ	PH0	= 0	; For compatibility
                                 .equ	PORTH1	= 1	; PORT H Data Register bit 1
                                 .equ	PH1	= 1	; For compatibility
                                 .equ	PORTH2	= 2	; PORT H Data Register bit 2
                                 .equ	PH2	= 2	; For compatibility
                                 .equ	PORTH3	= 3	; PORT H Data Register bit 3
                                 .equ	PH3	= 3	; For compatibility
                                 .equ	PORTH4	= 4	; PORT H Data Register bit 4
                                 .equ	PH4	= 4	; For compatibility
                                 .equ	PORTH5	= 5	; PORT H Data Register bit 5
                                 .equ	PH5	= 5	; For compatibility
                                 .equ	PORTH6	= 6	; PORT H Data Register bit 6
                                 .equ	PH6	= 6	; For compatibility
                                 .equ	PORTH7	= 7	; PORT H Data Register bit 7
                                 .equ	PH7	= 7	; For compatibility
                                 
                                 ; DDRH - PORT H Data Direction Register
                                 .equ	DDH0	= 0	; PORT H Data Direction Register bit 0
                                 .equ	DDH1	= 1	; PORT H Data Direction Register bit 1
                                 .equ	DDH2	= 2	; PORT H Data Direction Register bit 2
                                 .equ	DDH3	= 3	; PORT H Data Direction Register bit 3
                                 .equ	DDH4	= 4	; PORT H Data Direction Register bit 4
                                 .equ	DDH5	= 5	; PORT H Data Direction Register bit 5
                                 .equ	DDH6	= 6	; PORT H Data Direction Register bit 6
                                 .equ	DDH7	= 7	; PORT H Data Direction Register bit 7
                                 
                                 ; PINH - PORT H Input Pins
                                 .equ	PINH0	= 0	; PORT H Input Pins bit 0
                                 .equ	PINH1	= 1	; PORT H Input Pins bit 1
                                 .equ	PINH2	= 2	; PORT H Input Pins bit 2
                                 .equ	PINH3	= 3	; PORT H Input Pins bit 3
                                 .equ	PINH4	= 4	; PORT H Input Pins bit 4
                                 .equ	PINH5	= 5	; PORT H Input Pins bit 5
                                 .equ	PINH6	= 6	; PORT H Input Pins bit 6
                                 .equ	PINH7	= 7	; PORT H Input Pins bit 7
                                 
                                 
                                 ; ***** PORTJ ************************
                                 ; PORTJ - PORT J Data Register
                                 .equ	PORTJ0	= 0	; PORT J Data Register bit 0
                                 .equ	PJ0	= 0	; For compatibility
                                 .equ	PORTJ1	= 1	; PORT J Data Register bit 1
                                 .equ	PJ1	= 1	; For compatibility
                                 .equ	PORTJ2	= 2	; PORT J Data Register bit 2
                                 .equ	PJ2	= 2	; For compatibility
                                 .equ	PORTJ3	= 3	; PORT J Data Register bit 3
                                 .equ	PJ3	= 3	; For compatibility
                                 .equ	PORTJ4	= 4	; PORT J Data Register bit 4
                                 .equ	PJ4	= 4	; For compatibility
                                 .equ	PORTJ5	= 5	; PORT J Data Register bit 5
                                 .equ	PJ5	= 5	; For compatibility
                                 .equ	PORTJ6	= 6	; PORT J Data Register bit 6
                                 .equ	PJ6	= 6	; For compatibility
                                 .equ	PORTJ7	= 7	; PORT J Data Register bit 7
                                 .equ	PJ7	= 7	; For compatibility
                                 
                                 ; DDRJ - PORT J Data Direction Register
                                 .equ	DDJ0	= 0	; PORT J Data Direction Register bit 0
                                 .equ	DDJ1	= 1	; PORT J Data Direction Register bit 1
                                 .equ	DDJ2	= 2	; PORT J Data Direction Register bit 2
                                 .equ	DDJ3	= 3	; PORT J Data Direction Register bit 3
                                 .equ	DDJ4	= 4	; PORT J Data Direction Register bit 4
                                 .equ	DDJ5	= 5	; PORT J Data Direction Register bit 5
                                 .equ	DDJ6	= 6	; PORT J Data Direction Register bit 6
                                 .equ	DDJ7	= 7	; PORT J Data Direction Register bit 7
                                 
                                 ; PINJ - PORT J Input Pins
                                 .equ	PINJ0	= 0	; PORT J Input Pins bit 0
                                 .equ	PINJ1	= 1	; PORT J Input Pins bit 1
                                 .equ	PINJ2	= 2	; PORT J Input Pins bit 2
                                 .equ	PINJ3	= 3	; PORT J Input Pins bit 3
                                 .equ	PINJ4	= 4	; PORT J Input Pins bit 4
                                 .equ	PINJ5	= 5	; PORT J Input Pins bit 5
                                 .equ	PINJ6	= 6	; PORT J Input Pins bit 6
                                 .equ	PINJ7	= 7	; PORT J Input Pins bit 7
                                 
                                 
                                 ; ***** PORTK ************************
                                 ; PORTK - PORT K Data Register
                                 .equ	PORTK0	= 0	; PORT K Data Register bit 0
                                 .equ	PK0	= 0	; For compatibility
                                 .equ	PORTK1	= 1	; PORT K Data Register bit 1
                                 .equ	PK1	= 1	; For compatibility
                                 .equ	PORTK2	= 2	; PORT K Data Register bit 2
                                 .equ	PK2	= 2	; For compatibility
                                 .equ	PORTK3	= 3	; PORT K Data Register bit 3
                                 .equ	PK3	= 3	; For compatibility
                                 .equ	PORTK4	= 4	; PORT K Data Register bit 4
                                 .equ	PK4	= 4	; For compatibility
                                 .equ	PORTK5	= 5	; PORT K Data Register bit 5
                                 .equ	PK5	= 5	; For compatibility
                                 .equ	PORTK6	= 6	; PORT K Data Register bit 6
                                 .equ	PK6	= 6	; For compatibility
                                 .equ	PORTK7	= 7	; PORT K Data Register bit 7
                                 .equ	PK7	= 7	; For compatibility
                                 
                                 ; DDRK - PORT K Data Direction Register
                                 .equ	DDK0	= 0	; PORT K Data Direction Register bit 0
                                 .equ	DDK1	= 1	; PORT K Data Direction Register bit 1
                                 .equ	DDK2	= 2	; PORT K Data Direction Register bit 2
                                 .equ	DDK3	= 3	; PORT K Data Direction Register bit 3
                                 .equ	DDK4	= 4	; PORT K Data Direction Register bit 4
                                 .equ	DDK5	= 5	; PORT K Data Direction Register bit 5
                                 .equ	DDK6	= 6	; PORT K Data Direction Register bit 6
                                 .equ	DDK7	= 7	; PORT K Data Direction Register bit 7
                                 
                                 ; PINK - PORT K Input Pins
                                 .equ	PINK0	= 0	; PORT K Input Pins bit 0
                                 .equ	PINK1	= 1	; PORT K Input Pins bit 1
                                 .equ	PINK2	= 2	; PORT K Input Pins bit 2
                                 .equ	PINK3	= 3	; PORT K Input Pins bit 3
                                 .equ	PINK4	= 4	; PORT K Input Pins bit 4
                                 .equ	PINK5	= 5	; PORT K Input Pins bit 5
                                 .equ	PINK6	= 6	; PORT K Input Pins bit 6
                                 .equ	PINK7	= 7	; PORT K Input Pins bit 7
                                 
                                 
                                 ; ***** PORTL ************************
                                 ; PORTL - PORT L Data Register
                                 .equ	PORTL0	= 0	; PORT L Data Register bit 0
                                 .equ	PL0	= 0	; For compatibility
                                 .equ	PORTL1	= 1	; PORT L Data Register bit 1
                                 .equ	PL1	= 1	; For compatibility
                                 .equ	PORTL2	= 2	; PORT L Data Register bit 2
                                 .equ	PL2	= 2	; For compatibility
                                 .equ	PORTL3	= 3	; PORT L Data Register bit 3
                                 .equ	PL3	= 3	; For compatibility
                                 .equ	PORTL4	= 4	; PORT L Data Register bit 4
                                 .equ	PL4	= 4	; For compatibility
                                 .equ	PORTL5	= 5	; PORT L Data Register bit 5
                                 .equ	PL5	= 5	; For compatibility
                                 .equ	PORTL6	= 6	; PORT L Data Register bit 6
                                 .equ	PL6	= 6	; For compatibility
                                 .equ	PORTL7	= 7	; PORT L Data Register bit 7
                                 .equ	PL7	= 7	; For compatibility
                                 
                                 ; DDRL - PORT L Data Direction Register
                                 .equ	DDL0	= 0	; PORT L Data Direction Register bit 0
                                 .equ	DDL1	= 1	; PORT L Data Direction Register bit 1
                                 .equ	DDL2	= 2	; PORT L Data Direction Register bit 2
                                 .equ	DDL3	= 3	; PORT L Data Direction Register bit 3
                                 .equ	DDL4	= 4	; PORT L Data Direction Register bit 4
                                 .equ	DDL5	= 5	; PORT L Data Direction Register bit 5
                                 .equ	DDL6	= 6	; PORT L Data Direction Register bit 6
                                 .equ	DDL7	= 7	; PORT L Data Direction Register bit 7
                                 
                                 ; PINL - PORT L Input Pins
                                 .equ	PINL0	= 0	; PORT L Input Pins bit 0
                                 .equ	PINL1	= 1	; PORT L Input Pins bit 1
                                 .equ	PINL2	= 2	; PORT L Input Pins bit 2
                                 .equ	PINL3	= 3	; PORT L Input Pins bit 3
                                 .equ	PINL4	= 4	; PORT L Input Pins bit 4
                                 .equ	PINL5	= 5	; PORT L Input Pins bit 5
                                 .equ	PINL6	= 6	; PORT L Input Pins bit 6
                                 .equ	PINL7	= 7	; PORT L Input Pins bit 7
                                 
                                 
                                 ; ***** TIMER_COUNTER_0 **************
                                 ; TIMSK0 - Timer/Counter0 Interrupt Mask Register
                                 .equ	TOIE0	= 0	; Timer/Counter0 Overflow Interrupt Enable
                                 .equ	OCIE0A	= 1	; Timer/Counter0 Output Compare Match A Interrupt Enable
                                 .equ	OCIE0B	= 2	; Timer/Counter0 Output Compare Match B Interrupt Enable
                                 
                                 ; TIFR0 - Timer/Counter0 Interrupt Flag register
                                 .equ	TOV0	= 0	; Timer/Counter0 Overflow Flag
                                 .equ	OCF0A	= 1	; Timer/Counter0 Output Compare Flag 0A
                                 .equ	OCF0B	= 2	; Timer/Counter0 Output Compare Flag 0B
                                 
                                 ; TCCR0A - Timer/Counter  Control Register A
                                 .equ	WGM00	= 0	; Waveform Generation Mode
                                 .equ	WGM01	= 1	; Waveform Generation Mode
                                 .equ	COM0B0	= 4	; Compare Output Mode, Fast PWm
                                 .equ	COM0B1	= 5	; Compare Output Mode, Fast PWm
                                 .equ	COM0A0	= 6	; Compare Output Mode, Phase Correct PWM Mode
                                 .equ	COM0A1	= 7	; Compare Output Mode, Phase Correct PWM Mode
                                 
                                 ; TCCR0B - Timer/Counter Control Register B
                                 .equ	CS00	= 0	; Clock Select
                                 .equ	CS01	= 1	; Clock Select
                                 .equ	CS02	= 2	; Clock Select
                                 .equ	WGM02	= 3	; 
                                 .equ	FOC0B	= 6	; Force Output Compare B
                                 .equ	FOC0A	= 7	; Force Output Compare A
                                 
                                 ; TCNT0 - Timer/Counter0
                                 .equ	TCNT0_0	= 0	; 
                                 .equ	TCNT0_1	= 1	; 
                                 .equ	TCNT0_2	= 2	; 
                                 .equ	TCNT0_3	= 3	; 
                                 .equ	TCNT0_4	= 4	; 
                                 .equ	TCNT0_5	= 5	; 
                                 .equ	TCNT0_6	= 6	; 
                                 .equ	TCNT0_7	= 7	; 
                                 
                                 ; OCR0A - Timer/Counter0 Output Compare Register
                                 .equ	OCR0A_0	= 0	; 
                                 .equ	OCR0A_1	= 1	; 
                                 .equ	OCR0A_2	= 2	; 
                                 .equ	OCR0A_3	= 3	; 
                                 .equ	OCR0A_4	= 4	; 
                                 .equ	OCR0A_5	= 5	; 
                                 .equ	OCR0A_6	= 6	; 
                                 .equ	OCR0A_7	= 7	; 
                                 
                                 ; OCR0B - Timer/Counter0 Output Compare Register
                                 .equ	OCR0B_0	= 0	; 
                                 .equ	OCR0B_1	= 1	; 
                                 .equ	OCR0B_2	= 2	; 
                                 .equ	OCR0B_3	= 3	; 
                                 .equ	OCR0B_4	= 4	; 
                                 .equ	OCR0B_5	= 5	; 
                                 .equ	OCR0B_6	= 6	; 
                                 .equ	OCR0B_7	= 7	; 
                                 
                                 ; GTCCR - General Timer/Counter Control Register
                                 .equ	PSRSYNC	= 0	; Prescaler Reset Timer/Counter1 and Timer/Counter0
                                 .equ	PSR10	= PSRSYNC	; For compatibility
                                 .equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 
                                 ; ***** TIMER_COUNTER_2 **************
                                 ; TIMSK2 - Timer/Counter Interrupt Mask register
                                 .equ	TOIE2	= 0	; Timer/Counter2 Overflow Interrupt Enable
                                 .equ	TOIE2A	= TOIE2	; For compatibility
                                 .equ	OCIE2A	= 1	; Timer/Counter2 Output Compare Match A Interrupt Enable
                                 .equ	OCIE2B	= 2	; Timer/Counter2 Output Compare Match B Interrupt Enable
                                 
                                 ; TIFR2 - Timer/Counter Interrupt Flag Register
                                 .equ	TOV2	= 0	; Timer/Counter2 Overflow Flag
                                 .equ	OCF2A	= 1	; Output Compare Flag 2A
                                 .equ	OCF2B	= 2	; Output Compare Flag 2B
                                 
                                 ; TCCR2A - Timer/Counter2 Control Register A
                                 .equ	WGM20	= 0	; Waveform Genration Mode
                                 .equ	WGM21	= 1	; Waveform Genration Mode
                                 .equ	COM2B0	= 4	; Compare Output Mode bit 0
                                 .equ	COM2B1	= 5	; Compare Output Mode bit 1
                                 .equ	COM2A0	= 6	; Compare Output Mode bit 1
                                 .equ	COM2A1	= 7	; Compare Output Mode bit 1
                                 
                                 ; TCCR2B - Timer/Counter2 Control Register B
                                 .equ	CS20	= 0	; Clock Select bit 0
                                 .equ	CS21	= 1	; Clock Select bit 1
                                 .equ	CS22	= 2	; Clock Select bit 2
                                 .equ	WGM22	= 3	; Waveform Generation Mode
                                 .equ	FOC2B	= 6	; Force Output Compare B
                                 .equ	FOC2A	= 7	; Force Output Compare A
                                 
                                 ; TCNT2 - Timer/Counter2
                                 .equ	TCNT2_0	= 0	; Timer/Counter 2 bit 0
                                 .equ	TCNT2_1	= 1	; Timer/Counter 2 bit 1
                                 .equ	TCNT2_2	= 2	; Timer/Counter 2 bit 2
                                 .equ	TCNT2_3	= 3	; Timer/Counter 2 bit 3
                                 .equ	TCNT2_4	= 4	; Timer/Counter 2 bit 4
                                 .equ	TCNT2_5	= 5	; Timer/Counter 2 bit 5
                                 .equ	TCNT2_6	= 6	; Timer/Counter 2 bit 6
                                 .equ	TCNT2_7	= 7	; Timer/Counter 2 bit 7
                                 
                                 ; OCR2A - Timer/Counter2 Output Compare Register A
                                 .equ	OCR2A_0	= 0	; Timer/Counter2 Output Compare Register Bit 0
                                 .equ	OCR2A_1	= 1	; Timer/Counter2 Output Compare Register Bit 1
                                 .equ	OCR2A_2	= 2	; Timer/Counter2 Output Compare Register Bit 2
                                 .equ	OCR2A_3	= 3	; Timer/Counter2 Output Compare Register Bit 3
                                 .equ	OCR2A_4	= 4	; Timer/Counter2 Output Compare Register Bit 4
                                 .equ	OCR2A_5	= 5	; Timer/Counter2 Output Compare Register Bit 5
                                 .equ	OCR2A_6	= 6	; Timer/Counter2 Output Compare Register Bit 6
                                 .equ	OCR2A_7	= 7	; Timer/Counter2 Output Compare Register Bit 7
                                 
                                 ; OCR2B - Timer/Counter2 Output Compare Register B
                                 .equ	OCR2B_0	= 0	; Timer/Counter2 Output Compare Register Bit 0
                                 .equ	OCR2B_1	= 1	; Timer/Counter2 Output Compare Register Bit 1
                                 .equ	OCR2B_2	= 2	; Timer/Counter2 Output Compare Register Bit 2
                                 .equ	OCR2B_3	= 3	; Timer/Counter2 Output Compare Register Bit 3
                                 .equ	OCR2B_4	= 4	; Timer/Counter2 Output Compare Register Bit 4
                                 .equ	OCR2B_5	= 5	; Timer/Counter2 Output Compare Register Bit 5
                                 .equ	OCR2B_6	= 6	; Timer/Counter2 Output Compare Register Bit 6
                                 .equ	OCR2B_7	= 7	; Timer/Counter2 Output Compare Register Bit 7
                                 
                                 ; ASSR - Asynchronous Status Register
                                 .equ	TCR2BUB	= 0	; Timer/Counter Control Register2 Update Busy
                                 .equ	TCR2AUB	= 1	; Timer/Counter Control Register2 Update Busy
                                 .equ	OCR2BUB	= 2	; Output Compare Register 2 Update Busy
                                 .equ	OCR2AUB	= 3	; Output Compare Register2 Update Busy
                                 .equ	TCN2UB	= 4	; Timer/Counter2 Update Busy
                                 .equ	AS2	= 5	; Asynchronous Timer/Counter2
                                 .equ	EXCLK	= 6	; Enable External Clock Input
                                 
                                 ; GTCCR - General Timer Counter Control register
                                 .equ	PSRASY	= 1	; Prescaler Reset Timer/Counter2
                                 .equ	PSR2	= PSRASY	; For compatibility
                                 ;.equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 
                                 ; ***** WATCHDOG *********************
                                 ; WDTCSR - Watchdog Timer Control Register
                                 .equ	WDP0	= 0	; Watch Dog Timer Prescaler bit 0
                                 .equ	WDP1	= 1	; Watch Dog Timer Prescaler bit 1
                                 .equ	WDP2	= 2	; Watch Dog Timer Prescaler bit 2
                                 .equ	WDE	= 3	; Watch Dog Enable
                                 .equ	WDCE	= 4	; Watchdog Change Enable
                                 .equ	WDP3	= 5	; Watchdog Timer Prescaler Bit 3
                                 .equ	WDIE	= 6	; Watchdog Timeout Interrupt Enable
                                 .equ	WDIF	= 7	; Watchdog Timeout Interrupt Flag
                                 
                                 
                                 ; ***** USART1 ***********************
                                 ; UDR1 - USART I/O Data Register
                                 .equ	UDR1_0	= 0	; USART I/O Data Register bit 0
                                 .equ	UDR1_1	= 1	; USART I/O Data Register bit 1
                                 .equ	UDR1_2	= 2	; USART I/O Data Register bit 2
                                 .equ	UDR1_3	= 3	; USART I/O Data Register bit 3
                                 .equ	UDR1_4	= 4	; USART I/O Data Register bit 4
                                 .equ	UDR1_5	= 5	; USART I/O Data Register bit 5
                                 .equ	UDR1_6	= 6	; USART I/O Data Register bit 6
                                 .equ	UDR1_7	= 7	; USART I/O Data Register bit 7
                                 
                                 ; UCSR1A - USART Control and Status Register A
                                 .equ	MPCM1	= 0	; Multi-processor Communication Mode
                                 .equ	U2X1	= 1	; Double the USART transmission speed
                                 .equ	UPE1	= 2	; Parity Error
                                 .equ	DOR1	= 3	; Data overRun
                                 .equ	FE1	= 4	; Framing Error
                                 .equ	UDRE1	= 5	; USART Data Register Empty
                                 .equ	TXC1	= 6	; USART Transmitt Complete
                                 .equ	RXC1	= 7	; USART Receive Complete
                                 
                                 ; UCSR1B - USART Control and Status Register B
                                 .equ	TXB81	= 0	; Transmit Data Bit 8
                                 .equ	RXB81	= 1	; Receive Data Bit 8
                                 .equ	UCSZ12	= 2	; Character Size
                                 .equ	TXEN1	= 3	; Transmitter Enable
                                 .equ	RXEN1	= 4	; Receiver Enable
                                 .equ	UDRIE1	= 5	; USART Data register Empty Interrupt Enable
                                 .equ	TXCIE1	= 6	; TX Complete Interrupt Enable
                                 .equ	RXCIE1	= 7	; RX Complete Interrupt Enable
                                 
                                 ; UCSR1C - USART Control and Status Register C
                                 .equ	UCPOL1	= 0	; Clock Polarity
                                 .equ	UCSZ10	= 1	; Character Size
                                 .equ	UCPHA1	= UCSZ10	; For compatibility
                                 .equ	UCSZ11	= 2	; Character Size
                                 .equ	UDORD1	= UCSZ11	; For compatibility
                                 .equ	USBS1	= 3	; Stop Bit Select
                                 .equ	UPM10	= 4	; Parity Mode Bit 0
                                 .equ	UPM11	= 5	; Parity Mode Bit 1
                                 .equ	UMSEL10	= 6	; USART Mode Select
                                 .equ	UMSEL11	= 7	; USART Mode Select
                                 
                                 ; UBRR1H - USART Baud Rate Register High Byte
                                 .equ	UBRR_8	= 0	; USART Baud Rate Register bit 8
                                 .equ	UBRR_9	= 1	; USART Baud Rate Register bit 9
                                 .equ	UBRR_10	= 2	; USART Baud Rate Register bit 10
                                 .equ	UBRR_11	= 3	; USART Baud Rate Register bit 11
                                 
                                 ; UBRR1L - USART Baud Rate Register Low Byte
                                 .equ	UBRR_0	= 0	; USART Baud Rate Register bit 0
                                 .equ	UBRR_1	= 1	; USART Baud Rate Register bit 1
                                 .equ	UBRR_2	= 2	; USART Baud Rate Register bit 2
                                 .equ	UBRR_3	= 3	; USART Baud Rate Register bit 3
                                 .equ	UBRR_4	= 4	; USART Baud Rate Register bit 4
                                 .equ	UBRR_5	= 5	; USART Baud Rate Register bit 5
                                 .equ	UBRR_6	= 6	; USART Baud Rate Register bit 6
                                 .equ	UBRR_7	= 7	; USART Baud Rate Register bit 7
                                 
                                 
                                 ; ***** EEPROM ***********************
                                 ; EEARH - EEPROM Address Register Low Byte
                                 .equ	EEAR8	= 0	; EEPROM Read/Write Access Bit 8
                                 .equ	EEAR9	= 1	; EEPROM Read/Write Access Bit 9
                                 .equ	EEAR10	= 2	; EEPROM Read/Write Access Bit 10
                                 .equ	EEAR11	= 3	; EEPROM Read/Write Access Bit 11
                                 
                                 ; EEARL - EEPROM Address Register Low Byte
                                 .equ	EEAR0	= 0	; EEPROM Read/Write Access Bit 0
                                 .equ	EEAR1	= 1	; EEPROM Read/Write Access Bit 1
                                 .equ	EEAR2	= 2	; EEPROM Read/Write Access Bit 2
                                 .equ	EEAR3	= 3	; EEPROM Read/Write Access Bit 3
                                 .equ	EEAR4	= 4	; EEPROM Read/Write Access Bit 4
                                 .equ	EEAR5	= 5	; EEPROM Read/Write Access Bit 5
                                 .equ	EEAR6	= 6	; EEPROM Read/Write Access Bit 6
                                 .equ	EEAR7	= 7	; EEPROM Read/Write Access Bit 7
                                 
                                 ; EEDR - EEPROM Data Register
                                 .equ	EEDR0	= 0	; EEPROM Data Register bit 0
                                 .equ	EEDR1	= 1	; EEPROM Data Register bit 1
                                 .equ	EEDR2	= 2	; EEPROM Data Register bit 2
                                 .equ	EEDR3	= 3	; EEPROM Data Register bit 3
                                 .equ	EEDR4	= 4	; EEPROM Data Register bit 4
                                 .equ	EEDR5	= 5	; EEPROM Data Register bit 5
                                 .equ	EEDR6	= 6	; EEPROM Data Register bit 6
                                 .equ	EEDR7	= 7	; EEPROM Data Register bit 7
                                 
                                 ; EECR - EEPROM Control Register
                                 .equ	EERE	= 0	; EEPROM Read Enable
                                 .equ	EEPE	= 1	; EEPROM Write Enable
                                 .equ	EEMPE	= 2	; EEPROM Master Write Enable
                                 .equ	EERIE	= 3	; EEPROM Ready Interrupt Enable
                                 .equ	EEPM0	= 4	; EEPROM Programming Mode Bit 0
                                 .equ	EEPM1	= 5	; EEPROM Programming Mode Bit 1
                                 
                                 
                                 ; ***** TIMER_COUNTER_5 **************
                                 ; TIMSK5 - Timer/Counter5 Interrupt Mask Register
                                 .equ	TOIE5	= 0	; Timer/Counter5 Overflow Interrupt Enable
                                 .equ	OCIE5A	= 1	; Timer/Counter5 Output Compare A Match Interrupt Enable
                                 .equ	OCIE5B	= 2	; Timer/Counter5 Output Compare B Match Interrupt Enable
                                 .equ	OCIE5C	= 3	; Timer/Counter5 Output Compare C Match Interrupt Enable
                                 .equ	ICIE5	= 5	; Timer/Counter5 Input Capture Interrupt Enable
                                 
                                 ; TIFR5 - Timer/Counter5 Interrupt Flag register
                                 .equ	TOV5	= 0	; Timer/Counter5 Overflow Flag
                                 .equ	OCF5A	= 1	; Output Compare Flag 5A
                                 .equ	OCF5B	= 2	; Output Compare Flag 5B
                                 .equ	OCF5C	= 3	; Output Compare Flag 5C
                                 .equ	ICF5	= 5	; Input Capture Flag 5
                                 
                                 ; TCCR5A - Timer/Counter5 Control Register A
                                 .equ	WGM50	= 0	; Waveform Generation Mode
                                 .equ	WGM51	= 1	; Waveform Generation Mode
                                 .equ	COM5C0	= 2	; Compare Output Mode 5C, bit 0
                                 .equ	COM5C1	= 3	; Compare Output Mode 5C, bit 1
                                 .equ	COM5B0	= 4	; Compare Output Mode 5B, bit 0
                                 .equ	COM5B1	= 5	; Compare Output Mode 5B, bit 1
                                 .equ	COM5A0	= 6	; Compare Output Mode 5A, bit 0
                                 .equ	COM5A1	= 7	; Compare Output Mode 1A, bit 1
                                 
                                 ; TCCR5B - Timer/Counter5 Control Register B
                                 .equ	CS50	= 0	; Prescaler source of Timer/Counter 5
                                 .equ	CS51	= 1	; Prescaler source of Timer/Counter 5
                                 .equ	CS52	= 2	; Prescaler source of Timer/Counter 5
                                 .equ	WGM52	= 3	; Waveform Generation Mode
                                 .equ	WGM53	= 4	; Waveform Generation Mode
                                 .equ	ICES5	= 6	; Input Capture 5 Edge Select
                                 .equ	ICNC5	= 7	; Input Capture 5 Noise Canceler
                                 
                                 ; TCCR5C - Timer/Counter 5 Control Register C
                                 .equ	FOC5C	= 5	; Force Output Compare 5C
                                 .equ	FOC5B	= 6	; Force Output Compare 5B
                                 .equ	FOC5A	= 7	; Force Output Compare 5A
                                 
                                 ; ICR5H - Timer/Counter5 Input Capture Register High Byte
                                 .equ	ICR5H0	= 0	; Timer/Counter5 Input Capture Register High Byte bit 0
                                 .equ	ICR5H1	= 1	; Timer/Counter5 Input Capture Register High Byte bit 1
                                 .equ	ICR5H2	= 2	; Timer/Counter5 Input Capture Register High Byte bit 2
                                 .equ	ICR5H3	= 3	; Timer/Counter5 Input Capture Register High Byte bit 3
                                 .equ	ICR5H4	= 4	; Timer/Counter5 Input Capture Register High Byte bit 4
                                 .equ	ICR5H5	= 5	; Timer/Counter5 Input Capture Register High Byte bit 5
                                 .equ	ICR5H6	= 6	; Timer/Counter5 Input Capture Register High Byte bit 6
                                 .equ	ICR5H7	= 7	; Timer/Counter5 Input Capture Register High Byte bit 7
                                 
                                 ; ICR5L - Timer/Counter5 Input Capture Register Low Byte
                                 .equ	ICR5L0	= 0	; Timer/Counter5 Input Capture Register Low Byte bit 0
                                 .equ	ICR5L1	= 1	; Timer/Counter5 Input Capture Register Low Byte bit 1
                                 .equ	ICR5L2	= 2	; Timer/Counter5 Input Capture Register Low Byte bit 2
                                 .equ	ICR5L3	= 3	; Timer/Counter5 Input Capture Register Low Byte bit 3
                                 .equ	ICR5L4	= 4	; Timer/Counter5 Input Capture Register Low Byte bit 4
                                 .equ	ICR5L5	= 5	; Timer/Counter5 Input Capture Register Low Byte bit 5
                                 .equ	ICR5L6	= 6	; Timer/Counter5 Input Capture Register Low Byte bit 6
                                 .equ	ICR5L7	= 7	; Timer/Counter5 Input Capture Register Low Byte bit 7
                                 
                                 
                                 ; ***** TIMER_COUNTER_4 **************
                                 ; TIMSK4 - Timer/Counter4 Interrupt Mask Register
                                 .equ	TOIE4	= 0	; Timer/Counter4 Overflow Interrupt Enable
                                 .equ	OCIE4A	= 1	; Timer/Counter4 Output Compare A Match Interrupt Enable
                                 .equ	OCIE4B	= 2	; Timer/Counter4 Output Compare B Match Interrupt Enable
                                 .equ	OCIE4C	= 3	; Timer/Counter4 Output Compare C Match Interrupt Enable
                                 .equ	ICIE4	= 5	; Timer/Counter4 Input Capture Interrupt Enable
                                 
                                 ; TIFR4 - Timer/Counter4 Interrupt Flag register
                                 .equ	TOV4	= 0	; Timer/Counter4 Overflow Flag
                                 .equ	OCF4A	= 1	; Output Compare Flag 4A
                                 .equ	OCF4B	= 2	; Output Compare Flag 4B
                                 .equ	OCF4C	= 3	; Output Compare Flag 4C
                                 .equ	ICF4	= 5	; Input Capture Flag 4
                                 
                                 ; TCCR4A - Timer/Counter4 Control Register A
                                 .equ	WGM40	= 0	; Waveform Generation Mode
                                 .equ	WGM41	= 1	; Waveform Generation Mode
                                 .equ	COM4C0	= 2	; Compare Output Mode 4C, bit 0
                                 .equ	COM4C1	= 3	; Compare Output Mode 4C, bit 1
                                 .equ	COM4B0	= 4	; Compare Output Mode 4B, bit 0
                                 .equ	COM4B1	= 5	; Compare Output Mode 4B, bit 1
                                 .equ	COM4A0	= 6	; Compare Output Mode 4A, bit 0
                                 .equ	COM4A1	= 7	; Compare Output Mode 1A, bit 1
                                 
                                 ; TCCR4B - Timer/Counter4 Control Register B
                                 .equ	CS40	= 0	; Prescaler source of Timer/Counter 4
                                 .equ	CS41	= 1	; Prescaler source of Timer/Counter 4
                                 .equ	CS42	= 2	; Prescaler source of Timer/Counter 4
                                 .equ	WGM42	= 3	; Waveform Generation Mode
                                 .equ	WGM43	= 4	; Waveform Generation Mode
                                 .equ	ICES4	= 6	; Input Capture 4 Edge Select
                                 .equ	ICNC4	= 7	; Input Capture 4 Noise Canceler
                                 
                                 ; TCCR4C - Timer/Counter 4 Control Register C
                                 .equ	FOC4C	= 5	; Force Output Compare 4C
                                 .equ	FOC4B	= 6	; Force Output Compare 4B
                                 .equ	FOC4A	= 7	; Force Output Compare 4A
                                 
                                 
                                 ; ***** TIMER_COUNTER_3 **************
                                 ; TIMSK3 - Timer/Counter3 Interrupt Mask Register
                                 .equ	TOIE3	= 0	; Timer/Counter3 Overflow Interrupt Enable
                                 .equ	OCIE3A	= 1	; Timer/Counter3 Output Compare A Match Interrupt Enable
                                 .equ	OCIE3B	= 2	; Timer/Counter3 Output Compare B Match Interrupt Enable
                                 .equ	OCIE3C	= 3	; Timer/Counter3 Output Compare C Match Interrupt Enable
                                 .equ	ICIE3	= 5	; Timer/Counter3 Input Capture Interrupt Enable
                                 
                                 ; TIFR3 - Timer/Counter3 Interrupt Flag register
                                 .equ	TOV3	= 0	; Timer/Counter3 Overflow Flag
                                 .equ	OCF3A	= 1	; Output Compare Flag 3A
                                 .equ	OCF3B	= 2	; Output Compare Flag 3B
                                 .equ	OCF3C	= 3	; Output Compare Flag 3C
                                 .equ	ICF3	= 5	; Input Capture Flag 3
                                 
                                 ; TCCR3A - Timer/Counter3 Control Register A
                                 .equ	WGM30	= 0	; Waveform Generation Mode
                                 .equ	WGM31	= 1	; Waveform Generation Mode
                                 .equ	COM3C0	= 2	; Compare Output Mode 3C, bit 0
                                 .equ	COM3C1	= 3	; Compare Output Mode 3C, bit 1
                                 .equ	COM3B0	= 4	; Compare Output Mode 3B, bit 0
                                 .equ	COM3B1	= 5	; Compare Output Mode 3B, bit 1
                                 .equ	COM3A0	= 6	; Compare Output Mode 3A, bit 0
                                 .equ	COM3A1	= 7	; Compare Output Mode 1A, bit 1
                                 
                                 ; TCCR3B - Timer/Counter3 Control Register B
                                 .equ	CS30	= 0	; Prescaler source of Timer/Counter 3
                                 .equ	CS31	= 1	; Prescaler source of Timer/Counter 3
                                 .equ	CS32	= 2	; Prescaler source of Timer/Counter 3
                                 .equ	WGM32	= 3	; Waveform Generation Mode
                                 .equ	WGM33	= 4	; Waveform Generation Mode
                                 .equ	ICES3	= 6	; Input Capture 3 Edge Select
                                 .equ	ICNC3	= 7	; Input Capture 3 Noise Canceler
                                 
                                 ; TCCR3C - Timer/Counter 3 Control Register C
                                 .equ	FOC3C	= 5	; Force Output Compare 3C
                                 .equ	FOC3B	= 6	; Force Output Compare 3B
                                 .equ	FOC3A	= 7	; Force Output Compare 3A
                                 
                                 
                                 ; ***** TIMER_COUNTER_1 **************
                                 ; TIMSK1 - Timer/Counter1 Interrupt Mask Register
                                 .equ	TOIE1	= 0	; Timer/Counter1 Overflow Interrupt Enable
                                 .equ	OCIE1A	= 1	; Timer/Counter1 Output Compare A Match Interrupt Enable
                                 .equ	OCIE1B	= 2	; Timer/Counter1 Output Compare B Match Interrupt Enable
                                 .equ	OCIE1C	= 3	; Timer/Counter1 Output Compare C Match Interrupt Enable
                                 .equ	ICIE1	= 5	; Timer/Counter1 Input Capture Interrupt Enable
                                 
                                 ; TIFR1 - Timer/Counter1 Interrupt Flag register
                                 .equ	TOV1	= 0	; Timer/Counter1 Overflow Flag
                                 .equ	OCF1A	= 1	; Output Compare Flag 1A
                                 .equ	OCF1B	= 2	; Output Compare Flag 1B
                                 .equ	OCF1C	= 3	; Output Compare Flag 1C
                                 .equ	ICF1	= 5	; Input Capture Flag 1
                                 
                                 ; TCCR1A - Timer/Counter1 Control Register A
                                 .equ	WGM10	= 0	; Waveform Generation Mode
                                 .equ	WGM11	= 1	; Waveform Generation Mode
                                 .equ	COM1C0	= 2	; Compare Output Mode 1C, bit 0
                                 .equ	COM1C1	= 3	; Compare Output Mode 1C, bit 1
                                 .equ	COM1B0	= 4	; Compare Output Mode 1B, bit 0
                                 .equ	COM1B1	= 5	; Compare Output Mode 1B, bit 1
                                 .equ	COM1A0	= 6	; Compare Output Mode 1A, bit 0
                                 .equ	COM1A1	= 7	; Compare Output Mode 1A, bit 1
                                 
                                 ; TCCR1B - Timer/Counter1 Control Register B
                                 .equ	CS10	= 0	; Prescaler source of Timer/Counter 1
                                 .equ	CS11	= 1	; Prescaler source of Timer/Counter 1
                                 .equ	CS12	= 2	; Prescaler source of Timer/Counter 1
                                 .equ	WGM12	= 3	; Waveform Generation Mode
                                 .equ	WGM13	= 4	; Waveform Generation Mode
                                 .equ	ICES1	= 6	; Input Capture 1 Edge Select
                                 .equ	ICNC1	= 7	; Input Capture 1 Noise Canceler
                                 
                                 ; TCCR1C - Timer/Counter 1 Control Register C
                                 .equ	FOC1C	= 5	; Force Output Compare 1C
                                 .equ	FOC1B	= 6	; Force Output Compare 1B
                                 .equ	FOC1A	= 7	; Force Output Compare 1A
                                 
                                 
                                 ; ***** JTAG *************************
                                 ; OCDR - On-Chip Debug Related Register in I/O Memory
                                 .equ	OCDR0	= 0	; On-Chip Debug Register Bit 0
                                 .equ	OCDR1	= 1	; On-Chip Debug Register Bit 1
                                 .equ	OCDR2	= 2	; On-Chip Debug Register Bit 2
                                 .equ	OCDR3	= 3	; On-Chip Debug Register Bit 3
                                 .equ	OCDR4	= 4	; On-Chip Debug Register Bit 4
                                 .equ	OCDR5	= 5	; On-Chip Debug Register Bit 5
                                 .equ	OCDR6	= 6	; On-Chip Debug Register Bit 6
                                 .equ	OCDR7	= 7	; On-Chip Debug Register Bit 7
                                 .equ	IDRD	= OCDR7	; For compatibility
                                 
                                 ; MCUCR - MCU Control Register
                                 .equ	JTD	= 7	; JTAG Interface Disable
                                 
                                 ; MCUSR - MCU Status Register
                                 .equ	JTRF	= 4	; JTAG Reset Flag
                                 
                                 
                                 ; ***** EXTERNAL_INTERRUPT ***********
                                 ; EICRA - External Interrupt Control Register A
                                 .equ	ISC00	= 0	; External Interrupt Sense Control Bit
                                 .equ	ISC01	= 1	; External Interrupt Sense Control Bit
                                 .equ	ISC10	= 2	; External Interrupt Sense Control Bit
                                 .equ	ISC11	= 3	; External Interrupt Sense Control Bit
                                 .equ	ISC20	= 4	; External Interrupt Sense Control Bit
                                 .equ	ISC21	= 5	; External Interrupt Sense Control Bit
                                 .equ	ISC30	= 6	; External Interrupt Sense Control Bit
                                 .equ	ISC31	= 7	; External Interrupt Sense Control Bit
                                 
                                 ; EICRB - External Interrupt Control Register B
                                 .equ	ISC40	= 0	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC41	= 1	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC50	= 2	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC51	= 3	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC60	= 4	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC61	= 5	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC70	= 6	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC71	= 7	; External Interrupt 7-4 Sense Control Bit
                                 
                                 ; EIMSK - External Interrupt Mask Register
                                 .equ	INT0	= 0	; External Interrupt Request 0 Enable
                                 .equ	INT1	= 1	; External Interrupt Request 1 Enable
                                 .equ	INT2	= 2	; External Interrupt Request 2 Enable
                                 .equ	INT3	= 3	; External Interrupt Request 3 Enable
                                 .equ	INT4	= 4	; External Interrupt Request 4 Enable
                                 .equ	INT5	= 5	; External Interrupt Request 5 Enable
                                 .equ	INT6	= 6	; External Interrupt Request 6 Enable
                                 .equ	INT7	= 7	; External Interrupt Request 7 Enable
                                 
                                 ; EIFR - External Interrupt Flag Register
                                 .equ	INTF0	= 0	; External Interrupt Flag 0
                                 .equ	INTF1	= 1	; External Interrupt Flag 1
                                 .equ	INTF2	= 2	; External Interrupt Flag 2
                                 .equ	INTF3	= 3	; External Interrupt Flag 3
                                 .equ	INTF4	= 4	; External Interrupt Flag 4
                                 .equ	INTF5	= 5	; External Interrupt Flag 5
                                 .equ	INTF6	= 6	; External Interrupt Flag 6
                                 .equ	INTF7	= 7	; External Interrupt Flag 7
                                 
                                 ; PCICR - Pin Change Interrupt Control Register
                                 .equ	PCIE0	= 0	; Pin Change Interrupt Enable 0
                                 .equ	PCIE1	= 1	; Pin Change Interrupt Enable 1
                                 .equ	PCIE2	= 2	; Pin Change Interrupt Enable 2
                                 
                                 ; PCIFR - Pin Change Interrupt Flag Register
                                 .equ	PCIF0	= 0	; Pin Change Interrupt Flag 0
                                 .equ	PCIF1	= 1	; Pin Change Interrupt Flag 1
                                 .equ	PCIF2	= 2	; Pin Change Interrupt Flag 2
                                 
                                 ; PCMSK2 - Pin Change Mask Register 2
                                 .equ	PCINT16	= 0	; Pin Change Enable Mask 16
                                 .equ	PCINT17	= 1	; Pin Change Enable Mask 17
                                 .equ	PCINT18	= 2	; Pin Change Enable Mask 18
                                 .equ	PCINT19	= 3	; Pin Change Enable Mask 19
                                 .equ	PCINT20	= 4	; Pin Change Enable Mask 20
                                 .equ	PCINT21	= 5	; Pin Change Enable Mask 21
                                 .equ	PCINT22	= 6	; Pin Change Enable Mask 22
                                 .equ	PCINT23	= 7	; Pin Change Enable Mask 23
                                 
                                 ; PCMSK1 - Pin Change Mask Register 1
                                 .equ	PCINT8	= 0	; Pin Change Enable Mask 8
                                 .equ	PCINT9	= 1	; Pin Change Enable Mask 9
                                 .equ	PCINT10	= 2	; Pin Change Enable Mask 10
                                 .equ	PCINT11	= 3	; Pin Change Enable Mask 11
                                 .equ	PCINT12	= 4	; Pin Change Enable Mask 12
                                 .equ	PCINT13	= 5	; Pin Change Enable Mask 13
                                 .equ	PCINT14	= 6	; Pin Change Enable Mask 14
                                 .equ	PCINT15	= 7	; Pin Change Enable Mask 15
                                 
                                 ; PCMSK0 - Pin Change Mask Register 0
                                 .equ	PCINT0	= 0	; Pin Change Enable Mask 0
                                 .equ	PCINT1	= 1	; Pin Change Enable Mask 1
                                 .equ	PCINT2	= 2	; Pin Change Enable Mask 2
                                 .equ	PCINT3	= 3	; Pin Change Enable Mask 3
                                 .equ	PCINT4	= 4	; Pin Change Enable Mask 4
                                 .equ	PCINT5	= 5	; Pin Change Enable Mask 5
                                 .equ	PCINT6	= 6	; Pin Change Enable Mask 6
                                 .equ	PCINT7	= 7	; Pin Change Enable Mask 7
                                 
                                 
                                 ; ***** CPU **************************
                                 ; SREG - Status Register
                                 .equ	SREG_C	= 0	; Carry Flag
                                 .equ	SREG_Z	= 1	; Zero Flag
                                 .equ	SREG_N	= 2	; Negative Flag
                                 .equ	SREG_V	= 3	; Two's Complement Overflow Flag
                                 .equ	SREG_S	= 4	; Sign Bit
                                 .equ	SREG_H	= 5	; Half Carry Flag
                                 .equ	SREG_T	= 6	; Bit Copy Storage
                                 .equ	SREG_I	= 7	; Global Interrupt Enable
                                 
                                 ; MCUCR - MCU Control Register
                                 .equ	IVCE	= 0	; Interrupt Vector Change Enable
                                 .equ	IVSEL	= 1	; Interrupt Vector Select
                                 .equ	PUD	= 4	; Pull-up disable
                                 ;.equ	JTD	= 7	; JTAG Interface Disable
                                 
                                 ; MCUSR - MCU Status Register
                                 .equ	PORF	= 0	; Power-on reset flag
                                 .equ	EXTRF	= 1	; External Reset Flag
                                 .equ	BORF	= 2	; Brown-out Reset Flag
                                 .equ	WDRF	= 3	; Watchdog Reset Flag
                                 ;.equ	JTRF	= 4	; JTAG Reset Flag
                                 
                                 ; XMCRA - External Memory Control Register A
                                 .equ	SRW00	= 0	; Wait state select bit lower page
                                 .equ	SRW01	= 1	; Wait state select bit lower page
                                 .equ	SRW10	= 2	; Wait state select bit upper page
                                 .equ	SRW11	= 3	; Wait state select bit upper page
                                 .equ	SRL0	= 4	; Wait state page limit
                                 .equ	SRL1	= 5	; Wait state page limit
                                 .equ	SRL2	= 6	; Wait state page limit
                                 .equ	SRE	= 7	; External SRAM Enable
                                 
                                 ; XMCRB - External Memory Control Register B
                                 .equ	XMM0	= 0	; External Memory High Mask
                                 .equ	XMM1	= 1	; External Memory High Mask
                                 .equ	XMM2	= 2	; External Memory High Mask
                                 .equ	XMBK	= 7	; External Memory Bus Keeper Enable
                                 
                                 ; OSCCAL - Oscillator Calibration Value
                                 .equ	CAL0	= 0	; Oscillator Calibration Value Bit0
                                 .equ	CAL1	= 1	; Oscillator Calibration Value Bit1
                                 .equ	CAL2	= 2	; Oscillator Calibration Value Bit2
                                 .equ	CAL3	= 3	; Oscillator Calibration Value Bit3
                                 .equ	CAL4	= 4	; Oscillator Calibration Value Bit4
                                 .equ	CAL5	= 5	; Oscillator Calibration Value Bit5
                                 .equ	CAL6	= 6	; Oscillator Calibration Value Bit6
                                 .equ	CAL7	= 7	; Oscillator Calibration Value Bit7
                                 
                                 ; CLKPR - 
                                 .equ	CLKPS0	= 0	; 
                                 .equ	CLKPS1	= 1	; 
                                 .equ	CLKPS2	= 2	; 
                                 .equ	CLKPS3	= 3	; 
                                 .equ	CLKPCE	= 7	; 
                                 
                                 ; SMCR - Sleep Mode Control Register
                                 .equ	SE	= 0	; Sleep Enable
                                 .equ	SM0	= 1	; Sleep Mode Select bit 0
                                 .equ	SM1	= 2	; Sleep Mode Select bit 1
                                 .equ	SM2	= 3	; Sleep Mode Select bit 2
                                 
                                 ; RAMPZ - RAM Page Z Select Register
                                 .equ	RAMPZ0	= 0	; RAM Page Z Select Register Bit 0
                                 .equ	RAMPZ1	= 1	; RAM Page Z Select Register Bit 1
                                 
                                 ; EIND - Extended Indirect Register
                                 .equ	EIND0	= 0	; Bit 0
                                 
                                 ; GPIOR2 - General Purpose IO Register 2
                                 .equ	GPIOR20	= 0	; General Purpose IO Register 2 bit 0
                                 .equ	GPIOR21	= 1	; General Purpose IO Register 2 bit 1
                                 .equ	GPIOR22	= 2	; General Purpose IO Register 2 bit 2
                                 .equ	GPIOR23	= 3	; General Purpose IO Register 2 bit 3
                                 .equ	GPIOR24	= 4	; General Purpose IO Register 2 bit 4
                                 .equ	GPIOR25	= 5	; General Purpose IO Register 2 bit 5
                                 .equ	GPIOR26	= 6	; General Purpose IO Register 2 bit 6
                                 .equ	GPIOR27	= 7	; General Purpose IO Register 2 bit 7
                                 
                                 ; GPIOR1 - General Purpose IO Register 1
                                 .equ	GPIOR10	= 0	; General Purpose IO Register 1 bit 0
                                 .equ	GPIOR11	= 1	; General Purpose IO Register 1 bit 1
                                 .equ	GPIOR12	= 2	; General Purpose IO Register 1 bit 2
                                 .equ	GPIOR13	= 3	; General Purpose IO Register 1 bit 3
                                 .equ	GPIOR14	= 4	; General Purpose IO Register 1 bit 4
                                 .equ	GPIOR15	= 5	; General Purpose IO Register 1 bit 5
                                 .equ	GPIOR16	= 6	; General Purpose IO Register 1 bit 6
                                 .equ	GPIOR17	= 7	; General Purpose IO Register 1 bit 7
                                 
                                 ; GPIOR0 - General Purpose IO Register 0
                                 .equ	GPIOR00	= 0	; General Purpose IO Register 0 bit 0
                                 .equ	GPIOR01	= 1	; General Purpose IO Register 0 bit 1
                                 .equ	GPIOR02	= 2	; General Purpose IO Register 0 bit 2
                                 .equ	GPIOR03	= 3	; General Purpose IO Register 0 bit 3
                                 .equ	GPIOR04	= 4	; General Purpose IO Register 0 bit 4
                                 .equ	GPIOR05	= 5	; General Purpose IO Register 0 bit 5
                                 .equ	GPIOR06	= 6	; General Purpose IO Register 0 bit 6
                                 .equ	GPIOR07	= 7	; General Purpose IO Register 0 bit 7
                                 
                                 ; PRR1 - Power Reduction Register1
                                 .equ	PRUSART1	= 0	; Power Reduction USART1
                                 .equ	PRUSART2	= 1	; Power Reduction USART2
                                 .equ	PRUSART3	= 2	; Power Reduction USART3
                                 .equ	PRTIM3	= 3	; Power Reduction Timer/Counter3
                                 .equ	PRTIM4	= 4	; Power Reduction Timer/Counter4
                                 .equ	PRTIM5	= 5	; Power Reduction Timer/Counter5
                                 
                                 ; PRR0 - Power Reduction Register0
                                 .equ	PRADC	= 0	; Power Reduction ADC
                                 .equ	PRUSART0	= 1	; Power Reduction USART
                                 .equ	PRSPI	= 2	; Power Reduction Serial Peripheral Interface
                                 .equ	PRTIM1	= 3	; Power Reduction Timer/Counter1
                                 .equ	PRTIM0	= 5	; Power Reduction Timer/Counter0
                                 .equ	PRTIM2	= 6	; Power Reduction Timer/Counter2
                                 .equ	PRTWI	= 7	; Power Reduction TWI
                                 
                                 
                                 ; ***** AD_CONVERTER *****************
                                 ; ADMUX - The ADC multiplexer Selection Register
                                 .equ	MUX0	= 0	; Analog Channel and Gain Selection Bits
                                 .equ	MUX1	= 1	; Analog Channel and Gain Selection Bits
                                 .equ	MUX2	= 2	; Analog Channel and Gain Selection Bits
                                 .equ	MUX3	= 3	; Analog Channel and Gain Selection Bits
                                 .equ	MUX4	= 4	; Analog Channel and Gain Selection Bits
                                 .equ	ADLAR	= 5	; Left Adjust Result
                                 .equ	REFS0	= 6	; Reference Selection Bit 0
                                 .equ	REFS1	= 7	; Reference Selection Bit 1
                                 
                                 ; ADCSRA - The ADC Control and Status register A
                                 .equ	ADPS0	= 0	; ADC  Prescaler Select Bits
                                 .equ	ADPS1	= 1	; ADC  Prescaler Select Bits
                                 .equ	ADPS2	= 2	; ADC  Prescaler Select Bits
                                 .equ	ADIE	= 3	; ADC Interrupt Enable
                                 .equ	ADIF	= 4	; ADC Interrupt Flag
                                 .equ	ADATE	= 5	; ADC  Auto Trigger Enable
                                 .equ	ADSC	= 6	; ADC Start Conversion
                                 .equ	ADEN	= 7	; ADC Enable
                                 
                                 ; ADCSRB - The ADC Control and Status register B
                                 .equ	ADTS0	= 0	; ADC Auto Trigger Source bit 0
                                 .equ	ADTS1	= 1	; ADC Auto Trigger Source bit 1
                                 .equ	ADTS2	= 2	; ADC Auto Trigger Source bit 2
                                 .equ	MUX5	= 3	; Analog Channel and Gain Selection Bits
                                 ;.equ	ACME	= 6	; 
                                 
                                 ; ADCH - ADC Data Register High Byte
                                 .equ	ADCH0	= 0	; ADC Data Register High Byte Bit 0
                                 .equ	ADCH1	= 1	; ADC Data Register High Byte Bit 1
                                 .equ	ADCH2	= 2	; ADC Data Register High Byte Bit 2
                                 .equ	ADCH3	= 3	; ADC Data Register High Byte Bit 3
                                 .equ	ADCH4	= 4	; ADC Data Register High Byte Bit 4
                                 .equ	ADCH5	= 5	; ADC Data Register High Byte Bit 5
                                 .equ	ADCH6	= 6	; ADC Data Register High Byte Bit 6
                                 .equ	ADCH7	= 7	; ADC Data Register High Byte Bit 7
                                 
                                 ; ADCL - ADC Data Register Low Byte
                                 .equ	ADCL0	= 0	; ADC Data Register Low Byte Bit 0
                                 .equ	ADCL1	= 1	; ADC Data Register Low Byte Bit 1
                                 .equ	ADCL2	= 2	; ADC Data Register Low Byte Bit 2
                                 .equ	ADCL3	= 3	; ADC Data Register Low Byte Bit 3
                                 .equ	ADCL4	= 4	; ADC Data Register Low Byte Bit 4
                                 .equ	ADCL5	= 5	; ADC Data Register Low Byte Bit 5
                                 .equ	ADCL6	= 6	; ADC Data Register Low Byte Bit 6
                                 .equ	ADCL7	= 7	; ADC Data Register Low Byte Bit 7
                                 
                                 ; DIDR0 - Digital Input Disable Register
                                 .equ	ADC0D	= 0	; 
                                 .equ	ADC1D	= 1	; 
                                 .equ	ADC2D	= 2	; 
                                 .equ	ADC3D	= 3	; 
                                 .equ	ADC4D	= 4	; 
                                 .equ	ADC5D	= 5	; 
                                 .equ	ADC6D	= 6	; 
                                 .equ	ADC7D	= 7	; 
                                 
                                 ; DIDR2 - Digital Input Disable Register
                                 .equ	ADC8D	= 0	; 
                                 .equ	ADC9D	= 1	; 
                                 .equ	ADC10D	= 2	; 
                                 .equ	ADC11D	= 3	; 
                                 .equ	ADC12D	= 4	; 
                                 .equ	ADC13D	= 5	; 
                                 .equ	ADC14D	= 6	; 
                                 .equ	ADC15D	= 7	; 
                                 
                                 
                                 ; ***** BOOT_LOAD ********************
                                 ; SPMCSR - Store Program Memory Control Register
                                 .equ	SPMEN	= 0	; Store Program Memory Enable
                                 .equ	PGERS	= 1	; Page Erase
                                 .equ	PGWRT	= 2	; Page Write
                                 .equ	BLBSET	= 3	; Boot Lock Bit Set
                                 .equ	RWWSRE	= 4	; Read While Write section read enable
                                 .equ	SIGRD	= 5	; Signature Row Read
                                 .equ	RWWSB	= 6	; Read While Write Section Busy
                                 .equ	SPMIE	= 7	; SPM Interrupt Enable
                                 
                                 
                                 ; ***** USART2 ***********************
                                 ; UDR2 - USART I/O Data Register
                                 .equ	UDR2_0	= 0	; USART I/O Data Register bit 0
                                 .equ	UDR2_1	= 1	; USART I/O Data Register bit 1
                                 .equ	UDR2_2	= 2	; USART I/O Data Register bit 2
                                 .equ	UDR2_3	= 3	; USART I/O Data Register bit 3
                                 .equ	UDR2_4	= 4	; USART I/O Data Register bit 4
                                 .equ	UDR2_5	= 5	; USART I/O Data Register bit 5
                                 .equ	UDR2_6	= 6	; USART I/O Data Register bit 6
                                 .equ	UDR2_7	= 7	; USART I/O Data Register bit 7
                                 
                                 ; UCSR2A - USART Control and Status Register A
                                 .equ	MPCM2	= 0	; Multi-processor Communication Mode
                                 .equ	U2X2	= 1	; Double the USART transmission speed
                                 .equ	UPE2	= 2	; Parity Error
                                 .equ	DOR2	= 3	; Data overRun
                                 .equ	FE2	= 4	; Framing Error
                                 .equ	UDRE2	= 5	; USART Data Register Empty
                                 .equ	TXC2	= 6	; USART Transmitt Complete
                                 .equ	RXC2	= 7	; USART Receive Complete
                                 
                                 ; UCSR2B - USART Control and Status Register B
                                 .equ	TXB82	= 0	; Transmit Data Bit 8
                                 .equ	RXB82	= 1	; Receive Data Bit 8
                                 .equ	UCSZ22	= 2	; Character Size
                                 .equ	TXEN2	= 3	; Transmitter Enable
                                 .equ	RXEN2	= 4	; Receiver Enable
                                 .equ	UDRIE2	= 5	; USART Data register Empty Interrupt Enable
                                 .equ	TXCIE2	= 6	; TX Complete Interrupt Enable
                                 .equ	RXCIE2	= 7	; RX Complete Interrupt Enable
                                 
                                 ; UCSR2C - USART Control and Status Register C
                                 .equ	UCPOL2	= 0	; Clock Polarity
                                 .equ	UCSZ20	= 1	; Character Size
                                 .equ	UCSZ21	= 2	; Character Size
                                 .equ	USBS2	= 3	; Stop Bit Select
                                 .equ	UPM20	= 4	; Parity Mode Bit 0
                                 .equ	UPM21	= 5	; Parity Mode Bit 1
                                 .equ	UMSEL20	= 6	; USART Mode Select
                                 .equ	UMSEL21	= 7	; USART Mode Select
                                 
                                 ; UBRR2H - USART Baud Rate Register High Byte
                                 ;.equ	UBRR8	= 0	; USART Baud Rate Register bit 8
                                 ;.equ	UBRR9	= 1	; USART Baud Rate Register bit 9
                                 ;.equ	UBRR10	= 2	; USART Baud Rate Register bit 10
                                 ;.equ	UBRR11	= 3	; USART Baud Rate Register bit 11
                                 
                                 ; UBRR2L - USART Baud Rate Register Low Byte
                                 .equ	UBRR0	= 0	; USART Baud Rate Register bit 0
                                 .equ	UBRR1	= 1	; USART Baud Rate Register bit 1
                                 ;.equ	UBRR2	= 2	; USART Baud Rate Register bit 2
                                 ;.equ	UBRR3	= 3	; USART Baud Rate Register bit 3
                                 ;.equ	UBRR4	= 4	; USART Baud Rate Register bit 4
                                 ;.equ	UBRR5	= 5	; USART Baud Rate Register bit 5
                                 ;.equ	UBRR6	= 6	; USART Baud Rate Register bit 6
                                 ;.equ	UBRR7	= 7	; USART Baud Rate Register bit 7
                                 
                                 
                                 ; ***** USART3 ***********************
                                 ; UDR3 - USART I/O Data Register
                                 .equ	UDR3_0	= 0	; USART I/O Data Register bit 0
                                 .equ	UDR3_1	= 1	; USART I/O Data Register bit 1
                                 .equ	UDR3_2	= 2	; USART I/O Data Register bit 2
                                 .equ	UDR3_3	= 3	; USART I/O Data Register bit 3
                                 .equ	UDR3_4	= 4	; USART I/O Data Register bit 4
                                 .equ	UDR3_5	= 5	; USART I/O Data Register bit 5
                                 .equ	UDR3_6	= 6	; USART I/O Data Register bit 6
                                 .equ	UDR3_7	= 7	; USART I/O Data Register bit 7
                                 
                                 ; UCSR3A - USART Control and Status Register A
                                 .equ	MPCM3	= 0	; Multi-processor Communication Mode
                                 .equ	U2X3	= 1	; Double the USART transmission speed
                                 .equ	UPE3	= 2	; Parity Error
                                 .equ	DOR3	= 3	; Data overRun
                                 .equ	FE3	= 4	; Framing Error
                                 .equ	UDRE3	= 5	; USART Data Register Empty
                                 .equ	TXC3	= 6	; USART Transmitt Complete
                                 .equ	RXC3	= 7	; USART Receive Complete
                                 
                                 ; UCSR3B - USART Control and Status Register B
                                 .equ	TXB83	= 0	; Transmit Data Bit 8
                                 .equ	RXB83	= 1	; Receive Data Bit 8
                                 .equ	UCSZ32	= 2	; Character Size
                                 .equ	TXEN3	= 3	; Transmitter Enable
                                 .equ	RXEN3	= 4	; Receiver Enable
                                 .equ	UDRIE3	= 5	; USART Data register Empty Interrupt Enable
                                 .equ	TXCIE3	= 6	; TX Complete Interrupt Enable
                                 .equ	RXCIE3	= 7	; RX Complete Interrupt Enable
                                 
                                 ; UCSR3C - USART Control and Status Register C
                                 .equ	UCPOL3	= 0	; Clock Polarity
                                 .equ	UCSZ30	= 1	; Character Size
                                 .equ	UCSZ31	= 2	; Character Size
                                 .equ	USBS3	= 3	; Stop Bit Select
                                 .equ	UPM30	= 4	; Parity Mode Bit 0
                                 .equ	UPM31	= 5	; Parity Mode Bit 1
                                 .equ	UMSEL30	= 6	; USART Mode Select
                                 .equ	UMSEL31	= 7	; USART Mode Select
                                 
                                 ; UBRR3H - USART Baud Rate Register High Byte
                                 ;.equ	UBRR8	= 0	; USART Baud Rate Register bit 8
                                 ;.equ	UBRR9	= 1	; USART Baud Rate Register bit 9
                                 ;.equ	UBRR10	= 2	; USART Baud Rate Register bit 10
                                 ;.equ	UBRR11	= 3	; USART Baud Rate Register bit 11
                                 
                                 ; UBRR3L - USART Baud Rate Register Low Byte
                                 ;.equ	UBRR0	= 0	; USART Baud Rate Register bit 0
                                 ;.equ	UBRR1	= 1	; USART Baud Rate Register bit 1
                                 ;.equ	UBRR2	= 2	; USART Baud Rate Register bit 2
                                 ;.equ	UBRR3	= 3	; USART Baud Rate Register bit 3
                                 ;.equ	UBRR4	= 4	; USART Baud Rate Register bit 4
                                 ;.equ	UBRR5	= 5	; USART Baud Rate Register bit 5
                                 ;.equ	UBRR6	= 6	; USART Baud Rate Register bit 6
                                 ;.equ	UBRR7	= 7	; USART Baud Rate Register bit 7
                                 
                                 
                                 
                                 ; ***** LOCKSBITS ********************************************************
                                 .equ	LB1	= 0	; Lock bit
                                 .equ	LB2	= 1	; Lock bit
                                 .equ	BLB01	= 2	; Boot Lock bit
                                 .equ	BLB02	= 3	; Boot Lock bit
                                 .equ	BLB11	= 4	; Boot lock bit
                                 .equ	BLB12	= 5	; Boot lock bit
                                 
                                 
                                 ; ***** FUSES ************************************************************
                                 ; LOW fuse bits
                                 .equ	CKSEL0	= 0	; Select Clock Source
                                 .equ	CKSEL1	= 1	; Select Clock Source
                                 .equ	CKSEL2	= 2	; Select Clock Source
                                 .equ	CKSEL3	= 3	; Select Clock Source
                                 .equ	SUT0	= 4	; Select start-up time
                                 .equ	SUT1	= 5	; Select start-up time
                                 .equ	CKOUT	= 6	; Clock output
                                 .equ	CKDIV8	= 7	; Divide clock by 8
                                 
                                 ; HIGH fuse bits
                                 .equ	BOOTRST	= 0	; Select Reset Vector
                                 .equ	BOOTSZ0	= 1	; Select Boot Size
                                 .equ	BOOTSZ1	= 2	; Select Boot Size
                                 .equ	EESAVE	= 3	; EEPROM memory is preserved through chip erase
                                 .equ	WDTON	= 4	; Watchdog timer always on
                                 .equ	SPIEN	= 5	; Enable Serial programming and Data Downloading
                                 .equ	JTAGEN	= 6	; Enable JTAG
                                 .equ	OCDEN	= 7	; Enable OCD
                                 
                                 ; EXTENDED fuse bits
                                 .equ	BODLEVEL0	= 0	; Brown-out Detector trigger level
                                 .equ	BODLEVEL1	= 1	; Brown-out Detector trigger level
                                 .equ	BODLEVEL2	= 2	; Brown-out Detector trigger level
                                 
                                 
                                 
                                 ; ***** CPU REGISTER DEFINITIONS *****************************************
                                 .def	XH	= r27
                                 .def	XL	= r26
                                 .def	YH	= r29
                                 .def	YL	= r28
                                 .def	ZH	= r31
                                 .def	ZL	= r30
                                 
                                 
                                 
                                 ; ***** DATA MEMORY DECLARATIONS *****************************************
                                 .equ	FLASHEND	= 0x1ffff	; Note: Word address
                                 .equ	IOEND	= 0x01ff
                                 .equ	SRAM_START	= 0x0200
                                 .equ	SRAM_SIZE	= 8192
                                 .equ	RAMEND	= 0x21ff
                                 .equ	XRAMEND	= 0xffff
                                 .equ	E2END	= 0x0fff
                                 .equ	EEPROMEND	= 0x0fff
                                 .equ	EEADRBITS	= 12
                                 #pragma AVRPART MEMORY PROG_FLASH 262144
                                 #pragma AVRPART MEMORY EEPROM 4096
                                 #pragma AVRPART MEMORY INT_SRAM SIZE 8192
                                 #pragma AVRPART MEMORY INT_SRAM START_ADDR 0x200
                                 
                                 
                                 
                                 ; ***** BOOTLOADER DECLARATIONS ******************************************
                                 .equ	NRWW_START_ADDR	= 0x1f000
                                 .equ	NRWW_STOP_ADDR	= 0x1ffff
                                 .equ	RWW_START_ADDR	= 0x0
                                 .equ	RWW_STOP_ADDR	= 0x1efff
                                 .equ	PAGESIZE	= 128
                                 .equ	FIRSTBOOTSTART	= 0x1fe00
                                 .equ	SECONDBOOTSTART	= 0x1fc00
                                 .equ	THIRDBOOTSTART	= 0x1f800
                                 .equ	FOURTHBOOTSTART	= 0x1f000
                                 .equ	SMALLBOOTSTART	= FIRSTBOOTSTART
                                 .equ	LARGEBOOTSTART	= FOURTHBOOTSTART
                                 
                                 
                                 
                                 ; ***** INTERRUPT VECTORS ************************************************
                                 .equ	INT0addr	= 0x0002	; External Interrupt Request 0
                                 .equ	INT1addr	= 0x0004	; External Interrupt Request 1
                                 .equ	INT2addr	= 0x0006	; External Interrupt Request 2
                                 .equ	INT3addr	= 0x0008	; External Interrupt Request 3
                                 .equ	INT4addr	= 0x000a	; External Interrupt Request 4
                                 .equ	INT5addr	= 0x000c	; External Interrupt Request 5
                                 .equ	INT6addr	= 0x000e	; External Interrupt Request 6
                                 .equ	INT7addr	= 0x0010	; External Interrupt Request 7
                                 .equ	PCI0addr	= 0x0012	; Pin Change Interrupt Request 0
                                 .equ	PCI1addr	= 0x0014	; Pin Change Interrupt Request 1
                                 .equ	PCI2addr	= 0x0016	; Pin Change Interrupt Request 2
                                 .equ	WDTaddr	= 0x0018	; Watchdog Time-out Interrupt
                                 .equ	OC2Aaddr	= 0x001a	; Timer/Counter2 Compare Match A
                                 .equ	OC2Baddr	= 0x001c	; Timer/Counter2 Compare Match B
                                 .equ	OVF2addr	= 0x001e	; Timer/Counter2 Overflow
                                 .equ	ICP1addr	= 0x0020	; Timer/Counter1 Capture Event
                                 .equ	OC1Aaddr	= 0x0022	; Timer/Counter1 Compare Match A
                                 .equ	OC1Baddr	= 0x0024	; Timer/Counter1 Compare Match B
                                 .equ	OC1Caddr	= 0x0026	; Timer/Counter1 Compare Match C
                                 .equ	OVF1addr	= 0x0028	; Timer/Counter1 Overflow
                                 .equ	OC0Aaddr	= 0x002a	; Timer/Counter0 Compare Match A
                                 .equ	OC0Baddr	= 0x002c	; Timer/Counter0 Compare Match B
                                 .equ	OVF0addr	= 0x002e	; Timer/Counter0 Overflow
                                 .equ	SPIaddr	= 0x0030	; SPI Serial Transfer Complete
                                 .equ	URXC0addr	= 0x0032	; USART0, Rx Complete
                                 .equ	UDRE0addr	= 0x0034	; USART0 Data register Empty
                                 .equ	UTXC0addr	= 0x0036	; USART0, Tx Complete
                                 .equ	ACIaddr	= 0x0038	; Analog Comparator
                                 .equ	ADCCaddr	= 0x003a	; ADC Conversion Complete
                                 .equ	ERDYaddr	= 0x003c	; EEPROM Ready
                                 .equ	ICP3addr	= 0x003e	; Timer/Counter3 Capture Event
                                 .equ	OC3Aaddr	= 0x0040	; Timer/Counter3 Compare Match A
                                 .equ	OC3Baddr	= 0x0042	; Timer/Counter3 Compare Match B
                                 .equ	OC3Caddr	= 0x0044	; Timer/Counter3 Compare Match C
                                 .equ	OVF3addr	= 0x0046	; Timer/Counter3 Overflow
                                 .equ	URXC1addr	= 0x0048	; USART1, Rx Complete
                                 .equ	UDRE1addr	= 0x004a	; USART1 Data register Empty
                                 .equ	UTXC1addr	= 0x004c	; USART1, Tx Complete
                                 .equ	TWIaddr	= 0x004e	; 2-wire Serial Interface
                                 .equ	SPMRaddr	= 0x0050	; Store Program Memory Read
                                 .equ	ICP4addr	= 0x0052	; Timer/Counter4 Capture Event
                                 .equ	OC4Aaddr	= 0x0054	; Timer/Counter4 Compare Match A
                                 .equ	OC4Baddr	= 0x0056	; Timer/Counter4 Compare Match B
                                 .equ	OC4Caddr	= 0x0058	; Timer/Counter4 Compare Match C
                                 .equ	OVF4addr	= 0x005a	; Timer/Counter4 Overflow
                                 .equ	ICP5addr	= 0x005c	; Timer/Counter5 Capture Event
                                 .equ	OC5Aaddr	= 0x005e	; Timer/Counter5 Compare Match A
                                 .equ	OC5Baddr	= 0x0060	; Timer/Counter5 Compare Match B
                                 .equ	OC5Caddr	= 0x0062	; Timer/Counter5 Compare Match C
                                 .equ	OVF5addr	= 0x0064	; Timer/Counter5 Overflow
                                 .equ	URXC2addr	= 0x0066	; USART2, Rx Complete
                                 .equ	UDRE2addr	= 0x0068	; USART2 Data register Empty
                                 .equ	UTXC2addr	= 0x006a	; USART2, Tx Complete
                                 .equ	URXC3addr	= 0x006c	; USART3, Rx Complete
                                 .equ	UDRE3addr	= 0x006e	; USART3 Data register Empty
                                 .equ	UTXC3addr	= 0x0070	; USART3, Tx Complete
                                 
                                 .equ	INT_VECTORS_SIZE	= 114	; size in words
                                 
                                 #endif  /* _M2560DEF_INC_ */
                                 
                                 ; ***** END OF FILE ******************************************************
                                 
                                 ; project.asm
                                 ;
                                 ; Created: 20/05/2017 07:48:47
                                 ; Author : Edward & Gary 
                                 ;
                                 
                                 .include "m2560def.inc"
                                 
                                 ;***** Created: 2011-02-09 12:03 ******* Source: ATmega2560.xml **********
                                 ;*************************************************************************
                                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                                 ;* 
                                 ;* Number            : AVR000
                                 ;* File Name         : "m2560def.inc"
                                 ;* Title             : Register/Bit Definitions for the ATmega2560
                                 ;* Date              : 2011-02-09
                                 ;* Version           : 2.35
                                 ;* Support E-mail    : avr@atmel.com
                                 ;* Target MCU        : ATmega2560
                                 ;* 
                                 ;* DESCRIPTION
                                 ;* When including this file in the assembly program file, all I/O register 
                                 ;* names and I/O register bit names appearing in the data book can be used.
                                 ;* In addition, the six registers forming the three data pointers X, Y and 
                                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                                 ;* SRAM is also defined 
                                 ;* 
                                 ;* The Register names are represented by their hexadecimal address.
                                 ;* 
                                 ;* The Register Bit names are represented by their bit number (0-7).
                                 ;* 
                                 ;* Please observe the difference in using the bit names with instructions
                                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                                 ;* (skip if bit in register set/cleared). The following example illustrates
                                 ;* this:
                                 ;* 
                                 ;* in    r16,PORTB             ;read PORTB latch
                                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                                 ;* out   PORTB,r16             ;output to PORTB
                                 ;* 
                                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                                 ;* rjmp  TOV0_is_set           ;jump if set
                                 ;* ...                         ;otherwise do something else
                                 ;*************************************************************************
                                 
                                 #ifndef _M2560DEF_INC_
                                 #endif  /* _M2560DEF_INC_ */
                                 
                                 ; ***** END OF FILE ******************************************************
                                 
                                 .def temp = r16
                                 .def temp1 = r17
                                 .def temp2 = r18
                                 .def digit = r19
                                 .def counter = r20
                                 .def lcd = r21
                                 .def waitingFlag = r22
                                 .def debounceFlag = r23
                                 .def col = r24
                                 .def row = r25
                                 .def cmask = r26
                                 .def rmask = r27
                                 .equ ODDEVENMASK = 0x01
                                 .equ PORTLDIR = 0xF0        ; PH7-4: output, PH3-0, input
                                 .equ INITCOLMASK = 0xEF     ; scan from the rightmost column,
                                 .equ INITROWMASK = 0x01     ; scan from the top row
                                 .equ ROWMASK = 0x0F         ; for obtaining input from Port L
                                 .equ LCD_RS = 7
                                 .equ LCD_E = 6
                                 .equ LCD_RW = 5
                                 .equ LCD_BE = 4
                                 
                                 .macro do_lcd_command
                                 	ldi lcd, @0
                                 	rcall lcd_command
                                 	rcall lcd_wait
                                 .endmacro
                                 .macro do_lcd_data
                                 	ldi lcd, @0
                                 	rcall lcd_data
                                 	rcall lcd_wait
                                 .endmacro
                                 .macro do_lcd_rdata
                                 	mov lcd, @0
                                 	subi lcd, -'0'
                                 	rcall lcd_data
                                 	rcall lcd_wait
                                 .endmacro
                                 .macro lcd_set
                                 	sbi PORTA, @0
                                 .endmacro
                                 .macro lcd_clr
                                 	cbi PORTA, @0
                                 .endmacro
                                 .macro clear
                                 	ldi YL, low(@0)		; load the memory address to Y
                                 	ldi YH, high(@0)
                                 	clr temp
                                 	st Y+, temp			; clear the two bytes at @0 in SRAM
                                 	st Y, temp
                                 .endmacro
                                 .macro defitem
                                 	.db @0, @1
                                 	.set T = PC
                                 .endmacro
                                 
                                 .dseg
000200                           OC: .byte 2						; One Second Counter   
000202                           HC:	.byte 2						; Half Second Counter
000204                           DC: .byte 2						; Debounce Counter
000206                           TC: .byte 2						; Thousand Counter
000208                           TF: .byte 1						; Twist Flag
000209                           RC: .byte 1						; Return Coin
00020a                           NP: .byte 1						; Number Pressed
00020b                           RF: .byte 1
00020c                           RCPATTERN: .byte 1
00020d                           PR: .byte 1						; Price
00020e                           QN: .byte 1						; Qantity
00020f                           QUANTITY: .byte 18
                                 
                                 .cseg
                                 .org 0x0000
000000 940c 0045                 	jmp RESET
                                 
                                 .org INT0addr
000002 940c 01ff                    jmp PB0_Interrupt
                                 
                                 .org INT1addr
000004 940c 020e                    jmp PB1_Interrupt
                                 
                                 .org OVF0addr
00002e 940c 011c                 	jmp Timer0OVF ; Jump to the interrupt handler for
                                 					; Timer0 overflow
                                 .org ADCCaddr
00003a 940c 021e                 	jmp POT_Interrupt
                                 
00003c 0501                      defitem 1,  5  ;9  coin  quantity
00003d 0302                      defitem 2,  3  ;8
00003e 0001                      defitem 1,  0  ;7
00003f ff02                      defitem 2,  255  ;6
000040 0201                      defitem	1,  2  ;5
000041 0902                      defitem 2,  9  ;4
000042 0401                      defitem 1, 4  ;3
000043 0307                      defitem 7,  3  ;2
000044 0001                      defitem 1,  0  ;1
                                 
                                 
                                 RESET:
000045 efcf                      	ldi YL, low(RAMEND)
000046 e2d1                      	ldi YH, high(RAMEND)
000047 bfde                      	out SPH, YH
000048 bfcd                      	out SPL, YL				;reset SP
                                 	
                                 	;initilize LED
000049 ef0f                          ser temp
00004a b907                      	out DDRC, temp			;Set port C to output
00004b 2700                      	clr temp
00004c b908                      	out PORTC, temp			;pass the lower pattern to portC
                                 	
                                 	;initialize timer counter
00004d e0c4
00004e e0d2
00004f 2700
000050 9309
000051 8308                      	clear DC
000052 e0c0
000053 e0d2
000054 2700
000055 9309
000056 8308                      	clear OC
000057 e0c2
000058 e0d2
000059 2700
00005a 9309
00005b 8308                      	clear HC
00005c e0c6
00005d e0d2
00005e 2700
00005f 9309
000060 8308                      	clear TC
                                 
                                 	;initialize motor
000061 e100                      	ldi temp,(1<<PE4)
000062 b90d                      	out DDRE, temp
                                 
                                 	;initialize PB0 & PB1 button
000063 2700                      	clr temp
000064 e001                      	ldi temp, (1<<PB0)
000065 b904                      	out DDRB, temp	
000066 b905                      	out PORTB, temp			;Set pott B to input
                                 
                                 
                                 
                                 	;initialize LCD
000067 ef0f                      	ser temp
000068 bb00                      	out DDRF, temp
000069 b901                      	out DDRA, temp
00006a 2700                      	clr temp
00006b bb01                      	out PORTF, temp
00006c b902                      	out PORTA, temp
                                 
                                 	; keypad setup
00006d ef10                          ldi temp1, PORTLDIR     ; PB7:4/PB3:0, out/in
00006e 9310 010a                     sts DDRL, temp1         ; PORTB is input
                                 
000070 e358
000071 d450
000072 d45f                      	do_lcd_command 0b00111000 ; 2x5x7
000073 d478                      	rcall sleep_5ms
000074 e358
000075 d44c
000076 d45b                      	do_lcd_command 0b00111000 ; 2x5x7
000077 d46b                      	rcall sleep_1ms
000078 e358
000079 d448
00007a d457                      	do_lcd_command 0b00111000 ; 2x5x7
00007b e358
00007c d445
00007d d454                      	do_lcd_command 0b00111000 ; 2x5x7
00007e e058
00007f d442
000080 d451                      	do_lcd_command 0b00001000 ; display off?
000081 e051
000082 d43f
000083 d44e                      	do_lcd_command 0b00000001 ; clear display
000084 e056
000085 d43c
000086 d44b                      	do_lcd_command 0b00000110 ; increment, no display shift
000087 e05c
000088 d439
000089 d448                      	do_lcd_command 0b00001100 ; Cursor on, bar, no blink
                                 
00008a e352
00008b d43d
00008c d445                      	do_lcd_data '2'
00008d e351
00008e d43a
00008f d442                      	do_lcd_data '1'
000090 e352
000091 d437
000092 d43f                      	do_lcd_data '2'
000093 e351
000094 d434
000095 d43c                      	do_lcd_data '1'
000096 e250
000097 d431
000098 d439                      	do_lcd_data ' '
000099 e351
00009a d42e
00009b d436                      	do_lcd_data '1'
00009c e357
00009d d42b
00009e d433                      	do_lcd_data '7'
00009f e753
0000a0 d428
0000a1 d430                      	do_lcd_data 's'
0000a2 e351
0000a3 d425
0000a4 d42d                      	do_lcd_data '1'
0000a5 e250
0000a6 d422
0000a7 d42a                      	do_lcd_data ' '
0000a8 e250
0000a9 d41f
0000aa d427                      	do_lcd_data ' '
0000ab e250
0000ac d41c
0000ad d424                      	do_lcd_data ' '
0000ae e453
0000af d419
0000b0 d421                      	do_lcd_data 'C'
0000b1 e358
0000b2 d416
0000b3 d41e                      	do_lcd_data '8'
0000b4 ec50
0000b5 d40c
0000b6 d41b                      	do_lcd_command 0b11000000
0000b7 e556
0000b8 d410
0000b9 d418                      	do_lcd_data 'V'
0000ba e655
0000bb d40d
0000bc d415                      	do_lcd_data 'e'
0000bd e65e
0000be d40a
0000bf d412                      	do_lcd_data 'n'
0000c0 e654
0000c1 d407
0000c2 d40f                      	do_lcd_data 'd'
0000c3 e659
0000c4 d404
0000c5 d40c                      	do_lcd_data 'i'
0000c6 e65e
0000c7 d401
0000c8 d409                      	do_lcd_data 'n'
0000c9 e657
0000ca d3fe
0000cb d406                      	do_lcd_data 'g'
0000cc e250
0000cd d3fb
0000ce d403                      	do_lcd_data ' '
0000cf e45d
0000d0 d3f8
0000d1 d400                      	do_lcd_data 'M'
0000d2 e651
0000d3 d3f5
0000d4 d3fd                      	do_lcd_data 'a'
0000d5 e653
0000d6 d3f2
0000d7 d3fa                      	do_lcd_data 'c'
0000d8 e658
0000d9 d3ef
0000da d3f7                      	do_lcd_data 'h'
0000db e659
0000dc d3ec
0000dd d3f4                      	do_lcd_data 'i'
0000de e65e
0000df d3e9
0000e0 d3f1                      	do_lcd_data 'n'
0000e1 e655
0000e2 d3e6
0000e3 d3ee                      	do_lcd_data 'e'
                                 
0000e4 c1b1                      	rjmp main
                                 
                                 end:
0000e5 cfff                      	rjmp end
                                 
                                 ;*******************************************************************
                                 ;interruption stuff starts
                                 
                                 returning:
0000e6 9100 020b                 	lds temp, RF
0000e8 3000                      	cpi temp, 0		; if hasn't reached max, ignore the twist
0000e9 f461                      	brne clearRF
                                 
0000ea 9503                      	inc temp
0000eb 9300 020b                 	sts RF, temp
0000ed e100                      	ldi temp,(1<<PE4)			; start the motor
0000ee b90e                      	out PORTE, temp
                                 
                                 
0000ef 9100 020c                 	lds temp, RCPATTERN
0000f1 9506                      	lsr temp
0000f2 b908                      	out PORTC, temp
0000f3 9300 020c                 	sts RCPATTERN, temp
                                 
0000f5 c031                      	rjmp checkFlagSet
                                 
                                 clearRF:
0000f6 2700                      	clr temp
0000f7 9300 020b                 	sts RF, temp
                                 
0000f9 9100 0209                 	lds temp, RC
0000fb 950a                      	dec temp
0000fc 9300 0209                 	sts RC, temp
                                 
0000fe e000                      	ldi temp,(0<<PE4)			; stop the motor
0000ff b90e                      	out PORTE, temp
000100 c026                      	rjmp checkFlagSet
                                 
                                 notThousand: 		; Store the new value of the debounce counter.
000101 9380 0206                 	sts TC, r24
000103 9390 0207                 	sts TC+1, r25
000105 c021                      	rjmp checkFlagSet
                                 
                                 returnCoin:
000106 3074                      	cpi debounceFlag, 4
000107 f1c9                      	breq jmpChangeScreen
000108 9180 0206                 	lds r24, TC
00010a 9190 0207                     lds r25, TC+1
00010c 9601                          adiw r25:r24, 1			; Increase the temporary counter by one.
                                 
00010d 3a81                          cpi r24, low(1953)		; disable keypad for 0.25s
00010e e007                          ldi temp, high(1953)	; DF=1
00010f 0709                          cpc temp, r25
000110 f781                          brne notThousand	; 100 milliseconds have not passed
000111 e0c6
000112 e0d2
000113 2700
000114 9309
000115 8308                      	clear TC
000116 cfcf                      	rjmp returning
                                 
                                 
                                 
                                 jmpReturnCoin:
000117 cfee                      	rjmp returnCoin
                                 
                                 jmpButtonDebounce:
000118 c07b                      	rjmp buttonDebounce
                                 
                                 jmpKeyDebounce:
000119 c061                      	rjmp keyDebounce
                                 
                                 jmpCheckHash:
00011a c09c                      	rjmp checkHash
                                 
                                 jmpHalfSecond:
00011b c07e                      	rjmp halfSecond
                                 
                                 Timer0OVF:
00011c 930f                      	push temp
00011d b70f                      	in temp, SREG
00011e 930f                      	push temp			; Prologue starts.
00011f 93df                      	push YH				; Save all conflict registers in the prologue.
000120 93cf                      	push YL
000121 939f                      	push r25
000122 938f                      	push r24
                                 
                                 checkReturn:
000123 9100 0209                 	lds temp, RC
000125 3000                      	cpi temp, 0
000126 f781                      	brne jmpreturnCoin
                                 
                                 checkFlagSet:
000127 3061                      	cpi waitingFlag, 1		; WF=1 starting screen
000128 f161                      	breq starting
000129 3062                      	cpi waitingFlag, 2		; out of stock screen: 1.turn the led on
00012a f369                      	breq jmpButtonDebounce
00012b 3063                      	cpi waitingFlag, 3		; inserting screen
00012c f369                      	breq jmpCheckHash			; waiting for potentiometer input and keep checking if there is a hash pressed
00012d 3064                      	cpi waitingFlag, 4		; delivering screen
00012e f361                      	breq jmpHalfSecond	
00012f 3065                      	cpi waitingFlag, 5		; admin screen
000130 f091                      	breq admin		
000131 3071                      	cpi debounceFlag, 1					; DF=1: normal waiting but keypad pressed
000132 f331                      	breq jmpKeyDebounce
000133 3075                      	cpi debounceFlag, 5					; DF=1: normal waiting but keypad pressed
000134 f111                      	breq oneSecond
                                 
000135 e0c4
000136 e0d2
000137 2700
000138 9309
000139 8308                      	clear DC
00013a e0c0
00013b e0d2
00013c 2700
00013d 9309
00013e 8308                      	clear OC
00013f 2744                      	clr counter
                                 
000140 c088                      	rjmp Endif
                                 
                                 jmpChangeScreen:
000141 940c 024b                 	jmp changeScreen
                                 
                                 admin:
000143 3074                      	cpi debounceFlag, 4					; DF=1: normal waiting but keypad pressed
000144 f3e1                      	breq jmpChangeScreen
000145 3071                      	cpi debounceFlag, 1					; DF=1: normal waiting but keypad pressed
000146 f291                      	breq jmpKeyDebounce
000147 9631                      	adiw r31:r30,1			; Everytime i increment DebounceCounter
000148 3ee8                      	cpi r30,low(1000)		; Check if the debounceCounter reaches ~80ms, we enables the flag
000149 e003                      	ldi temp,high(1000)
00014a 07f0                      	cpc r31,temp
00014b f441                      	brne jmpEndif
00014c e072                      	ldi DebounceFlag, 2		;enable button to interrpt the program
00014d 27ee                      	clr r30
00014e 27ff                      	clr r31
00014f e0c4
000150 e0d2
000151 2700
000152 9309
000153 8308                      	clear DC
                                 jmpEndif:
000154 c074                      	rjmp Endif
                                 ;////////////////////////////////////////////////////////////
                                 starting:
000155 3031                      	cpi digit, 1			; WF=1 starting screen can be interrupt by 
000156 f351                      	breq jmpChangeScreen	; pressing keypad
                                 oneSecond:
000157 9180 0200                 	lds r24, OC
000159 9190 0201                 	lds r25, OC+1 
00015b 9601                      	adiw r25:r24, 1
00015c 3884                      	cpi r24, low(7812)
00015d e10e                      	ldi temp, high(7812)
00015e 0790                      	cpc r25, temp
00015f f4a9                      	brne NotaSecond
000160 e0c0
000161 e0d2
000162 2700
000163 9309
000164 8308                      	clear OC
000165 3075                      	cpi debounceFlag, 5					; DF=1: normal waiting but keypad pressed
000166 f021                      	breq countFive
                                 
                                 countThree:
000167 9543                      	inc counter
000168 3043                      	cpi counter, 3
000169 f031                      	breq isThree
00016a c05e                      	rjmp Endif
                                 
                                 countFive:
00016b 2777                      	clr debounceFlag
00016c 9543                      	inc counter
00016d 3045                      	cpi counter, 5
00016e f019                      	breq isFive
00016f c059                      	rjmp Endif
                                 
                                 isThree:
000170 e071                      	ldi debounceFlag, 1				;incase button pressed
000171 c0d9                      	rjmp changeScreen
                                 
                                 isFive:
000172 e066                      	ldi waitingFlag, 6				; triggering to Admin mode
000173 2744                      	clr counter
000174 c054                      	rjmp Endif
                                 
                                 NotaSecond:
000175 9380 0200                 	sts OC, r24
000177 9390 0201                 	sts OC+1, r25
000179 2777                      	clr debounceFlag
00017a c04e                      	rjmp Endif
                                 
                                 ;//////////////////////////////////////////////////////////////////////
                                 ;######################################################################
                                 keyDebounce:
                                 	;out PORTC, debounceFlag
00017b 9180 0204                 	lds r24, DC
00017d 9190 0205                     lds r25, DC+1
00017f 9601                          adiw r25:r24, 1			; Increase the temporary counter by one.
                                 
000180 3d80                          cpi r24, low(2000)		; disable keypad for 50ms
000181 e007                          ldi temp, high(2000)	; DF=1
000182 0709                          cpc temp, r25
000183 f439                          brne notHundred			; 100 milliseconds have not passed
000184 e0c4
000185 e0d2
000186 2700
000187 9309
000188 8308                      	clear DC
000189 2777                      	clr debounceFlag		; renable keypad
00018a c03e                          rjmp EndIF
                                 
                                 notHundred: 		; Store the new value of the debounce counter.
00018b 9380 0204                 	sts DC, r24
00018d 9390 0205                 	sts DC+1, r25
00018f c039                      	rjmp Endif
                                 
                                 
                                 ;#####################################################################################
                                 ;$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
                                 
                                 turnOnLED:
000190 ef0f                      	ser temp
000191 b908                      	out PORTC, temp
000192 3064                      	cpi waitingFlag, 4
000193 f031                      	breq halfSecond
                                 
                                 buttonDebounce:
000194 9631                      	adiw r31:r30,1			; Everytime i increment DebounceCounter
000195 3fe4                      	cpi r30,low(500)		; Check if the debounceCounter reaches ~80ms, we enables the flag
000196 e001                      	ldi temp,high(500)
000197 07f0                      	cpc r31,temp
000198 f409                      	brne halfSecond
000199 e072                      	ldi DebounceFlag, 2		;enable button to interrpt the program
                                 halfSecond:
00019a 9180 0202                 	lds r24, HC
00019c 9190 0203                 	lds r25, HC+1 
00019e 9601                      	adiw r25:r24, 1
00019f 3482                      	cpi r24, low(3906)
0001a0 e00f                      	ldi temp, high(3906)
0001a1 0790                      	cpc r25, temp
0001a2 f479                      	brne NotaHalfSecond
0001a3 e0c2
0001a4 e0d2
0001a5 2700
0001a6 9309
0001a7 8308                      	clear HC
                                 
                                 flashLED:
0001a8 3045                      	cpi counter, 5
0001a9 f231                      	breq isThree
0001aa 9543                      	inc counter
0001ab 2f04                      	mov temp, counter
0001ac 7001                      	andi temp, ODDEVENMASK
0001ad 3000                      	cpi temp, 0			; odd
0001ae f309                      	breq turnOnLED		
0001af 2700                      	clr temp			; even
0001b0 b908                      	out PORTC, temp
0001b1 c017                      	rjmp Endif
                                 
                                 NotaHalfSecond:
0001b2 9380 0202                 	sts HC, r24
0001b4 9390 0203                 	sts HC+1, r25
0001b6 c012                      	rjmp Endif
                                 
                                 ;$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
                                 checkHash:
0001b7 3074                      	cpi debounceFlag, 4
0001b8 f079                      	breq goChangeScreen
0001b9 3073                      	cpi debounceFlag, 3					; twisted, waiting for main to clr debounce
0001ba f071                      	breq Endif
0001bb 2777                      	clr debounceFlag
0001bc 9631                      	adiw r31:r30, 1
0001bd 32ec                      	cpi r30, low(300)
0001be e001                      	ldi temp, high(300)
0001bf 07f0                      	cpc r31, temp
0001c0 f431                      	brne Not50ms
0001c1 ec0d                      	ldi temp, (1<<ADEN | 1<<ADSC | 1<<ADIE | 5<<ADPS0)	; Read the potentiometer
0001c2 9300 007a                 	sts ADCSRA, temp
0001c4 27ee                      	clr r30
0001c5 27ff                      	clr r31
0001c6 c002                      	rjmp Endif
                                 
                                 Not50ms:
0001c7 c001                      	rjmp Endif
                                 
                                 goChangeScreen:
0001c8 c082                      	rjmp changeScreen
                                 
                                 Endif:
0001c9 918f                      	pop	r24
0001ca 919f                      	pop	r25
0001cb 91cf                      	pop	YL
0001cc 91df                      	pop	YH
0001cd 910f                      	pop	temp
0001ce bf0f                      	out SREG, temp
0001cf 910f                      	pop temp
0001d0 9518                      	reti
                                 
                                 returni:
0001d1 910f                      	pop temp
0001d2 bf0f                      	out SREG, temp
0001d3 910f                      	pop temp
0001d4 9518                      	reti
                                 
                                 increaseInv:
0001d5 930f                      	push temp
0001d6 b70f                      	in temp, SREG
0001d7 930f                      	push temp
0001d8 9100 020e                 	lds temp, QN
0001da 3f0f                      	cpi temp, 255
0001db f3a9                      	breq returni
0001dc 93cf                      	push YL
0001dd 93df                      	push YH
0001de 9503                      	inc temp
0001df 9721                      	sbiw Y, 1
0001e0 8308                      	st Y, temp
0001e1 e078                      	ldi debounceFlag, 8
0001e2 27ee                      	clr r30
0001e3 27ff                      	clr r31
0001e4 91df                      	pop YH
0001e5 91cf                      	pop YL
0001e6 910f                      	pop temp
0001e7 bf0f                      	out SREG, temp
0001e8 910f                      	pop temp
0001e9 9518                      	reti
                                 
                                 decreaseInv:
0001ea 930f                      	push temp
0001eb b70f                      	in temp, SREG
0001ec 930f                      	push temp
0001ed 9100 020e                 	lds temp, QN
0001ef 3000                      	cpi temp, 0
0001f0 f301                      	breq returni
0001f1 93cf                      	push YL
0001f2 93df                      	push YH
0001f3 950a                      	dec temp
0001f4 9721                      	sbiw Y, 1
0001f5 8308                      	st Y, temp
0001f6 e078                      	ldi debounceFlag, 8
0001f7 27ee                      	clr r30
0001f8 27ff                      	clr r31
0001f9 91df                      	pop YH
0001fa 91cf                      	pop YL
0001fb 910f                      	pop temp
0001fc bf0f                      	out SREG, temp
0001fd 910f                      	pop temp
0001fe 9518                      	reti
                                 
                                 PB0_Interrupt:
0001ff 3072                      	cpi debounceFlag, 2				;if the buttons are still debouncing
000200 f4e1                      	brne return						;Do nothing
000201 3065                      	cpi waitingFlag, 5
000202 f291                      	breq increaseInv
000203 930f                      	push temp
000204 b70f                      	in temp, SREG
000205 930f                      	push temp
000206 27ee                      	clr r30
000207 27ff                      	clr r31
000208 2700                      	clr temp
000209 b908                      	out PORTC, temp
00020a 910f                      	pop temp
00020b bf0f                      	out SREG, temp
00020c 910f                      	pop temp
00020d c03d                      	rjmp changeScreen
                                 
                                 PB1_Interrupt:
00020e 3072                      	cpi debounceFlag, 2
00020f f469                      	brne return
000210 3065                      	cpi waitingFlag, 5
000211 f2c1                      	breq decreaseInv
000212 930f                      	push temp
000213 b70f                      	in temp, SREG
000214 930f                      	push temp
000215 27ee                      	clr r30
000216 27ff                      	clr r31
000217 2700                      	clr temp
000218 b908                      	out PORTC, temp
000219 910f                      	pop temp
00021a bf0f                      	out SREG, temp
00021b 910f                      	pop temp
00021c c02e                      	rjmp changeScreen
                                 
                                 return:
00021d 9518                      	reti
                                 
                                 POT_Interrupt:
00021e 3073                      	cpi debounceFlag, 3
00021f f3e9                      	breq return
000220 930f                      	push temp
000221 b70f                      	in temp, SREG
000222 930f                      	push temp
000223 939f                      	push r25
000224 938f                      	push r24
000225 9180 0078                 	lds r24, ADCL
000227 9190 0079                 	lds r25, ADCH
                                 	;out PORTC, r24		; for debug
000229 3080                      	cpi r24, 0
00022a e000                      	ldi temp, 0
00022b 0790                          cpc r25, temp
00022c f051                      	breq setPOTMinFlag
00022d 3f8f                      	cpi r24, 0xFF		; ADCL/H  is 10 bits reg
00022e e003                      	ldi temp, 3
00022f 0790                          cpc r25, temp
000230 f091                      	breq setPOTMaxFlag
                                 
                                 continue:
000231 918f                      	pop r24
000232 919f                      	pop r25
000233 910f                      	pop temp
000234 bf0f                      	out SREG, temp
000235 910f                      	pop temp
000236 9518                      	reti
                                 
                                 setPOTMinFlag:
000237 9100 0208                 	lds temp, TF
000239 3000                      	cpi temp, 0		; if hasn't reached max, ignore the twist
00023a f7b1                      	brne continue
00023b 9503                      	inc temp
00023c 9300 0208                 	sts TF, temp
00023e 9543                      	inc counter
                                 	;out PORTC, counter
00023f 3042                      	cpi counter, 2
000240 f781                      	brne continue
000241 e073                      	ldi debounceFlag, 3
000242 cfee                      	rjmp continue
                                 
                                 setPOTMaxFlag:
000243 9100 0208                 	lds temp, TF
000245 3001                      	cpi temp, 1
000246 f751                      	brne continue
000247 2700                      	clr temp
000248 9300 0208                 	sts TF, temp
                                 	;do_lcd_rdata debounceFlag
00024a cfe6                      	rjmp continue
                                 
                                 changeScreen:
00024b e051
00024c d275
00024d d284                      	do_lcd_command 0b00000001 ; clear display
00024e e553
00024f d279
000250 d281                      	do_lcd_data 'S'
000251 e655
000252 d276
000253 d27e                      	do_lcd_data 'e'
000254 e65c
000255 d273
000256 d27b                      	do_lcd_data 'l'
000257 e655
000258 d270
000259 d278                      	do_lcd_data 'e'
00025a e653
00025b d26d
00025c d275                      	do_lcd_data 'c'
00025d e754
00025e d26a
00025f d272                      	do_lcd_data 't'
000260 e250
000261 d267
000262 d26f                      	do_lcd_data ' '
000263 e659
000264 d264
000265 d26c                      	do_lcd_data 'i'
000266 e754
000267 d261
000268 d269                      	do_lcd_data 't'
000269 e655
00026a d25e
00026b d266                      	do_lcd_data 'e'
00026c e65d
00026d d25b
00026e d263                      	do_lcd_data 'm'
00026f ec50
000270 d251
000271 d260                      	do_lcd_command 0b11000000	; break to the next line
000272 d279                      	rcall sleep_5ms
                                 
000273 e000                      	ldi temp,(0<<PE4)			; start the motor
000274 b90e                      	out PORTE, temp
                                 
                                 	; Any time counting should be cleared
000275 e0c0
000276 e0d2
000277 2700
000278 9309
000279 8308                      	clear OC
00027a e0c2
00027b e0d2
00027c 2700
00027d 9309
00027e 8308                      	clear HC
00027f e0c4
000280 e0d2
000281 2700
000282 9309
000283 8308                      	clear DC
000284 2744                      	clr counter
                                 
000285 2766                      	clr waitingFlag				; Back to normal mode
000286 3071                      	cpi debounceFlag, 1			; Any key pressed
000287 f069                      	breq keepDebounce			; disable keypad input for more 50 ms 
000288 3072                      	cpi debounceFlag, 2			; button interrupted
000289 f049                      	breq returnClear			; clear debounceFlag
00028a 3074                      	cpi debounceFlag, 4			; button interrupted
00028b f011                      	breq retCoin			; clear debounceFlag
00028c 2777                      	clr debounceFlag
00028d cf3b                      	rjmp Endif
                                 retCoin:
00028e e071                      	ldi debounceFlag, 1
00028f 2700                      	clr temp
000290 9300 020b                 	sts RF, temp
000292 cee8                      	rjmp keyDebounce
                                 
                                 returnClear:					; return button interrupt
000293 2777                      	clr debounceFlag
000294 9518                      	reti
                                 
                                 keepDebounce:					; disable keypad input for more 50 ms
000295 cee5                      	rjmp keyDebounce			; debounceFlag will be reset in 50ms
                                 
                                 ;interruption stuff ends
                                 ;*****************************************************************************
                                 
                                 
                                 main:
                                 	; Button PB0 & PB1 initialization
000296 e00a                      	ldi temp, (1<<ISC01 | 1<<ISC11)	;set failing edge for INT0 and INT1
000297 9300 0069                 	sts EICRA, temp
000299 b30d                      	in temp, EIMSK					
00029a 6003                      	ori temp, (1<<INT0 | 1<<INT1)	;Enable INT0/1
00029b bb0d                      	out EIMSK, temp
                                 
                                 	; Potentiometer initialization
00029c ec00                      	ldi temp, (3<<REFS0 | 0<<ADLAR | 0<<MUX0)	;
00029d 9300 007c                 	sts ADMUX, temp
00029f e008                      	ldi temp, (1<<MUX5)	;
0002a0 9300 007b                 	sts ADCSRB, temp
                                 
                                 	; general initialization
0002a2 2744                      	clr counter
0002a3 2777                      	clr debounceFlag
                                 	
                                 	;set timer interrupt
0002a4 2700                      	clr temp
0002a5 bd04                      	out TCCR0A, temp
0002a6 e002                      	ldi temp, (1<<CS01)
0002a7 bd05                      	out TCCR0B, temp		; Prescaling value=8
0002a8 e001                      	ldi temp, 1<<TOIE0		; Enable timeroverflow flag
0002a9 9300 006e                 	sts TIMSK0, temp
0002ab 9478                      	sei						; Enable global interrupt*/
                                 
                                 	;initialize Z
0002ac e0f0                      	ldi ZH, high(T << 1)
0002ad e8ea                      	ldi ZL, low(T << 1)
0002ae 9731                      	sbiw Z, 1
0002af e0d2                      	ldi YH, high(QUANTITY)
0002b0 e0cf                      	ldi YL, low(QUANTITY)
0002b1 934f                      	push counter
                                 initQuantity:
                                 	;initialize the quantity
0002b2 9104                      	lpm temp,Z
                                 	;subi temp, 48
0002b3 9731                      	sbiw Z, 1
0002b4 9543                      	inc counter
0002b5 9309                      	st Y+,temp
0002b6 3142                      	cpi counter, 18
0002b7 f7d1                      	brne initQuantity
0002b8 27ee                      	clr r30
0002b9 27ff                      	clr r31
0002ba 914f                      	pop counter
                                 
0002bb e061                      	ldi waitingFlag, 1	;initialize the waiting from starting screen
                                 
                                 initKeypadClear:
0002bc 2733                      	clr digit
                                 initKeypad:
                                 	;out PORTC, counter
                                 	; waitingFlag check
0002bd 3062                      	cpi waitingFlag, 2		; WF=2 DF=1 out of stock screen
0002be f3f1                      	breq initKeypad
0002bf 3066                      	cpi waitingFlag, 6		; WF=0 DF=6 enter Admin mode
0002c0 f1a1                      	breq goInitAdmin
                                 	; debounce check
0002c1 3071                      	cpi debounceFlag, 1		; WF=0 DF=1 key pressed
0002c2 f3d1                      	breq initKeypad
0002c3 3073                      	cpi debounceFlag, 3		; WF=3 DF=3 insertion finished
0002c4 f179                      	breq goPOT
                                 	
0002c5 3078                      	cpi debounceFlag, 8		; WF=5 DF=8 refresh admin screen
0002c6 f179                      	breq goAdmin
                                 
0002c7 eeaf                          ldi cmask, INITCOLMASK  ; initial column mask
0002c8 2788                          clr col                 ; initial column
0002c9 2700                      	clr temp
0002ca 2711                      	clr temp1
0002cb 2722                      	clr temp2
                                 
                                 colloop:
0002cc 3084                          cpi col, 4
0002cd f371                          breq initKeypadClear               ; If all keys are scanned, repeat.
0002ce 93a0 010b                     sts PORTL, cmask        ; Otherwise, scan a column.
                                   
0002d0 ef1f                          ldi temp1, 0xFF         ; Slow down the scan operation.
                                 
                                 delay:
0002d1 951a                          dec temp1
0002d2 f7f1                          brne delay              ; until temp1 is zero? - delay
                                 
0002d3 9110 0109                     lds temp1, PINL          ; Read PORTL
0002d5 701f                          andi temp1, ROWMASK     ; Get the keypad output value
0002d6 301f                          cpi temp1, 0xF          ; Check if any row is low
0002d7 f059                          breq nextcol            ; if not - switch to next column
                                 
                                                             ; If yes, find which row is low
0002d8 e0b1                          ldi rmask, INITROWMASK  ; initialize for row check
0002d9 2799                          clr row
                                 
                                 ; and going into the row loop
                                 rowloop:
0002da 3094                          cpi row, 4              ; is row already 4?
0002db f039                          breq nextcol            ; the row scan is over - next column
0002dc 2f21                          mov temp2, temp1
0002dd 232b                          and temp2, rmask        ; check un-masked bit
0002de f041                          breq convert            ; if bit is clear, the key is pressed
0002df 9593                          inc row                 ; else move to the next row
0002e0 0fbb                          lsl rmask
0002e1 940c 02da                     jmp rowloop
                                     
                                 nextcol:                    ; if row scan is over
0002e3 0faa                           lsl cmask
0002e4 9583                           inc col                ; increase col value
0002e5 940c 02cc                      jmp colloop            ; go to the next column
                                      
                                 convert:
0002e7 3031                      	cpi digit, 1			; button has not been released yet
0002e8 f2a1                      	breq initKeypad			; don't use it, scan again
                                 
0002e9 3083                          cpi col, 3              ; If the pressed key is in col 3
0002ea f061                          breq letters           ; we have letter
                                                             ; If the key is not in col 3 and
0002eb 3093                          cpi row, 3              ; if the key is in row 3,
0002ec f189                          breq symbols            ; we have a symbol or 0
0002ed 2f19                          mov temp1, row          ; otherwise we have a number 1-9
0002ee 0f11                          lsl temp1
0002ef 0f19                          add temp1, row
0002f0 0f18                          add temp1, col          ; temp1 = row*3 + col
0002f1 5f1f                      	subi temp1, -1
0002f2 940c 0347                     jmp convert_end
                                 
                                 goPOT:
0002f4 c118                      	rjmp POT
                                 goInitAdmin:
0002f5 c05a                      	rjmp initAdmin
                                 goAdmin:
0002f6 c05f                      	rjmp adminMode
                                     
                                 letters:
0002f7 e031                      	ldi digit, 1
0002f8 3065                      	cpi waitingFlag, 5
0002f9 f019                      	breq letterAdmin
0002fa e071                      	ldi debounceFlag, 1
0002fb 940c 02bd                     jmp initKeypad
                                 
                                 letterAdmin:
0002fd 3090                      	cpi row, 0
0002fe f039                      	breq A
0002ff 3091                      	cpi row, 1
000300 f061                      	breq B
000301 3092                      	cpi row, 2
000302 f089                      	breq C
                                 
                                 nothing:
000303 e071                      	ldi debounceFlag, 1
000304 940c 02bd                     jmp initKeypad
                                 
                                 A:
000306 9120 020d                 	lds temp2, PR
000308 3023                      	cpi temp2, 3
000309 f3c9                      	breq nothing
00030a 9523                      	inc temp2
00030b 8328                      	st Y, temp2
00030c c049                      	rjmp adminMode
                                 
                                 B:
00030d 9120 020d                 	lds temp2, PR
00030f 3020                      	cpi temp2, 0
000310 f391                      	breq nothing
000311 952a                      	dec temp2
000312 8328                      	st Y, temp2
000313 c042                      	rjmp adminMode
                                 C:
000314 930f                      	push temp
000315 93cf                      	push YL
000316 93df                      	push YH
000317 9721                      	sbiw Y, 1
000318 2700                      	clr temp
000319 8308                      	st Y, temp
00031a 91df                      	pop YH
00031b 91cf                      	pop YL
00031c 910f                      	pop temp
00031d c038                      	rjmp adminMode
                                 
                                 symbols:
00031e 3080                          cpi col, 0              ; Check if we have a star
00031f f0d1                          breq star
000320 3081                          cpi col, 1              ; or if we have zero
000321 f109                          breq zero
000322 3063                      	cpi waitingFlag, 3		; # is pressed inserting screen
000323 f031                      	breq abort
000324 3065                      	cpi waitingFlag, 5		; admin screen
000325 f091                      	breq abortAdmin
000326 e031                      	ldi digit, 1
000327 e071                      	ldi debounceFlag, 1		; 
000328 940c 02bd                     jmp initKeypad
                                 
                                 abort:
00032a 91cf                      	pop YL
00032b 91df                      	pop YH
00032c 914f                      	pop counter							; coin inserted
00032d 912f                      	pop temp2							; coin left
00032e 911f                      	pop temp1
00032f 910f                      	pop temp							; count left
                                 	;out PORTC, counter
000330 9340 0209                 	sts RC, counter
000332 9310 020c                 	sts RCPATTERN, temp1
000334 2744                      	clr counter
000335 e074                      	ldi debounceFlag, 4					; # pressed when it's inserting WF=3
000336 940c 02bd                 	jmp initKeypad
                                 
                                 abortAdmin:
000338 e074                      	ldi debounceFlag, 4			; #is pressed when it's in admin mode WF=5
000339 cf83                      	rjmp initKeypad
                                 
                                 star:
00033a 3060                      	cpi waitingFlag, 0
00033b f021                      	breq goingAdmin
00033c e031                      	ldi digit, 1
00033d e071                      	ldi debounceFlag, 1
00033e 940c 02bd                     jmp initKeypad
                                 
                                 goingAdmin:
000340 e075                      	ldi debounceFlag, 5				; * has been pressed
000341 940c 02bd                 	jmp initKeypad
                                 
                                 zero:
000343 e031                      	ldi digit, 1
000344 e071                      	ldi debounceFlag, 1
000345 940c 02bd                 	jmp initKeypad			; no need for that
                                 
                                 convert_end:
000347 9310 020a                 	sts NP, temp1
000349 3065                      	cpi waitingFlag, 5
00034a f059                      	breq adminMode
00034b e031                      	ldi digit, 1
00034c e071                      	ldi debounceFlag, 1					; disable keypad
00034d 3060                      	cpi waitingFlag, 0
00034e f1a1                      	breq findItem
                                 	
00034f cf6d                          rjmp initKeypad         			; restart the main loop
                                 
                                 initAdmin:
000350 e065                      	ldi waitingFlag, 5
000351 27ee                      	clr r30								; for button debounce
000352 27ff                      	clr r31
000353 e011                      	ldi temp1, 1
000354 9310 020a                 	sts NP, temp1
                                 adminMode:
000356 9110 020a                 	lds temp1, NP
000358 e051
000359 d168
00035a d177                      	do_lcd_command 0b00000001 ; clear display
                                 
00035b e451
00035c d16c
00035d d174                      	do_lcd_data 'A'
00035e e654
00035f d169
000360 d171                      	do_lcd_data 'd'
000361 e65d
000362 d166
000363 d16e                      	do_lcd_data 'm'
000364 e659
000365 d163
000366 d16b                      	do_lcd_data 'i'
000367 e65e
000368 d160
000369 d168                      	do_lcd_data 'n'
00036a e250
00036b d15d
00036c d165                      	do_lcd_data ' '
00036d e65d
00036e d15a
00036f d162                      	do_lcd_data 'm'
000370 e65f
000371 d157
000372 d15f                      	do_lcd_data 'o'
000373 e654
000374 d154
000375 d15c                      	do_lcd_data 'd'
000376 e655
000377 d151
000378 d159                      	do_lcd_data 'e'
000379 e250
00037a d14e
00037b d156                      	do_lcd_data ' '
00037c 2f51
00037d 5d50
00037e d14a
00037f d152                      	do_lcd_rdata temp1
                                 	
000380 9310 020a                 	sts NP, temp1
000382 c000                      	rjmp findItem
                                 
                                 findItem:
000383 9310 020a                 	sts NP, temp1						; Store the number been pressed
000385 e0d2                      	ldi YH, high(QUANTITY)
000386 e0cf                      	ldi YL, low(QUANTITY)
                                 
                                 inventory:
000387 951a                      	dec temp1
000388 3010                      	cpi temp1, 0
000389 f1d9                      	breq inStock
00038a 9622                      	adiw Y, 2
00038b cffb                      	rjmp inventory
                                 
                                 showAdmin:
00038c ec50
00038d d134
00038e d143                      	do_lcd_command 0b11000000	; break to the next line
00038f 9100 020e                 	lds temp, QN
000391 d106                      	rcall convert_digits
                                 	;do_lcd_rdata temp
000392 e250
000393 d135
000394 d13d                      	do_lcd_data ' '
000395 e250
000396 d132
000397 d13a                      	do_lcd_data ' '
000398 e250
000399 d12f
00039a d137                      	do_lcd_data ' '
00039b e250
00039c d12c
00039d d134                      	do_lcd_data ' '
00039e e250
00039f d129
0003a0 d131                      	do_lcd_data ' '
0003a1 e250
0003a2 d126
0003a3 d12e                      	do_lcd_data ' '
0003a4 e250
0003a5 d123
0003a6 d12b                      	do_lcd_data ' '
0003a7 e250
0003a8 d120
0003a9 d128                      	do_lcd_data ' '
0003aa e254
0003ab d11d
0003ac d125                      	do_lcd_data '$'
0003ad 9120 020d                 	lds temp2, PR
0003af 2f52
0003b0 5d50
0003b1 d117
0003b2 d11f                      	do_lcd_rdata temp2
                                 	;ldi debounceFlag, 9
                                 	;out PORTC, debounceFlag
0003b3 cf09                      	rjmp initKeypad
                                 
                                 goOutOfStock:
0003b4 c06f                      	rjmp outOfStock
                                 
                                 makePattern:
0003b5 930f                      	push temp
0003b6 931f                      	push temp1
                                 loopPattern:
0003b7 3f1f                      	cpi temp1, 0xFF
0003b8 f031                      	breq overTen 
0003b9 3000                      	cpi temp, 0
0003ba f031                      	breq showPattern
0003bb 0f11                      	lsl temp1
0003bc 9513                      	inc temp1
0003bd 950a                      	dec temp
0003be cff8                      	rjmp loopPattern
                                 overTen:
0003bf 2711                      	clr temp1
0003c0 cff6                      	rjmp loopPattern
                                 showPattern:
0003c1 b918                      	out PORTC, temp1
0003c2 911f                      	pop temp1
0003c3 910f                      	pop temp
0003c4 cfc7                      	rjmp showAdmin
                                 
                                 inStock:
0003c5 9109                      	ld temp, Y+				;quantity
0003c6 9300 020e                 	sts QN, temp
0003c8 8128                      	ld temp2, Y				;price
0003c9 9320 020d                 	sts PR, temp2
                                 
0003cb 3065                      	cpi waitingFlag, 5
0003cc f341                      	breq makePattern
                                 
0003cd 3000                      	cpi temp, 0
0003ce f329                      	breq goOutOfStock
0003cf 2744                      	clr counter
                                 
                                 insertCoin:
0003d0 930f                      	push temp
0003d1 931f                      	push temp1
0003d2 932f                      	push temp2
0003d3 934f                      	push counter
0003d4 93df                      	push YH
0003d5 93cf                      	push YL
0003d6 e051
0003d7 d0ea
0003d8 d0f9                      	do_lcd_command 0b00000001 ; clear display
0003d9 e459
0003da d0ee
0003db d0f6                      	do_lcd_data 'I'
0003dc e65e
0003dd d0eb
0003de d0f3                      	do_lcd_data 'n'
0003df e753
0003e0 d0e8
0003e1 d0f0                      	do_lcd_data 's'
0003e2 e655
0003e3 d0e5
0003e4 d0ed                      	do_lcd_data 'e'
0003e5 e752
0003e6 d0e2
0003e7 d0ea                      	do_lcd_data 'r'
0003e8 e754
0003e9 d0df
0003ea d0e7                      	do_lcd_data 't'
0003eb e250
0003ec d0dc
0003ed d0e4                      	do_lcd_data ' '
0003ee e653
0003ef d0d9
0003f0 d0e1                      	do_lcd_data 'c'
0003f1 e65f
0003f2 d0d6
0003f3 d0de                      	do_lcd_data 'o'
0003f4 e659
0003f5 d0d3
0003f6 d0db                      	do_lcd_data 'i'
0003f7 e65e
0003f8 d0d0
0003f9 d0d8                      	do_lcd_data 'n'
0003fa e753
0003fb d0cd
0003fc d0d5                      	do_lcd_data 's'
0003fd d09a                      	rcall convert_digits
                                 	;do_lcd_rdata temp			; count left
                                 	;do_lcd_rdata temp			; coin Inserted
0003fe ec50
0003ff d0c2
000400 d0d1                      	do_lcd_command 0b11000000	; break to the next line
000401 2f52
000402 5d50
000403 d0c5
000404 d0cd                      	do_lcd_rdata temp2			; coin left
                                 
                                 initPOT:								; WF=0 DF=1 
000405 e063                      	ldi waitingFlag, 3					; WF=3 DF=0 diable keyPad but "#" in normal mode
                                 										; waiting for twisted
                                 
000406 2700                      	clr temp							; Flag for two side
000407 9300 0208                 	sts TF, temp
000409 2744                      	clr counter
00040a 2777                      	clr debounceFlag							; for the num of coins inserted
00040b 27ee                      	clr r30
00040c 27ff                      	clr r31
                                 
                                 POT:
00040d 3073                      	cpi debounceFlag, 3					; see if the twist has been twisted 
00040e f4a1                      	brne goInitial
00040f e400                      	ldi temp, (0<<ADEN | 1<<ADSC | 0<<ADIE)	; disable potentiometer
000410 9300 007a                 	sts ADCSRA, temp
000412 2777                      	clr debounceFlag
000413 91cf                      	pop YL
000414 91df                      	pop YH
000415 914f                      	pop counter
000416 912f                      	pop temp2							; coin left
000417 911f                      	pop temp1
000418 910f                      	pop temp							; count left
000419 9543                      	inc counter
                                 
00041a 0f11                      	lsl temp1
00041b 9513                      	inc temp1
00041c b918                      	out PORTC, temp1
                                 	
00041d 5021                      	subi temp2, 1						; 
00041e 3020                      	cpi temp2, 0						; if all coin has been inserted
00041f f411                      	brne goInsert						; refresh the screen
000420 2766                      	clr waitingFlag
000421 c03a                      	rjmp delivery
                                 
                                 goInsert:
000422 cfad                      	rjmp insertCoin
                                 goInitial:
000423 ce99                      	rjmp initKeypad
                                 
                                 outOfStock:
000424 9100 020a                 	lds temp, NP
000426 e051
000427 d09a
000428 d0a9                      	do_lcd_command 0b00000001 ; clear display
000429 e45f
00042a d09e
00042b d0a6                      	do_lcd_data 'O'
00042c e755
00042d d09b
00042e d0a3                      	do_lcd_data 'u'
00042f e754
000430 d098
000431 d0a0                      	do_lcd_data 't'
000432 e250
000433 d095
000434 d09d                      	do_lcd_data ' '
000435 e65f
000436 d092
000437 d09a                      	do_lcd_data 'o'
000438 e656
000439 d08f
00043a d097                      	do_lcd_data 'f'
00043b e250
00043c d08c
00043d d094                      	do_lcd_data ' '
00043e e753
00043f d089
000440 d091                      	do_lcd_data 's'
000441 e754
000442 d086
000443 d08e                      	do_lcd_data 't'
000444 e65f
000445 d083
000446 d08b                      	do_lcd_data 'o'
000447 e653
000448 d080
000449 d088                      	do_lcd_data 'c'
00044a e65b
00044b d07d
00044c d085                      	do_lcd_data 'k'
00044d ec50
00044e d073
00044f d082                      	do_lcd_command 0b11000000	; break to the next line
000450 2f50
000451 5d50
000452 d076
000453 d07e                      	do_lcd_rdata temp
000454 d097                      	rcall sleep_5ms
000455 ef0f                      	ser temp					; let LED to be on as default
000456 b908                      	out PORTC, temp
                                 
000457 27ee                      	clr r30					; clr button debounce counter
000458 27ff                      	clr r31
000459 2744                      	clr counter
                                 
00045a e062                      	ldi waitingFlag, 2		; enter led subroutine in TFOVR, DF=1
00045b ce61                      	rjmp initKeypad
                                 
                                 delivery:
00045c 5001                      	subi temp, 1
00045d 930a                      	st -Y, temp
00045e e051
00045f d062
000460 d071                      	do_lcd_command 0b00000001 ; clear display
                                 
000461 e454
000462 d066
000463 d06e                      	do_lcd_data 'D'
000464 e655
000465 d063
000466 d06b                      	do_lcd_data 'e'
000467 e65c
000468 d060
000469 d068                      	do_lcd_data 'l'
00046a e659
00046b d05d
00046c d065                      	do_lcd_data 'i'
00046d e756
00046e d05a
00046f d062                      	do_lcd_data 'v'
000470 e655
000471 d057
000472 d05f                      	do_lcd_data 'e'
000473 e752
000474 d054
000475 d05c                      	do_lcd_data 'r'
000476 e659
000477 d051
000478 d059                      	do_lcd_data 'i'
000479 e65e
00047a d04e
00047b d056                      	do_lcd_data 'n'
00047c e657
00047d d04b
00047e d053                      	do_lcd_data 'g'
00047f e250
000480 d048
000481 d050                      	do_lcd_data ' '
000482 e659
000483 d045
000484 d04d                      	do_lcd_data 'i'
000485 e754
000486 d042
000487 d04a                      	do_lcd_data 't'
000488 e655
000489 d03f
00048a d047                      	do_lcd_data 'e'
00048b e65d
00048c d03c
00048d d044                      	do_lcd_data 'm'
                                 
00048e ec50
00048f d032
000490 d041                      	do_lcd_command 0b11000000	; break to the next line
                                 
000491 ef0f                      	ser temp					; let LED to be on as default
000492 b908                      	out PORTC, temp
                                 
000493 e100                      	ldi temp,(1<<PE4)			; start the motor
000494 b90e                      	out PORTE, temp
                                 
000495 e064                      	ldi waitingFlag, 4
                                 
000496 2744                      	clr counter
000497 cf8b                      	rjmp goInitial
                                 
                                 
                                 
                                 
                                 
                                 ; main program ends here
                                 ;****************************************************************************************
                                 ;*******************************************    *****************************************
                                 ;*******************************************    *****************************************
                                 ;*******************************************    *****************************************
                                 ;***************************************   *    *   *************************************
                                 ;************************************  *   *    *   *   *********************************
                                 ;************************************  *   *    *   *  **********************************
                                 ;**************************************               ***********************************
                                 ;*****************************************          *************************************
                                 
                                 convert_digits:
000498 933f                      	push digit
000499 930f                      	push temp
00049a 2733                      	clr digit
                                 	;push temp
00049b 931f                      	push temp1
                                 	;push temp2
                                 checkHundreds:
00049c 3604                      	cpi temp, 100			; is the number still > 100?
00049d f498                      	brsh hundredsDigit		; if YES - increase hundreds digit
00049e 3030                      	cpi digit, 0		
00049f f4c1                      	brne showHundredsDigit	; If digit ! 0 => this digit goes into stack
                                 		
                                 checkTensInit:
0004a0 2733                      	clr digit
                                 checkTens:
0004a1 300a                      	cpi temp, 10			; is the number still > 10? 
0004a2 f490                      	brsh tensDigit			; if YES - increase tens digit
0004a3 3010                      	cpi temp1, 0
0004a4 f4c1                      	brne showTensDigit
0004a5 3030                      	cpi digit, 0			; is tens digit = 0?
0004a6 f4b1                      	brne showTensDigit		; if digit != 0 push it to the stack	
                                 	
                                 checkOnes:
0004a7 2733                      	clr digit
0004a8 2f30                      	mov digit, temp			; whatever is left in temp is the ones digit
                                 	; now all digit temp data is in the stack
                                 	; unload data into temp2, temp1, temp
                                 	; and the do_lcd_rdata in reverse order
                                 	; this will display the currentNumber value to LCD
                                 	; it's not an elegant solution but will do for now
0004a9 2f53
0004aa 5d50
0004ab d01d
0004ac d025                      	do_lcd_rdata digit
0004ad 911f                      	pop temp1
0004ae 910f                      	pop temp
0004af 913f                      	pop digit
0004b0 9508                      	ret
                                 
                                 ; hundreds digit
                                 hundredsDigit:
0004b1 e011                      	ldi temp1, 1
0004b2 9533                      	inc digit
0004b3 5604                      	subi temp, 100			; and subtract a 100 from the number
0004b4 cfe7                      	rjmp checkHundreds		; check hundreds again
                                 
                                 ; tens digit
                                 tensDigit:
0004b5 9533                      	inc digit				; if YES increase the digit count
0004b6 500a                      	subi temp, 10			; and subtract a 10 from the number
0004b7 cfe9                      	rjmp checkTens			; check tens again
                                 
                                 showHundredsDigit:
0004b8 2f53
0004b9 5d50
0004ba d00e
0004bb d016                      	do_lcd_rdata digit
0004bc cfe3                      	rjmp checkTensInit
                                 
                                 showTensDigit:
0004bd 2f53
0004be 5d50
0004bf d009
0004c0 d011                      	do_lcd_rdata digit
0004c1 cfe5                      	rjmp checkOnes
                                 
                                 
                                 ; lcd stuff
                                 
                                 lcd_command:
0004c2 bb51                      	out PORTF, lcd
0004c3 d01f                      	rcall sleep_1ms
0004c4 9a16                      	lcd_set LCD_E
0004c5 d01d                      	rcall sleep_1ms
0004c6 9816                      	lcd_clr LCD_E
0004c7 d01b                      	rcall sleep_1ms
0004c8 9508                      	ret
                                 
                                 lcd_data:
0004c9 bb51                      	out PORTF, lcd
0004ca 9a17                      	lcd_set LCD_RS
0004cb d017                      	rcall sleep_1ms
0004cc 9a16                      	lcd_set LCD_E
0004cd d015                      	rcall sleep_1ms
0004ce 9816                      	lcd_clr LCD_E
0004cf d013                      	rcall sleep_1ms
0004d0 9817                      	lcd_clr LCD_RS
0004d1 9508                      	ret
                                 
                                 
                                 lcd_wait:
0004d2 935f                      	push lcd
0004d3 2755                      	clr lcd
0004d4 bb50                      	out DDRF, lcd
0004d5 bb51                      	out PORTF, lcd
0004d6 9a15                      	lcd_set LCD_RW
                                 
                                 lcd_wait_loop:
0004d7 d00b                      	rcall sleep_1ms
0004d8 9a16                      	lcd_set LCD_E
0004d9 d009                      	rcall sleep_1ms
0004da b15f                      	in lcd, PINF
0004db 9816                      	lcd_clr LCD_E
0004dc fd57                      	sbrc lcd, 7
0004dd cff9                      	rjmp lcd_wait_loop
0004de 9815                      	lcd_clr LCD_RW
0004df ef5f                      	ser lcd
0004e0 bb50                      	out DDRF, lcd
0004e1 915f                      	pop lcd
0004e2 9508                      	ret
                                 
                                 ; For LCD delay
                                 .equ F_CPU = 16000000
                                 .equ DELAY_1MS = F_CPU / 4 / 1000 - 4
                                 ; 4 cycles per iteration - setup/call-return overhead
                                 
                                 sleep_1ms:
0004e3 938f                      		push r24
0004e4 939f                      		push r25
0004e5 e09f                      		ldi r25, high(DELAY_1MS)
0004e6 e98c                      		ldi r24, low(DELAY_1MS)
                                 delayloop_1ms:
0004e7 9701                      		sbiw r25:r24, 1
0004e8 f7f1                      		brne delayloop_1ms
0004e9 919f                      		pop r25
0004ea 918f                      		pop r24
0004eb 9508                      		ret
                                 
                                 sleep_5ms:
0004ec dff6                      		rcall sleep_1ms
0004ed dff5                      		rcall sleep_1ms
0004ee dff4                      		rcall sleep_1ms
0004ef dff3                      		rcall sleep_1ms
0004f0 dff2                      		rcall sleep_1ms


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

"ATmega2560" register use summary:
x  :   0 y  :  41 z  :   3 r0 :   0 r1 :   0 r2 :   0 r3 :   0 r4 :   0 
r5 :   0 r6 :   0 r7 :   0 r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 
r13:   0 r14:   0 r15:   0 r16: 221 r17:  41 r18:  21 r19:  21 r20:  27 
r21: 143 r22:  25 r23:  43 r24:  34 r25:  36 r26:   3 r27:   3 r28:  29 
r29:  29 r30:  17 r31:  17 
Registers used: 18 out of 35 (51.4%)

"ATmega2560" instruction use summary:
.lds  :   0 .sts  :   0 adc   :   0 add   :   2 adiw  :   8 and   :   1 
andi  :   2 asr   :   0 bclr  :   0 bld   :   0 brbc  :   0 brbs  :   0 
brcc  :   0 brcs  :   0 break :   0 breq  :  59 brge  :   0 brhc  :   0 
brhs  :   0 brid  :   0 brie  :   0 brlo  :   0 brlt  :   0 brmi  :   0 
brne  :  22 brpl  :   0 brsh  :   2 brtc  :   0 brts  :   0 brvc  :   0 
brvs  :   0 bset  :   0 bst   :   0 call  :   0 cbi   :   5 cbr   :   0 
clc   :   0 clh   :   0 cli   :   0 cln   :   0 clr   :  77 cls   :   0 
clt   :   0 clv   :   0 clz   :   0 com   :   0 cp    :   0 cpc   :   9 
cpi   :  80 cpse  :   0 dec   :   6 eicall:   0 eijmp :   0 elpm  :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :   8 inc   :  16 jmp   :  16 ld    :   2 ldd   :   0 ldi   : 211 
lds   :  25 lpm   :   2 lsl   :   5 lsr   :   1 mov   :  11 movw  :   0 
mul   :   0 muls  :   0 mulsu :   0 neg   :   0 nop   :   0 or    :   0 
ori   :   1 out   :  39 pop   :  48 push  :  40 rcall : 269 ret   :   6 
reti  :   7 rjmp  :  57 rol   :   0 ror   :   0 sbc   :   0 sbci  :   0 
sbi   :   5 sbic  :   0 sbis  :   0 sbiw  :   6 sbr   :   0 sbrc  :   1 
sbrs  :   0 sec   :   0 seh   :   0 sei   :   1 sen   :   0 ser   :   6 
ses   :   0 set   :   0 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  35 std   :   0 sts   :  32 sub   :   0 subi  :  12 swap  :   0 
tst   :   0 wdr   :   0 
Instructions used: 38 out of 116 (32.8%)

"ATmega2560" memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x0009e4   2414     18   2432  262144   0.9%
[.dseg] 0x000200 0x000221      0     33     33    8192   0.4%
[.eseg] 0x000000 0x000000      0      0      0    4096   0.0%

Assembly complete, 0 errors, 2 warnings
