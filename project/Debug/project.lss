
AVRASM ver. 2.2.6  C:\Users\Edward\Desktop\project\project\main.asm Wed May 31 23:16:59 2017

[builtin](2): Including file 'D:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.2.132\avrasm\inc\m2560def.inc'
C:\Users\Edward\Desktop\project\project\main.asm(8): Including file 'D:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.2.132\avrasm\inc\m2560def.inc'
C:\Users\Edward\Desktop\project\project\main.asm(20): warning: Register r26 already defined by the .DEF directive
C:\Users\Edward\Desktop\project\project\main.asm(21): warning: Register r27 already defined by the .DEF directive
[builtin](2): Including file 'D:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.2.132\avrasm\inc\m2560def.inc'
C:\Users\Edward\Desktop\project\project\main.asm(8): Including file 'D:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.2.132\avrasm\inc\m2560def.inc'
                                 
                                 ;
                                 
                                 ;***** Created: 2011-02-09 12:03 ******* Source: ATmega2560.xml **********
                                 ;*************************************************************************
                                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                                 ;* 
                                 ;* Number            : AVR000
                                 ;* File Name         : "m2560def.inc"
                                 ;* Title             : Register/Bit Definitions for the ATmega2560
                                 ;* Date              : 2011-02-09
                                 ;* Version           : 2.35
                                 ;* Support E-mail    : avr@atmel.com
                                 ;* Target MCU        : ATmega2560
                                 ;* 
                                 ;* DESCRIPTION
                                 ;* When including this file in the assembly program file, all I/O register 
                                 ;* names and I/O register bit names appearing in the data book can be used.
                                 ;* In addition, the six registers forming the three data pointers X, Y and 
                                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                                 ;* SRAM is also defined 
                                 ;* 
                                 ;* The Register names are represented by their hexadecimal address.
                                 ;* 
                                 ;* The Register Bit names are represented by their bit number (0-7).
                                 ;* 
                                 ;* Please observe the difference in using the bit names with instructions
                                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                                 ;* (skip if bit in register set/cleared). The following example illustrates
                                 ;* this:
                                 ;* 
                                 ;* in    r16,PORTB             ;read PORTB latch
                                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                                 ;* out   PORTB,r16             ;output to PORTB
                                 ;* 
                                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                                 ;* rjmp  TOV0_is_set           ;jump if set
                                 ;* ...                         ;otherwise do something else
                                 ;*************************************************************************
                                 
                                 #ifndef _M2560DEF_INC_
                                 #define _M2560DEF_INC_
                                 
                                 
                                 #pragma partinc 0
                                 
                                 ; ***** SPECIFY DEVICE ***************************************************
                                 .device ATmega2560
                                 #pragma AVRPART ADMIN PART_NAME ATmega2560
                                 .equ	SIGNATURE_000	= 0x1e
                                 .equ	SIGNATURE_001	= 0x98
                                 .equ	SIGNATURE_002	= 0x01
                                 
                                 #pragma AVRPART CORE CORE_VERSION V3
                                 
                                 
                                 ; ***** I/O REGISTER DEFINITIONS *****************************************
                                 ; NOTE:
                                 ; Definitions marked "MEMORY MAPPED"are extended I/O ports
                                 ; and cannot be used with IN/OUT instructions
                                 .equ	UDR3	= 0x136	; MEMORY MAPPED
                                 .equ	UBRR3L	= 0x134	; MEMORY MAPPED
                                 .equ	UBRR3H	= 0x135	; MEMORY MAPPED
                                 .equ	UCSR3C	= 0x132	; MEMORY MAPPED
                                 .equ	UCSR3B	= 0x131	; MEMORY MAPPED
                                 .equ	UCSR3A	= 0x130	; MEMORY MAPPED
                                 .equ	OCR5CL	= 0x12c	; MEMORY MAPPED
                                 .equ	OCR5CH	= 0x12d	; MEMORY MAPPED
                                 .equ	OCR5BL	= 0x12a	; MEMORY MAPPED
                                 .equ	OCR5BH	= 0x12b	; MEMORY MAPPED
                                 .equ	OCR5AL	= 0x128	; MEMORY MAPPED
                                 .equ	OCR5AH	= 0x129	; MEMORY MAPPED
                                 .equ	ICR5H	= 0x127	; MEMORY MAPPED
                                 .equ	ICR5L	= 0x126	; MEMORY MAPPED
                                 .equ	TCNT5L	= 0x124	; MEMORY MAPPED
                                 .equ	TCNT5H	= 0x125	; MEMORY MAPPED
                                 .equ	TCCR5C	= 0x122	; MEMORY MAPPED
                                 .equ	TCCR5B	= 0x121	; MEMORY MAPPED
                                 .equ	TCCR5A	= 0x120	; MEMORY MAPPED
                                 .equ	PORTL	= 0x10b	; MEMORY MAPPED
                                 .equ	DDRL	= 0x10a	; MEMORY MAPPED
                                 .equ	PINL	= 0x109	; MEMORY MAPPED
                                 .equ	PORTK	= 0x108	; MEMORY MAPPED
                                 .equ	DDRK	= 0x107	; MEMORY MAPPED
                                 .equ	PINK	= 0x106	; MEMORY MAPPED
                                 .equ	PORTJ	= 0x105	; MEMORY MAPPED
                                 .equ	DDRJ	= 0x104	; MEMORY MAPPED
                                 .equ	PINJ	= 0x103	; MEMORY MAPPED
                                 .equ	PORTH	= 0x102	; MEMORY MAPPED
                                 .equ	DDRH	= 0x101	; MEMORY MAPPED
                                 .equ	PINH	= 0x100	; MEMORY MAPPED
                                 .equ	UDR2	= 0xd6	; MEMORY MAPPED
                                 .equ	UBRR2L	= 0xd4	; MEMORY MAPPED
                                 .equ	UBRR2H	= 0xd5	; MEMORY MAPPED
                                 .equ	UCSR2C	= 0xd2	; MEMORY MAPPED
                                 .equ	UCSR2B	= 0xd1	; MEMORY MAPPED
                                 .equ	UCSR2A	= 0xd0	; MEMORY MAPPED
                                 .equ	UDR1	= 0xce	; MEMORY MAPPED
                                 .equ	UBRR1L	= 0xcc	; MEMORY MAPPED
                                 .equ	UBRR1H	= 0xcd	; MEMORY MAPPED
                                 .equ	UCSR1C	= 0xca	; MEMORY MAPPED
                                 .equ	UCSR1B	= 0xc9	; MEMORY MAPPED
                                 .equ	UCSR1A	= 0xc8	; MEMORY MAPPED
                                 .equ	UDR0	= 0xc6	; MEMORY MAPPED
                                 .equ	UBRR0L	= 0xc4	; MEMORY MAPPED
                                 .equ	UBRR0H	= 0xc5	; MEMORY MAPPED
                                 .equ	UCSR0C	= 0xc2	; MEMORY MAPPED
                                 .equ	UCSR0B	= 0xc1	; MEMORY MAPPED
                                 .equ	UCSR0A	= 0xc0	; MEMORY MAPPED
                                 .equ	TWAMR	= 0xbd	; MEMORY MAPPED
                                 .equ	TWCR	= 0xbc	; MEMORY MAPPED
                                 .equ	TWDR	= 0xbb	; MEMORY MAPPED
                                 .equ	TWAR	= 0xba	; MEMORY MAPPED
                                 .equ	TWSR	= 0xb9	; MEMORY MAPPED
                                 .equ	TWBR	= 0xb8	; MEMORY MAPPED
                                 .equ	ASSR	= 0xb6	; MEMORY MAPPED
                                 .equ	OCR2B	= 0xb4	; MEMORY MAPPED
                                 .equ	OCR2A	= 0xb3	; MEMORY MAPPED
                                 .equ	TCNT2	= 0xb2	; MEMORY MAPPED
                                 .equ	TCCR2B	= 0xb1	; MEMORY MAPPED
                                 .equ	TCCR2A	= 0xb0	; MEMORY MAPPED
                                 .equ	OCR4CL	= 0xac	; MEMORY MAPPED
                                 .equ	OCR4CH	= 0xad	; MEMORY MAPPED
                                 .equ	OCR4BL	= 0xaa	; MEMORY MAPPED
                                 .equ	OCR4BH	= 0xab	; MEMORY MAPPED
                                 .equ	OCR4AL	= 0xa8	; MEMORY MAPPED
                                 .equ	OCR4AH	= 0xa9	; MEMORY MAPPED
                                 .equ	ICR4L	= 0xa6	; MEMORY MAPPED
                                 .equ	ICR4H	= 0xa7	; MEMORY MAPPED
                                 .equ	TCNT4L	= 0xa4	; MEMORY MAPPED
                                 .equ	TCNT4H	= 0xa5	; MEMORY MAPPED
                                 .equ	TCCR4C	= 0xa2	; MEMORY MAPPED
                                 .equ	TCCR4B	= 0xa1	; MEMORY MAPPED
                                 .equ	TCCR4A	= 0xa0	; MEMORY MAPPED
                                 .equ	OCR3CL	= 0x9c	; MEMORY MAPPED
                                 .equ	OCR3CH	= 0x9d	; MEMORY MAPPED
                                 .equ	OCR3BL	= 0x9a	; MEMORY MAPPED
                                 .equ	OCR3BH	= 0x9b	; MEMORY MAPPED
                                 .equ	OCR3AL	= 0x98	; MEMORY MAPPED
                                 .equ	OCR3AH	= 0x99	; MEMORY MAPPED
                                 .equ	ICR3L	= 0x96	; MEMORY MAPPED
                                 .equ	ICR3H	= 0x97	; MEMORY MAPPED
                                 .equ	TCNT3L	= 0x94	; MEMORY MAPPED
                                 .equ	TCNT3H	= 0x95	; MEMORY MAPPED
                                 .equ	TCCR3C	= 0x92	; MEMORY MAPPED
                                 .equ	TCCR3B	= 0x91	; MEMORY MAPPED
                                 .equ	TCCR3A	= 0x90	; MEMORY MAPPED
                                 .equ	OCR1CL	= 0x8c	; MEMORY MAPPED
                                 .equ	OCR1CH	= 0x8d	; MEMORY MAPPED
                                 .equ	OCR1BL	= 0x8a	; MEMORY MAPPED
                                 .equ	OCR1BH	= 0x8b	; MEMORY MAPPED
                                 .equ	OCR1AL	= 0x88	; MEMORY MAPPED
                                 .equ	OCR1AH	= 0x89	; MEMORY MAPPED
                                 .equ	ICR1L	= 0x86	; MEMORY MAPPED
                                 .equ	ICR1H	= 0x87	; MEMORY MAPPED
                                 .equ	TCNT1L	= 0x84	; MEMORY MAPPED
                                 .equ	TCNT1H	= 0x85	; MEMORY MAPPED
                                 .equ	TCCR1C	= 0x82	; MEMORY MAPPED
                                 .equ	TCCR1B	= 0x81	; MEMORY MAPPED
                                 .equ	TCCR1A	= 0x80	; MEMORY MAPPED
                                 .equ	DIDR1	= 0x7f	; MEMORY MAPPED
                                 .equ	DIDR0	= 0x7e	; MEMORY MAPPED
                                 .equ	DIDR2	= 0x7d	; MEMORY MAPPED
                                 .equ	ADMUX	= 0x7c	; MEMORY MAPPED
                                 .equ	ADCSRB	= 0x7b	; MEMORY MAPPED
                                 .equ	ADCSRA	= 0x7a	; MEMORY MAPPED
                                 .equ	ADCH	= 0x79	; MEMORY MAPPED
                                 .equ	ADCL	= 0x78	; MEMORY MAPPED
                                 .equ	XMCRB	= 0x75	; MEMORY MAPPED
                                 .equ	XMCRA	= 0x74	; MEMORY MAPPED
                                 .equ	TIMSK5	= 0x73	; MEMORY MAPPED
                                 .equ	TIMSK4	= 0x72	; MEMORY MAPPED
                                 .equ	TIMSK3	= 0x71	; MEMORY MAPPED
                                 .equ	TIMSK2	= 0x70	; MEMORY MAPPED
                                 .equ	TIMSK1	= 0x6f	; MEMORY MAPPED
                                 .equ	TIMSK0	= 0x6e	; MEMORY MAPPED
                                 .equ	PCMSK2	= 0x6d	; MEMORY MAPPED
                                 .equ	PCMSK1	= 0x6c	; MEMORY MAPPED
                                 .equ	PCMSK0	= 0x6b	; MEMORY MAPPED
                                 .equ	EICRB	= 0x6a	; MEMORY MAPPED
                                 .equ	EICRA	= 0x69	; MEMORY MAPPED
                                 .equ	PCICR	= 0x68	; MEMORY MAPPED
                                 .equ	OSCCAL	= 0x66	; MEMORY MAPPED
                                 .equ	PRR1	= 0x65	; MEMORY MAPPED
                                 .equ	PRR0	= 0x64	; MEMORY MAPPED
                                 .equ	CLKPR	= 0x61	; MEMORY MAPPED
                                 .equ	WDTCSR	= 0x60	; MEMORY MAPPED
                                 .equ	SREG	= 0x3f
                                 .equ	SPL	= 0x3d
                                 .equ	SPH	= 0x3e
                                 .equ	EIND	= 0x3c
                                 .equ	RAMPZ	= 0x3b
                                 .equ	SPMCSR	= 0x37
                                 .equ	MCUCR	= 0x35
                                 .equ	MCUSR	= 0x34
                                 .equ	SMCR	= 0x33
                                 .equ	OCDR	= 0x31
                                 .equ	ACSR	= 0x30
                                 .equ	SPDR	= 0x2e
                                 .equ	SPSR	= 0x2d
                                 .equ	SPCR	= 0x2c
                                 .equ	GPIOR2	= 0x2b
                                 .equ	GPIOR1	= 0x2a
                                 .equ	OCR0B	= 0x28
                                 .equ	OCR0A	= 0x27
                                 .equ	TCNT0	= 0x26
                                 .equ	TCCR0B	= 0x25
                                 .equ	TCCR0A	= 0x24
                                 .equ	GTCCR	= 0x23
                                 .equ	EEARH	= 0x22
                                 .equ	EEARL	= 0x21
                                 .equ	EEDR	= 0x20
                                 .equ	EECR	= 0x1f
                                 .equ	GPIOR0	= 0x1e
                                 .equ	EIMSK	= 0x1d
                                 .equ	EIFR	= 0x1c
                                 .equ	PCIFR	= 0x1b
                                 .equ	TIFR5	= 0x1a
                                 .equ	TIFR4	= 0x19
                                 .equ	TIFR3	= 0x18
                                 .equ	TIFR2	= 0x17
                                 .equ	TIFR1	= 0x16
                                 .equ	TIFR0	= 0x15
                                 .equ	PORTG	= 0x14
                                 .equ	DDRG	= 0x13
                                 .equ	PING	= 0x12
                                 .equ	PORTF	= 0x11
                                 .equ	DDRF	= 0x10
                                 .equ	PINF	= 0x0f
                                 .equ	PORTE	= 0x0e
                                 .equ	DDRE	= 0x0d
                                 .equ	PINE	= 0x0c
                                 .equ	PORTD	= 0x0b
                                 .equ	DDRD	= 0x0a
                                 .equ	PIND	= 0x09
                                 .equ	PORTC	= 0x08
                                 .equ	DDRC	= 0x07
                                 .equ	PINC	= 0x06
                                 .equ	PORTB	= 0x05
                                 .equ	DDRB	= 0x04
                                 .equ	PINB	= 0x03
                                 .equ	PORTA	= 0x02
                                 .equ	DDRA	= 0x01
                                 .equ	PINA	= 0x00
                                 
                                 
                                 ; ***** BIT DEFINITIONS **************************************************
                                 
                                 ; ***** ANALOG_COMPARATOR ************
                                 ; ADCSRB - ADC Control and Status Register B
                                 .equ	ACME	= 6	; Analog Comparator Multiplexer Enable
                                 
                                 ; ACSR - Analog Comparator Control And Status Register
                                 .equ	ACIS0	= 0	; Analog Comparator Interrupt Mode Select bit 0
                                 .equ	ACIS1	= 1	; Analog Comparator Interrupt Mode Select bit 1
                                 .equ	ACIC	= 2	; Analog Comparator Input Capture Enable
                                 .equ	ACIE	= 3	; Analog Comparator Interrupt Enable
                                 .equ	ACI	= 4	; Analog Comparator Interrupt Flag
                                 .equ	ACO	= 5	; Analog Compare Output
                                 .equ	ACBG	= 6	; Analog Comparator Bandgap Select
                                 .equ	ACD	= 7	; Analog Comparator Disable
                                 
                                 ; DIDR1 - Digital Input Disable Register 1
                                 .equ	AIN0D	= 0	; AIN0 Digital Input Disable
                                 .equ	AIN1D	= 1	; AIN1 Digital Input Disable
                                 
                                 
                                 ; ***** USART0 ***********************
                                 ; UDR0 - USART I/O Data Register
                                 .equ	UDR0_0	= 0	; USART I/O Data Register bit 0
                                 .equ	UDR0_1	= 1	; USART I/O Data Register bit 1
                                 .equ	UDR0_2	= 2	; USART I/O Data Register bit 2
                                 .equ	UDR0_3	= 3	; USART I/O Data Register bit 3
                                 .equ	UDR0_4	= 4	; USART I/O Data Register bit 4
                                 .equ	UDR0_5	= 5	; USART I/O Data Register bit 5
                                 .equ	UDR0_6	= 6	; USART I/O Data Register bit 6
                                 .equ	UDR0_7	= 7	; USART I/O Data Register bit 7
                                 
                                 ; UCSR0A - USART Control and Status Register A
                                 .equ	MPCM0	= 0	; Multi-processor Communication Mode
                                 .equ	U2X0	= 1	; Double the USART transmission speed
                                 .equ	UPE0	= 2	; Parity Error
                                 .equ	DOR0	= 3	; Data overRun
                                 .equ	FE0	= 4	; Framing Error
                                 .equ	UDRE0	= 5	; USART Data Register Empty
                                 .equ	TXC0	= 6	; USART Transmitt Complete
                                 .equ	RXC0	= 7	; USART Receive Complete
                                 
                                 ; UCSR0B - USART Control and Status Register B
                                 .equ	TXB80	= 0	; Transmit Data Bit 8
                                 .equ	RXB80	= 1	; Receive Data Bit 8
                                 .equ	UCSZ02	= 2	; Character Size
                                 .equ	TXEN0	= 3	; Transmitter Enable
                                 .equ	RXEN0	= 4	; Receiver Enable
                                 .equ	UDRIE0	= 5	; USART Data register Empty Interrupt Enable
                                 .equ	TXCIE0	= 6	; TX Complete Interrupt Enable
                                 .equ	RXCIE0	= 7	; RX Complete Interrupt Enable
                                 
                                 ; UCSR0C - USART Control and Status Register C
                                 .equ	UCPOL0	= 0	; Clock Polarity
                                 .equ	UCSZ00	= 1	; Character Size
                                 .equ	UCPHA0	= UCSZ00	; For compatibility
                                 .equ	UCSZ01	= 2	; Character Size
                                 .equ	UDORD0	= UCSZ01	; For compatibility
                                 .equ	USBS0	= 3	; Stop Bit Select
                                 .equ	UPM00	= 4	; Parity Mode Bit 0
                                 .equ	UPM01	= 5	; Parity Mode Bit 1
                                 .equ	UMSEL00	= 6	; USART Mode Select
                                 .equ	UMSEL0	= UMSEL00	; For compatibility
                                 .equ	UMSEL01	= 7	; USART Mode Select
                                 .equ	UMSEL1	= UMSEL01	; For compatibility
                                 
                                 ; UBRR0H - USART Baud Rate Register High Byte
                                 .equ	UBRR8	= 0	; USART Baud Rate Register bit 8
                                 .equ	UBRR9	= 1	; USART Baud Rate Register bit 9
                                 .equ	UBRR10	= 2	; USART Baud Rate Register bit 10
                                 .equ	UBRR11	= 3	; USART Baud Rate Register bit 11
                                 
                                 ; UBRR0L - USART Baud Rate Register Low Byte
                                 .equ	_UBRR0	= 0	; USART Baud Rate Register bit 0
                                 .equ	_UBRR1	= 1	; USART Baud Rate Register bit 1
                                 .equ	UBRR2	= 2	; USART Baud Rate Register bit 2
                                 .equ	UBRR3	= 3	; USART Baud Rate Register bit 3
                                 .equ	UBRR4	= 4	; USART Baud Rate Register bit 4
                                 .equ	UBRR5	= 5	; USART Baud Rate Register bit 5
                                 .equ	UBRR6	= 6	; USART Baud Rate Register bit 6
                                 .equ	UBRR7	= 7	; USART Baud Rate Register bit 7
                                 
                                 
                                 ; ***** TWI **************************
                                 ; TWAMR - TWI (Slave) Address Mask Register
                                 .equ	TWAM0	= 1	; 
                                 .equ	TWAMR0	= TWAM0	; For compatibility
                                 .equ	TWAM1	= 2	; 
                                 .equ	TWAMR1	= TWAM1	; For compatibility
                                 .equ	TWAM2	= 3	; 
                                 .equ	TWAMR2	= TWAM2	; For compatibility
                                 .equ	TWAM3	= 4	; 
                                 .equ	TWAMR3	= TWAM3	; For compatibility
                                 .equ	TWAM4	= 5	; 
                                 .equ	TWAMR4	= TWAM4	; For compatibility
                                 .equ	TWAM5	= 6	; 
                                 .equ	TWAMR5	= TWAM5	; For compatibility
                                 .equ	TWAM6	= 7	; 
                                 .equ	TWAMR6	= TWAM6	; For compatibility
                                 
                                 ; TWBR - TWI Bit Rate register
                                 .equ	TWBR0	= 0	; 
                                 .equ	TWBR1	= 1	; 
                                 .equ	TWBR2	= 2	; 
                                 .equ	TWBR3	= 3	; 
                                 .equ	TWBR4	= 4	; 
                                 .equ	TWBR5	= 5	; 
                                 .equ	TWBR6	= 6	; 
                                 .equ	TWBR7	= 7	; 
                                 
                                 ; TWCR - TWI Control Register
                                 .equ	TWIE	= 0	; TWI Interrupt Enable
                                 .equ	TWEN	= 2	; TWI Enable Bit
                                 .equ	TWWC	= 3	; TWI Write Collition Flag
                                 .equ	TWSTO	= 4	; TWI Stop Condition Bit
                                 .equ	TWSTA	= 5	; TWI Start Condition Bit
                                 .equ	TWEA	= 6	; TWI Enable Acknowledge Bit
                                 .equ	TWINT	= 7	; TWI Interrupt Flag
                                 
                                 ; TWSR - TWI Status Register
                                 .equ	TWPS0	= 0	; TWI Prescaler
                                 .equ	TWPS1	= 1	; TWI Prescaler
                                 .equ	TWS3	= 3	; TWI Status
                                 .equ	TWS4	= 4	; TWI Status
                                 .equ	TWS5	= 5	; TWI Status
                                 .equ	TWS6	= 6	; TWI Status
                                 .equ	TWS7	= 7	; TWI Status
                                 
                                 ; TWDR - TWI Data register
                                 .equ	TWD0	= 0	; TWI Data Register Bit 0
                                 .equ	TWD1	= 1	; TWI Data Register Bit 1
                                 .equ	TWD2	= 2	; TWI Data Register Bit 2
                                 .equ	TWD3	= 3	; TWI Data Register Bit 3
                                 .equ	TWD4	= 4	; TWI Data Register Bit 4
                                 .equ	TWD5	= 5	; TWI Data Register Bit 5
                                 .equ	TWD6	= 6	; TWI Data Register Bit 6
                                 .equ	TWD7	= 7	; TWI Data Register Bit 7
                                 
                                 ; TWAR - TWI (Slave) Address register
                                 .equ	TWGCE	= 0	; TWI General Call Recognition Enable Bit
                                 .equ	TWA0	= 1	; TWI (Slave) Address register Bit 0
                                 .equ	TWA1	= 2	; TWI (Slave) Address register Bit 1
                                 .equ	TWA2	= 3	; TWI (Slave) Address register Bit 2
                                 .equ	TWA3	= 4	; TWI (Slave) Address register Bit 3
                                 .equ	TWA4	= 5	; TWI (Slave) Address register Bit 4
                                 .equ	TWA5	= 6	; TWI (Slave) Address register Bit 5
                                 .equ	TWA6	= 7	; TWI (Slave) Address register Bit 6
                                 
                                 
                                 ; ***** SPI **************************
                                 ; SPDR - SPI Data Register
                                 .equ	SPDR0	= 0	; SPI Data Register bit 0
                                 .equ	SPDR1	= 1	; SPI Data Register bit 1
                                 .equ	SPDR2	= 2	; SPI Data Register bit 2
                                 .equ	SPDR3	= 3	; SPI Data Register bit 3
                                 .equ	SPDR4	= 4	; SPI Data Register bit 4
                                 .equ	SPDR5	= 5	; SPI Data Register bit 5
                                 .equ	SPDR6	= 6	; SPI Data Register bit 6
                                 .equ	SPDR7	= 7	; SPI Data Register bit 7
                                 
                                 ; SPSR - SPI Status Register
                                 .equ	SPI2X	= 0	; Double SPI Speed Bit
                                 .equ	WCOL	= 6	; Write Collision Flag
                                 .equ	SPIF	= 7	; SPI Interrupt Flag
                                 
                                 ; SPCR - SPI Control Register
                                 .equ	SPR0	= 0	; SPI Clock Rate Select 0
                                 .equ	SPR1	= 1	; SPI Clock Rate Select 1
                                 .equ	CPHA	= 2	; Clock Phase
                                 .equ	CPOL	= 3	; Clock polarity
                                 .equ	MSTR	= 4	; Master/Slave Select
                                 .equ	DORD	= 5	; Data Order
                                 .equ	SPE	= 6	; SPI Enable
                                 .equ	SPIE	= 7	; SPI Interrupt Enable
                                 
                                 
                                 ; ***** PORTA ************************
                                 ; PORTA - Port A Data Register
                                 .equ	PORTA0	= 0	; Port A Data Register bit 0
                                 .equ	PA0	= 0	; For compatibility
                                 .equ	PORTA1	= 1	; Port A Data Register bit 1
                                 .equ	PA1	= 1	; For compatibility
                                 .equ	PORTA2	= 2	; Port A Data Register bit 2
                                 .equ	PA2	= 2	; For compatibility
                                 .equ	PORTA3	= 3	; Port A Data Register bit 3
                                 .equ	PA3	= 3	; For compatibility
                                 .equ	PORTA4	= 4	; Port A Data Register bit 4
                                 .equ	PA4	= 4	; For compatibility
                                 .equ	PORTA5	= 5	; Port A Data Register bit 5
                                 .equ	PA5	= 5	; For compatibility
                                 .equ	PORTA6	= 6	; Port A Data Register bit 6
                                 .equ	PA6	= 6	; For compatibility
                                 .equ	PORTA7	= 7	; Port A Data Register bit 7
                                 .equ	PA7	= 7	; For compatibility
                                 
                                 ; DDRA - Port A Data Direction Register
                                 .equ	DDA0	= 0	; Data Direction Register, Port A, bit 0
                                 .equ	DDA1	= 1	; Data Direction Register, Port A, bit 1
                                 .equ	DDA2	= 2	; Data Direction Register, Port A, bit 2
                                 .equ	DDA3	= 3	; Data Direction Register, Port A, bit 3
                                 .equ	DDA4	= 4	; Data Direction Register, Port A, bit 4
                                 .equ	DDA5	= 5	; Data Direction Register, Port A, bit 5
                                 .equ	DDA6	= 6	; Data Direction Register, Port A, bit 6
                                 .equ	DDA7	= 7	; Data Direction Register, Port A, bit 7
                                 
                                 ; PINA - Port A Input Pins
                                 .equ	PINA0	= 0	; Input Pins, Port A bit 0
                                 .equ	PINA1	= 1	; Input Pins, Port A bit 1
                                 .equ	PINA2	= 2	; Input Pins, Port A bit 2
                                 .equ	PINA3	= 3	; Input Pins, Port A bit 3
                                 .equ	PINA4	= 4	; Input Pins, Port A bit 4
                                 .equ	PINA5	= 5	; Input Pins, Port A bit 5
                                 .equ	PINA6	= 6	; Input Pins, Port A bit 6
                                 .equ	PINA7	= 7	; Input Pins, Port A bit 7
                                 
                                 
                                 ; ***** PORTB ************************
                                 ; PORTB - Port B Data Register
                                 .equ	PORTB0	= 0	; Port B Data Register bit 0
                                 .equ	PB0	= 0	; For compatibility
                                 .equ	PORTB1	= 1	; Port B Data Register bit 1
                                 .equ	PB1	= 1	; For compatibility
                                 .equ	PORTB2	= 2	; Port B Data Register bit 2
                                 .equ	PB2	= 2	; For compatibility
                                 .equ	PORTB3	= 3	; Port B Data Register bit 3
                                 .equ	PB3	= 3	; For compatibility
                                 .equ	PORTB4	= 4	; Port B Data Register bit 4
                                 .equ	PB4	= 4	; For compatibility
                                 .equ	PORTB5	= 5	; Port B Data Register bit 5
                                 .equ	PB5	= 5	; For compatibility
                                 .equ	PORTB6	= 6	; Port B Data Register bit 6
                                 .equ	PB6	= 6	; For compatibility
                                 .equ	PORTB7	= 7	; Port B Data Register bit 7
                                 .equ	PB7	= 7	; For compatibility
                                 
                                 ; DDRB - Port B Data Direction Register
                                 .equ	DDB0	= 0	; Port B Data Direction Register bit 0
                                 .equ	DDB1	= 1	; Port B Data Direction Register bit 1
                                 .equ	DDB2	= 2	; Port B Data Direction Register bit 2
                                 .equ	DDB3	= 3	; Port B Data Direction Register bit 3
                                 .equ	DDB4	= 4	; Port B Data Direction Register bit 4
                                 .equ	DDB5	= 5	; Port B Data Direction Register bit 5
                                 .equ	DDB6	= 6	; Port B Data Direction Register bit 6
                                 .equ	DDB7	= 7	; Port B Data Direction Register bit 7
                                 
                                 ; PINB - Port B Input Pins
                                 .equ	PINB0	= 0	; Port B Input Pins bit 0
                                 .equ	PINB1	= 1	; Port B Input Pins bit 1
                                 .equ	PINB2	= 2	; Port B Input Pins bit 2
                                 .equ	PINB3	= 3	; Port B Input Pins bit 3
                                 .equ	PINB4	= 4	; Port B Input Pins bit 4
                                 .equ	PINB5	= 5	; Port B Input Pins bit 5
                                 .equ	PINB6	= 6	; Port B Input Pins bit 6
                                 .equ	PINB7	= 7	; Port B Input Pins bit 7
                                 
                                 
                                 ; ***** PORTC ************************
                                 ; PORTC - Port C Data Register
                                 .equ	PORTC0	= 0	; Port C Data Register bit 0
                                 .equ	PC0	= 0	; For compatibility
                                 .equ	PORTC1	= 1	; Port C Data Register bit 1
                                 .equ	PC1	= 1	; For compatibility
                                 .equ	PORTC2	= 2	; Port C Data Register bit 2
                                 .equ	PC2	= 2	; For compatibility
                                 .equ	PORTC3	= 3	; Port C Data Register bit 3
                                 .equ	PC3	= 3	; For compatibility
                                 .equ	PORTC4	= 4	; Port C Data Register bit 4
                                 .equ	PC4	= 4	; For compatibility
                                 .equ	PORTC5	= 5	; Port C Data Register bit 5
                                 .equ	PC5	= 5	; For compatibility
                                 .equ	PORTC6	= 6	; Port C Data Register bit 6
                                 .equ	PC6	= 6	; For compatibility
                                 .equ	PORTC7	= 7	; Port C Data Register bit 7
                                 .equ	PC7	= 7	; For compatibility
                                 
                                 ; DDRC - Port C Data Direction Register
                                 .equ	DDC0	= 0	; Port C Data Direction Register bit 0
                                 .equ	DDC1	= 1	; Port C Data Direction Register bit 1
                                 .equ	DDC2	= 2	; Port C Data Direction Register bit 2
                                 .equ	DDC3	= 3	; Port C Data Direction Register bit 3
                                 .equ	DDC4	= 4	; Port C Data Direction Register bit 4
                                 .equ	DDC5	= 5	; Port C Data Direction Register bit 5
                                 .equ	DDC6	= 6	; Port C Data Direction Register bit 6
                                 .equ	DDC7	= 7	; Port C Data Direction Register bit 7
                                 
                                 ; PINC - Port C Input Pins
                                 .equ	PINC0	= 0	; Port C Input Pins bit 0
                                 .equ	PINC1	= 1	; Port C Input Pins bit 1
                                 .equ	PINC2	= 2	; Port C Input Pins bit 2
                                 .equ	PINC3	= 3	; Port C Input Pins bit 3
                                 .equ	PINC4	= 4	; Port C Input Pins bit 4
                                 .equ	PINC5	= 5	; Port C Input Pins bit 5
                                 .equ	PINC6	= 6	; Port C Input Pins bit 6
                                 .equ	PINC7	= 7	; Port C Input Pins bit 7
                                 
                                 
                                 ; ***** PORTD ************************
                                 ; PORTD - Port D Data Register
                                 .equ	PORTD0	= 0	; Port D Data Register bit 0
                                 .equ	PD0	= 0	; For compatibility
                                 .equ	PORTD1	= 1	; Port D Data Register bit 1
                                 .equ	PD1	= 1	; For compatibility
                                 .equ	PORTD2	= 2	; Port D Data Register bit 2
                                 .equ	PD2	= 2	; For compatibility
                                 .equ	PORTD3	= 3	; Port D Data Register bit 3
                                 .equ	PD3	= 3	; For compatibility
                                 .equ	PORTD4	= 4	; Port D Data Register bit 4
                                 .equ	PD4	= 4	; For compatibility
                                 .equ	PORTD5	= 5	; Port D Data Register bit 5
                                 .equ	PD5	= 5	; For compatibility
                                 .equ	PORTD6	= 6	; Port D Data Register bit 6
                                 .equ	PD6	= 6	; For compatibility
                                 .equ	PORTD7	= 7	; Port D Data Register bit 7
                                 .equ	PD7	= 7	; For compatibility
                                 
                                 ; DDRD - Port D Data Direction Register
                                 .equ	DDD0	= 0	; Port D Data Direction Register bit 0
                                 .equ	DDD1	= 1	; Port D Data Direction Register bit 1
                                 .equ	DDD2	= 2	; Port D Data Direction Register bit 2
                                 .equ	DDD3	= 3	; Port D Data Direction Register bit 3
                                 .equ	DDD4	= 4	; Port D Data Direction Register bit 4
                                 .equ	DDD5	= 5	; Port D Data Direction Register bit 5
                                 .equ	DDD6	= 6	; Port D Data Direction Register bit 6
                                 .equ	DDD7	= 7	; Port D Data Direction Register bit 7
                                 
                                 ; PIND - Port D Input Pins
                                 .equ	PIND0	= 0	; Port D Input Pins bit 0
                                 .equ	PIND1	= 1	; Port D Input Pins bit 1
                                 .equ	PIND2	= 2	; Port D Input Pins bit 2
                                 .equ	PIND3	= 3	; Port D Input Pins bit 3
                                 .equ	PIND4	= 4	; Port D Input Pins bit 4
                                 .equ	PIND5	= 5	; Port D Input Pins bit 5
                                 .equ	PIND6	= 6	; Port D Input Pins bit 6
                                 .equ	PIND7	= 7	; Port D Input Pins bit 7
                                 
                                 
                                 ; ***** PORTE ************************
                                 ; PORTE - Data Register, Port E
                                 .equ	PORTE0	= 0	; 
                                 .equ	PE0	= 0	; For compatibility
                                 .equ	PORTE1	= 1	; 
                                 .equ	PE1	= 1	; For compatibility
                                 .equ	PORTE2	= 2	; 
                                 .equ	PE2	= 2	; For compatibility
                                 .equ	PORTE3	= 3	; 
                                 .equ	PE3	= 3	; For compatibility
                                 .equ	PORTE4	= 4	; 
                                 .equ	PE4	= 4	; For compatibility
                                 .equ	PORTE5	= 5	; 
                                 .equ	PE5	= 5	; For compatibility
                                 .equ	PORTE6	= 6	; 
                                 .equ	PE6	= 6	; For compatibility
                                 .equ	PORTE7	= 7	; 
                                 .equ	PE7	= 7	; For compatibility
                                 
                                 ; DDRE - Data Direction Register, Port E
                                 .equ	DDE0	= 0	; 
                                 .equ	DDE1	= 1	; 
                                 .equ	DDE2	= 2	; 
                                 .equ	DDE3	= 3	; 
                                 .equ	DDE4	= 4	; 
                                 .equ	DDE5	= 5	; 
                                 .equ	DDE6	= 6	; 
                                 .equ	DDE7	= 7	; 
                                 
                                 ; PINE - Input Pins, Port E
                                 .equ	PINE0	= 0	; 
                                 .equ	PINE1	= 1	; 
                                 .equ	PINE2	= 2	; 
                                 .equ	PINE3	= 3	; 
                                 .equ	PINE4	= 4	; 
                                 .equ	PINE5	= 5	; 
                                 .equ	PINE6	= 6	; 
                                 .equ	PINE7	= 7	; 
                                 
                                 
                                 ; ***** PORTF ************************
                                 ; PORTF - Data Register, Port F
                                 .equ	PORTF0	= 0	; 
                                 .equ	PF0	= 0	; For compatibility
                                 .equ	PORTF1	= 1	; 
                                 .equ	PF1	= 1	; For compatibility
                                 .equ	PORTF2	= 2	; 
                                 .equ	PF2	= 2	; For compatibility
                                 .equ	PORTF3	= 3	; 
                                 .equ	PF3	= 3	; For compatibility
                                 .equ	PORTF4	= 4	; 
                                 .equ	PF4	= 4	; For compatibility
                                 .equ	PORTF5	= 5	; 
                                 .equ	PF5	= 5	; For compatibility
                                 .equ	PORTF6	= 6	; 
                                 .equ	PF6	= 6	; For compatibility
                                 .equ	PORTF7	= 7	; 
                                 .equ	PF7	= 7	; For compatibility
                                 
                                 ; DDRF - Data Direction Register, Port F
                                 .equ	DDF0	= 0	; 
                                 .equ	DDF1	= 1	; 
                                 .equ	DDF2	= 2	; 
                                 .equ	DDF3	= 3	; 
                                 .equ	DDF4	= 4	; 
                                 .equ	DDF5	= 5	; 
                                 .equ	DDF6	= 6	; 
                                 .equ	DDF7	= 7	; 
                                 
                                 ; PINF - Input Pins, Port F
                                 .equ	PINF0	= 0	; 
                                 .equ	PINF1	= 1	; 
                                 .equ	PINF2	= 2	; 
                                 .equ	PINF3	= 3	; 
                                 .equ	PINF4	= 4	; 
                                 .equ	PINF5	= 5	; 
                                 .equ	PINF6	= 6	; 
                                 .equ	PINF7	= 7	; 
                                 
                                 
                                 ; ***** PORTG ************************
                                 ; PORTG - Data Register, Port G
                                 .equ	PORTG0	= 0	; 
                                 .equ	PG0	= 0	; For compatibility
                                 .equ	PORTG1	= 1	; 
                                 .equ	PG1	= 1	; For compatibility
                                 .equ	PORTG2	= 2	; 
                                 .equ	PG2	= 2	; For compatibility
                                 .equ	PORTG3	= 3	; 
                                 .equ	PG3	= 3	; For compatibility
                                 .equ	PORTG4	= 4	; 
                                 .equ	PG4	= 4	; For compatibility
                                 .equ	PORTG5	= 5	; 
                                 .equ	PG5	= 5	; For compatibility
                                 
                                 ; DDRG - Data Direction Register, Port G
                                 .equ	DDG0	= 0	; 
                                 .equ	DDG1	= 1	; 
                                 .equ	DDG2	= 2	; 
                                 .equ	DDG3	= 3	; 
                                 .equ	DDG4	= 4	; 
                                 .equ	DDG5	= 5	; 
                                 
                                 ; PING - Input Pins, Port G
                                 .equ	PING0	= 0	; 
                                 .equ	PING1	= 1	; 
                                 .equ	PING2	= 2	; 
                                 .equ	PING3	= 3	; 
                                 .equ	PING4	= 4	; 
                                 .equ	PING5	= 5	; 
                                 
                                 
                                 ; ***** PORTH ************************
                                 ; PORTH - PORT H Data Register
                                 .equ	PORTH0	= 0	; PORT H Data Register bit 0
                                 .equ	PH0	= 0	; For compatibility
                                 .equ	PORTH1	= 1	; PORT H Data Register bit 1
                                 .equ	PH1	= 1	; For compatibility
                                 .equ	PORTH2	= 2	; PORT H Data Register bit 2
                                 .equ	PH2	= 2	; For compatibility
                                 .equ	PORTH3	= 3	; PORT H Data Register bit 3
                                 .equ	PH3	= 3	; For compatibility
                                 .equ	PORTH4	= 4	; PORT H Data Register bit 4
                                 .equ	PH4	= 4	; For compatibility
                                 .equ	PORTH5	= 5	; PORT H Data Register bit 5
                                 .equ	PH5	= 5	; For compatibility
                                 .equ	PORTH6	= 6	; PORT H Data Register bit 6
                                 .equ	PH6	= 6	; For compatibility
                                 .equ	PORTH7	= 7	; PORT H Data Register bit 7
                                 .equ	PH7	= 7	; For compatibility
                                 
                                 ; DDRH - PORT H Data Direction Register
                                 .equ	DDH0	= 0	; PORT H Data Direction Register bit 0
                                 .equ	DDH1	= 1	; PORT H Data Direction Register bit 1
                                 .equ	DDH2	= 2	; PORT H Data Direction Register bit 2
                                 .equ	DDH3	= 3	; PORT H Data Direction Register bit 3
                                 .equ	DDH4	= 4	; PORT H Data Direction Register bit 4
                                 .equ	DDH5	= 5	; PORT H Data Direction Register bit 5
                                 .equ	DDH6	= 6	; PORT H Data Direction Register bit 6
                                 .equ	DDH7	= 7	; PORT H Data Direction Register bit 7
                                 
                                 ; PINH - PORT H Input Pins
                                 .equ	PINH0	= 0	; PORT H Input Pins bit 0
                                 .equ	PINH1	= 1	; PORT H Input Pins bit 1
                                 .equ	PINH2	= 2	; PORT H Input Pins bit 2
                                 .equ	PINH3	= 3	; PORT H Input Pins bit 3
                                 .equ	PINH4	= 4	; PORT H Input Pins bit 4
                                 .equ	PINH5	= 5	; PORT H Input Pins bit 5
                                 .equ	PINH6	= 6	; PORT H Input Pins bit 6
                                 .equ	PINH7	= 7	; PORT H Input Pins bit 7
                                 
                                 
                                 ; ***** PORTJ ************************
                                 ; PORTJ - PORT J Data Register
                                 .equ	PORTJ0	= 0	; PORT J Data Register bit 0
                                 .equ	PJ0	= 0	; For compatibility
                                 .equ	PORTJ1	= 1	; PORT J Data Register bit 1
                                 .equ	PJ1	= 1	; For compatibility
                                 .equ	PORTJ2	= 2	; PORT J Data Register bit 2
                                 .equ	PJ2	= 2	; For compatibility
                                 .equ	PORTJ3	= 3	; PORT J Data Register bit 3
                                 .equ	PJ3	= 3	; For compatibility
                                 .equ	PORTJ4	= 4	; PORT J Data Register bit 4
                                 .equ	PJ4	= 4	; For compatibility
                                 .equ	PORTJ5	= 5	; PORT J Data Register bit 5
                                 .equ	PJ5	= 5	; For compatibility
                                 .equ	PORTJ6	= 6	; PORT J Data Register bit 6
                                 .equ	PJ6	= 6	; For compatibility
                                 .equ	PORTJ7	= 7	; PORT J Data Register bit 7
                                 .equ	PJ7	= 7	; For compatibility
                                 
                                 ; DDRJ - PORT J Data Direction Register
                                 .equ	DDJ0	= 0	; PORT J Data Direction Register bit 0
                                 .equ	DDJ1	= 1	; PORT J Data Direction Register bit 1
                                 .equ	DDJ2	= 2	; PORT J Data Direction Register bit 2
                                 .equ	DDJ3	= 3	; PORT J Data Direction Register bit 3
                                 .equ	DDJ4	= 4	; PORT J Data Direction Register bit 4
                                 .equ	DDJ5	= 5	; PORT J Data Direction Register bit 5
                                 .equ	DDJ6	= 6	; PORT J Data Direction Register bit 6
                                 .equ	DDJ7	= 7	; PORT J Data Direction Register bit 7
                                 
                                 ; PINJ - PORT J Input Pins
                                 .equ	PINJ0	= 0	; PORT J Input Pins bit 0
                                 .equ	PINJ1	= 1	; PORT J Input Pins bit 1
                                 .equ	PINJ2	= 2	; PORT J Input Pins bit 2
                                 .equ	PINJ3	= 3	; PORT J Input Pins bit 3
                                 .equ	PINJ4	= 4	; PORT J Input Pins bit 4
                                 .equ	PINJ5	= 5	; PORT J Input Pins bit 5
                                 .equ	PINJ6	= 6	; PORT J Input Pins bit 6
                                 .equ	PINJ7	= 7	; PORT J Input Pins bit 7
                                 
                                 
                                 ; ***** PORTK ************************
                                 ; PORTK - PORT K Data Register
                                 .equ	PORTK0	= 0	; PORT K Data Register bit 0
                                 .equ	PK0	= 0	; For compatibility
                                 .equ	PORTK1	= 1	; PORT K Data Register bit 1
                                 .equ	PK1	= 1	; For compatibility
                                 .equ	PORTK2	= 2	; PORT K Data Register bit 2
                                 .equ	PK2	= 2	; For compatibility
                                 .equ	PORTK3	= 3	; PORT K Data Register bit 3
                                 .equ	PK3	= 3	; For compatibility
                                 .equ	PORTK4	= 4	; PORT K Data Register bit 4
                                 .equ	PK4	= 4	; For compatibility
                                 .equ	PORTK5	= 5	; PORT K Data Register bit 5
                                 .equ	PK5	= 5	; For compatibility
                                 .equ	PORTK6	= 6	; PORT K Data Register bit 6
                                 .equ	PK6	= 6	; For compatibility
                                 .equ	PORTK7	= 7	; PORT K Data Register bit 7
                                 .equ	PK7	= 7	; For compatibility
                                 
                                 ; DDRK - PORT K Data Direction Register
                                 .equ	DDK0	= 0	; PORT K Data Direction Register bit 0
                                 .equ	DDK1	= 1	; PORT K Data Direction Register bit 1
                                 .equ	DDK2	= 2	; PORT K Data Direction Register bit 2
                                 .equ	DDK3	= 3	; PORT K Data Direction Register bit 3
                                 .equ	DDK4	= 4	; PORT K Data Direction Register bit 4
                                 .equ	DDK5	= 5	; PORT K Data Direction Register bit 5
                                 .equ	DDK6	= 6	; PORT K Data Direction Register bit 6
                                 .equ	DDK7	= 7	; PORT K Data Direction Register bit 7
                                 
                                 ; PINK - PORT K Input Pins
                                 .equ	PINK0	= 0	; PORT K Input Pins bit 0
                                 .equ	PINK1	= 1	; PORT K Input Pins bit 1
                                 .equ	PINK2	= 2	; PORT K Input Pins bit 2
                                 .equ	PINK3	= 3	; PORT K Input Pins bit 3
                                 .equ	PINK4	= 4	; PORT K Input Pins bit 4
                                 .equ	PINK5	= 5	; PORT K Input Pins bit 5
                                 .equ	PINK6	= 6	; PORT K Input Pins bit 6
                                 .equ	PINK7	= 7	; PORT K Input Pins bit 7
                                 
                                 
                                 ; ***** PORTL ************************
                                 ; PORTL - PORT L Data Register
                                 .equ	PORTL0	= 0	; PORT L Data Register bit 0
                                 .equ	PL0	= 0	; For compatibility
                                 .equ	PORTL1	= 1	; PORT L Data Register bit 1
                                 .equ	PL1	= 1	; For compatibility
                                 .equ	PORTL2	= 2	; PORT L Data Register bit 2
                                 .equ	PL2	= 2	; For compatibility
                                 .equ	PORTL3	= 3	; PORT L Data Register bit 3
                                 .equ	PL3	= 3	; For compatibility
                                 .equ	PORTL4	= 4	; PORT L Data Register bit 4
                                 .equ	PL4	= 4	; For compatibility
                                 .equ	PORTL5	= 5	; PORT L Data Register bit 5
                                 .equ	PL5	= 5	; For compatibility
                                 .equ	PORTL6	= 6	; PORT L Data Register bit 6
                                 .equ	PL6	= 6	; For compatibility
                                 .equ	PORTL7	= 7	; PORT L Data Register bit 7
                                 .equ	PL7	= 7	; For compatibility
                                 
                                 ; DDRL - PORT L Data Direction Register
                                 .equ	DDL0	= 0	; PORT L Data Direction Register bit 0
                                 .equ	DDL1	= 1	; PORT L Data Direction Register bit 1
                                 .equ	DDL2	= 2	; PORT L Data Direction Register bit 2
                                 .equ	DDL3	= 3	; PORT L Data Direction Register bit 3
                                 .equ	DDL4	= 4	; PORT L Data Direction Register bit 4
                                 .equ	DDL5	= 5	; PORT L Data Direction Register bit 5
                                 .equ	DDL6	= 6	; PORT L Data Direction Register bit 6
                                 .equ	DDL7	= 7	; PORT L Data Direction Register bit 7
                                 
                                 ; PINL - PORT L Input Pins
                                 .equ	PINL0	= 0	; PORT L Input Pins bit 0
                                 .equ	PINL1	= 1	; PORT L Input Pins bit 1
                                 .equ	PINL2	= 2	; PORT L Input Pins bit 2
                                 .equ	PINL3	= 3	; PORT L Input Pins bit 3
                                 .equ	PINL4	= 4	; PORT L Input Pins bit 4
                                 .equ	PINL5	= 5	; PORT L Input Pins bit 5
                                 .equ	PINL6	= 6	; PORT L Input Pins bit 6
                                 .equ	PINL7	= 7	; PORT L Input Pins bit 7
                                 
                                 
                                 ; ***** TIMER_COUNTER_0 **************
                                 ; TIMSK0 - Timer/Counter0 Interrupt Mask Register
                                 .equ	TOIE0	= 0	; Timer/Counter0 Overflow Interrupt Enable
                                 .equ	OCIE0A	= 1	; Timer/Counter0 Output Compare Match A Interrupt Enable
                                 .equ	OCIE0B	= 2	; Timer/Counter0 Output Compare Match B Interrupt Enable
                                 
                                 ; TIFR0 - Timer/Counter0 Interrupt Flag register
                                 .equ	TOV0	= 0	; Timer/Counter0 Overflow Flag
                                 .equ	OCF0A	= 1	; Timer/Counter0 Output Compare Flag 0A
                                 .equ	OCF0B	= 2	; Timer/Counter0 Output Compare Flag 0B
                                 
                                 ; TCCR0A - Timer/Counter  Control Register A
                                 .equ	WGM00	= 0	; Waveform Generation Mode
                                 .equ	WGM01	= 1	; Waveform Generation Mode
                                 .equ	COM0B0	= 4	; Compare Output Mode, Fast PWm
                                 .equ	COM0B1	= 5	; Compare Output Mode, Fast PWm
                                 .equ	COM0A0	= 6	; Compare Output Mode, Phase Correct PWM Mode
                                 .equ	COM0A1	= 7	; Compare Output Mode, Phase Correct PWM Mode
                                 
                                 ; TCCR0B - Timer/Counter Control Register B
                                 .equ	CS00	= 0	; Clock Select
                                 .equ	CS01	= 1	; Clock Select
                                 .equ	CS02	= 2	; Clock Select
                                 .equ	WGM02	= 3	; 
                                 .equ	FOC0B	= 6	; Force Output Compare B
                                 .equ	FOC0A	= 7	; Force Output Compare A
                                 
                                 ; TCNT0 - Timer/Counter0
                                 .equ	TCNT0_0	= 0	; 
                                 .equ	TCNT0_1	= 1	; 
                                 .equ	TCNT0_2	= 2	; 
                                 .equ	TCNT0_3	= 3	; 
                                 .equ	TCNT0_4	= 4	; 
                                 .equ	TCNT0_5	= 5	; 
                                 .equ	TCNT0_6	= 6	; 
                                 .equ	TCNT0_7	= 7	; 
                                 
                                 ; OCR0A - Timer/Counter0 Output Compare Register
                                 .equ	OCR0A_0	= 0	; 
                                 .equ	OCR0A_1	= 1	; 
                                 .equ	OCR0A_2	= 2	; 
                                 .equ	OCR0A_3	= 3	; 
                                 .equ	OCR0A_4	= 4	; 
                                 .equ	OCR0A_5	= 5	; 
                                 .equ	OCR0A_6	= 6	; 
                                 .equ	OCR0A_7	= 7	; 
                                 
                                 ; OCR0B - Timer/Counter0 Output Compare Register
                                 .equ	OCR0B_0	= 0	; 
                                 .equ	OCR0B_1	= 1	; 
                                 .equ	OCR0B_2	= 2	; 
                                 .equ	OCR0B_3	= 3	; 
                                 .equ	OCR0B_4	= 4	; 
                                 .equ	OCR0B_5	= 5	; 
                                 .equ	OCR0B_6	= 6	; 
                                 .equ	OCR0B_7	= 7	; 
                                 
                                 ; GTCCR - General Timer/Counter Control Register
                                 .equ	PSRSYNC	= 0	; Prescaler Reset Timer/Counter1 and Timer/Counter0
                                 .equ	PSR10	= PSRSYNC	; For compatibility
                                 .equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 
                                 ; ***** TIMER_COUNTER_2 **************
                                 ; TIMSK2 - Timer/Counter Interrupt Mask register
                                 .equ	TOIE2	= 0	; Timer/Counter2 Overflow Interrupt Enable
                                 .equ	TOIE2A	= TOIE2	; For compatibility
                                 .equ	OCIE2A	= 1	; Timer/Counter2 Output Compare Match A Interrupt Enable
                                 .equ	OCIE2B	= 2	; Timer/Counter2 Output Compare Match B Interrupt Enable
                                 
                                 ; TIFR2 - Timer/Counter Interrupt Flag Register
                                 .equ	TOV2	= 0	; Timer/Counter2 Overflow Flag
                                 .equ	OCF2A	= 1	; Output Compare Flag 2A
                                 .equ	OCF2B	= 2	; Output Compare Flag 2B
                                 
                                 ; TCCR2A - Timer/Counter2 Control Register A
                                 .equ	WGM20	= 0	; Waveform Genration Mode
                                 .equ	WGM21	= 1	; Waveform Genration Mode
                                 .equ	COM2B0	= 4	; Compare Output Mode bit 0
                                 .equ	COM2B1	= 5	; Compare Output Mode bit 1
                                 .equ	COM2A0	= 6	; Compare Output Mode bit 1
                                 .equ	COM2A1	= 7	; Compare Output Mode bit 1
                                 
                                 ; TCCR2B - Timer/Counter2 Control Register B
                                 .equ	CS20	= 0	; Clock Select bit 0
                                 .equ	CS21	= 1	; Clock Select bit 1
                                 .equ	CS22	= 2	; Clock Select bit 2
                                 .equ	WGM22	= 3	; Waveform Generation Mode
                                 .equ	FOC2B	= 6	; Force Output Compare B
                                 .equ	FOC2A	= 7	; Force Output Compare A
                                 
                                 ; TCNT2 - Timer/Counter2
                                 .equ	TCNT2_0	= 0	; Timer/Counter 2 bit 0
                                 .equ	TCNT2_1	= 1	; Timer/Counter 2 bit 1
                                 .equ	TCNT2_2	= 2	; Timer/Counter 2 bit 2
                                 .equ	TCNT2_3	= 3	; Timer/Counter 2 bit 3
                                 .equ	TCNT2_4	= 4	; Timer/Counter 2 bit 4
                                 .equ	TCNT2_5	= 5	; Timer/Counter 2 bit 5
                                 .equ	TCNT2_6	= 6	; Timer/Counter 2 bit 6
                                 .equ	TCNT2_7	= 7	; Timer/Counter 2 bit 7
                                 
                                 ; OCR2A - Timer/Counter2 Output Compare Register A
                                 .equ	OCR2A_0	= 0	; Timer/Counter2 Output Compare Register Bit 0
                                 .equ	OCR2A_1	= 1	; Timer/Counter2 Output Compare Register Bit 1
                                 .equ	OCR2A_2	= 2	; Timer/Counter2 Output Compare Register Bit 2
                                 .equ	OCR2A_3	= 3	; Timer/Counter2 Output Compare Register Bit 3
                                 .equ	OCR2A_4	= 4	; Timer/Counter2 Output Compare Register Bit 4
                                 .equ	OCR2A_5	= 5	; Timer/Counter2 Output Compare Register Bit 5
                                 .equ	OCR2A_6	= 6	; Timer/Counter2 Output Compare Register Bit 6
                                 .equ	OCR2A_7	= 7	; Timer/Counter2 Output Compare Register Bit 7
                                 
                                 ; OCR2B - Timer/Counter2 Output Compare Register B
                                 .equ	OCR2B_0	= 0	; Timer/Counter2 Output Compare Register Bit 0
                                 .equ	OCR2B_1	= 1	; Timer/Counter2 Output Compare Register Bit 1
                                 .equ	OCR2B_2	= 2	; Timer/Counter2 Output Compare Register Bit 2
                                 .equ	OCR2B_3	= 3	; Timer/Counter2 Output Compare Register Bit 3
                                 .equ	OCR2B_4	= 4	; Timer/Counter2 Output Compare Register Bit 4
                                 .equ	OCR2B_5	= 5	; Timer/Counter2 Output Compare Register Bit 5
                                 .equ	OCR2B_6	= 6	; Timer/Counter2 Output Compare Register Bit 6
                                 .equ	OCR2B_7	= 7	; Timer/Counter2 Output Compare Register Bit 7
                                 
                                 ; ASSR - Asynchronous Status Register
                                 .equ	TCR2BUB	= 0	; Timer/Counter Control Register2 Update Busy
                                 .equ	TCR2AUB	= 1	; Timer/Counter Control Register2 Update Busy
                                 .equ	OCR2BUB	= 2	; Output Compare Register 2 Update Busy
                                 .equ	OCR2AUB	= 3	; Output Compare Register2 Update Busy
                                 .equ	TCN2UB	= 4	; Timer/Counter2 Update Busy
                                 .equ	AS2	= 5	; Asynchronous Timer/Counter2
                                 .equ	EXCLK	= 6	; Enable External Clock Input
                                 
                                 ; GTCCR - General Timer Counter Control register
                                 .equ	PSRASY	= 1	; Prescaler Reset Timer/Counter2
                                 .equ	PSR2	= PSRASY	; For compatibility
                                 ;.equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 
                                 ; ***** WATCHDOG *********************
                                 ; WDTCSR - Watchdog Timer Control Register
                                 .equ	WDP0	= 0	; Watch Dog Timer Prescaler bit 0
                                 .equ	WDP1	= 1	; Watch Dog Timer Prescaler bit 1
                                 .equ	WDP2	= 2	; Watch Dog Timer Prescaler bit 2
                                 .equ	WDE	= 3	; Watch Dog Enable
                                 .equ	WDCE	= 4	; Watchdog Change Enable
                                 .equ	WDP3	= 5	; Watchdog Timer Prescaler Bit 3
                                 .equ	WDIE	= 6	; Watchdog Timeout Interrupt Enable
                                 .equ	WDIF	= 7	; Watchdog Timeout Interrupt Flag
                                 
                                 
                                 ; ***** USART1 ***********************
                                 ; UDR1 - USART I/O Data Register
                                 .equ	UDR1_0	= 0	; USART I/O Data Register bit 0
                                 .equ	UDR1_1	= 1	; USART I/O Data Register bit 1
                                 .equ	UDR1_2	= 2	; USART I/O Data Register bit 2
                                 .equ	UDR1_3	= 3	; USART I/O Data Register bit 3
                                 .equ	UDR1_4	= 4	; USART I/O Data Register bit 4
                                 .equ	UDR1_5	= 5	; USART I/O Data Register bit 5
                                 .equ	UDR1_6	= 6	; USART I/O Data Register bit 6
                                 .equ	UDR1_7	= 7	; USART I/O Data Register bit 7
                                 
                                 ; UCSR1A - USART Control and Status Register A
                                 .equ	MPCM1	= 0	; Multi-processor Communication Mode
                                 .equ	U2X1	= 1	; Double the USART transmission speed
                                 .equ	UPE1	= 2	; Parity Error
                                 .equ	DOR1	= 3	; Data overRun
                                 .equ	FE1	= 4	; Framing Error
                                 .equ	UDRE1	= 5	; USART Data Register Empty
                                 .equ	TXC1	= 6	; USART Transmitt Complete
                                 .equ	RXC1	= 7	; USART Receive Complete
                                 
                                 ; UCSR1B - USART Control and Status Register B
                                 .equ	TXB81	= 0	; Transmit Data Bit 8
                                 .equ	RXB81	= 1	; Receive Data Bit 8
                                 .equ	UCSZ12	= 2	; Character Size
                                 .equ	TXEN1	= 3	; Transmitter Enable
                                 .equ	RXEN1	= 4	; Receiver Enable
                                 .equ	UDRIE1	= 5	; USART Data register Empty Interrupt Enable
                                 .equ	TXCIE1	= 6	; TX Complete Interrupt Enable
                                 .equ	RXCIE1	= 7	; RX Complete Interrupt Enable
                                 
                                 ; UCSR1C - USART Control and Status Register C
                                 .equ	UCPOL1	= 0	; Clock Polarity
                                 .equ	UCSZ10	= 1	; Character Size
                                 .equ	UCPHA1	= UCSZ10	; For compatibility
                                 .equ	UCSZ11	= 2	; Character Size
                                 .equ	UDORD1	= UCSZ11	; For compatibility
                                 .equ	USBS1	= 3	; Stop Bit Select
                                 .equ	UPM10	= 4	; Parity Mode Bit 0
                                 .equ	UPM11	= 5	; Parity Mode Bit 1
                                 .equ	UMSEL10	= 6	; USART Mode Select
                                 .equ	UMSEL11	= 7	; USART Mode Select
                                 
                                 ; UBRR1H - USART Baud Rate Register High Byte
                                 .equ	UBRR_8	= 0	; USART Baud Rate Register bit 8
                                 .equ	UBRR_9	= 1	; USART Baud Rate Register bit 9
                                 .equ	UBRR_10	= 2	; USART Baud Rate Register bit 10
                                 .equ	UBRR_11	= 3	; USART Baud Rate Register bit 11
                                 
                                 ; UBRR1L - USART Baud Rate Register Low Byte
                                 .equ	UBRR_0	= 0	; USART Baud Rate Register bit 0
                                 .equ	UBRR_1	= 1	; USART Baud Rate Register bit 1
                                 .equ	UBRR_2	= 2	; USART Baud Rate Register bit 2
                                 .equ	UBRR_3	= 3	; USART Baud Rate Register bit 3
                                 .equ	UBRR_4	= 4	; USART Baud Rate Register bit 4
                                 .equ	UBRR_5	= 5	; USART Baud Rate Register bit 5
                                 .equ	UBRR_6	= 6	; USART Baud Rate Register bit 6
                                 .equ	UBRR_7	= 7	; USART Baud Rate Register bit 7
                                 
                                 
                                 ; ***** EEPROM ***********************
                                 ; EEARH - EEPROM Address Register Low Byte
                                 .equ	EEAR8	= 0	; EEPROM Read/Write Access Bit 8
                                 .equ	EEAR9	= 1	; EEPROM Read/Write Access Bit 9
                                 .equ	EEAR10	= 2	; EEPROM Read/Write Access Bit 10
                                 .equ	EEAR11	= 3	; EEPROM Read/Write Access Bit 11
                                 
                                 ; EEARL - EEPROM Address Register Low Byte
                                 .equ	EEAR0	= 0	; EEPROM Read/Write Access Bit 0
                                 .equ	EEAR1	= 1	; EEPROM Read/Write Access Bit 1
                                 .equ	EEAR2	= 2	; EEPROM Read/Write Access Bit 2
                                 .equ	EEAR3	= 3	; EEPROM Read/Write Access Bit 3
                                 .equ	EEAR4	= 4	; EEPROM Read/Write Access Bit 4
                                 .equ	EEAR5	= 5	; EEPROM Read/Write Access Bit 5
                                 .equ	EEAR6	= 6	; EEPROM Read/Write Access Bit 6
                                 .equ	EEAR7	= 7	; EEPROM Read/Write Access Bit 7
                                 
                                 ; EEDR - EEPROM Data Register
                                 .equ	EEDR0	= 0	; EEPROM Data Register bit 0
                                 .equ	EEDR1	= 1	; EEPROM Data Register bit 1
                                 .equ	EEDR2	= 2	; EEPROM Data Register bit 2
                                 .equ	EEDR3	= 3	; EEPROM Data Register bit 3
                                 .equ	EEDR4	= 4	; EEPROM Data Register bit 4
                                 .equ	EEDR5	= 5	; EEPROM Data Register bit 5
                                 .equ	EEDR6	= 6	; EEPROM Data Register bit 6
                                 .equ	EEDR7	= 7	; EEPROM Data Register bit 7
                                 
                                 ; EECR - EEPROM Control Register
                                 .equ	EERE	= 0	; EEPROM Read Enable
                                 .equ	EEPE	= 1	; EEPROM Write Enable
                                 .equ	EEMPE	= 2	; EEPROM Master Write Enable
                                 .equ	EERIE	= 3	; EEPROM Ready Interrupt Enable
                                 .equ	EEPM0	= 4	; EEPROM Programming Mode Bit 0
                                 .equ	EEPM1	= 5	; EEPROM Programming Mode Bit 1
                                 
                                 
                                 ; ***** TIMER_COUNTER_5 **************
                                 ; TIMSK5 - Timer/Counter5 Interrupt Mask Register
                                 .equ	TOIE5	= 0	; Timer/Counter5 Overflow Interrupt Enable
                                 .equ	OCIE5A	= 1	; Timer/Counter5 Output Compare A Match Interrupt Enable
                                 .equ	OCIE5B	= 2	; Timer/Counter5 Output Compare B Match Interrupt Enable
                                 .equ	OCIE5C	= 3	; Timer/Counter5 Output Compare C Match Interrupt Enable
                                 .equ	ICIE5	= 5	; Timer/Counter5 Input Capture Interrupt Enable
                                 
                                 ; TIFR5 - Timer/Counter5 Interrupt Flag register
                                 .equ	TOV5	= 0	; Timer/Counter5 Overflow Flag
                                 .equ	OCF5A	= 1	; Output Compare Flag 5A
                                 .equ	OCF5B	= 2	; Output Compare Flag 5B
                                 .equ	OCF5C	= 3	; Output Compare Flag 5C
                                 .equ	ICF5	= 5	; Input Capture Flag 5
                                 
                                 ; TCCR5A - Timer/Counter5 Control Register A
                                 .equ	WGM50	= 0	; Waveform Generation Mode
                                 .equ	WGM51	= 1	; Waveform Generation Mode
                                 .equ	COM5C0	= 2	; Compare Output Mode 5C, bit 0
                                 .equ	COM5C1	= 3	; Compare Output Mode 5C, bit 1
                                 .equ	COM5B0	= 4	; Compare Output Mode 5B, bit 0
                                 .equ	COM5B1	= 5	; Compare Output Mode 5B, bit 1
                                 .equ	COM5A0	= 6	; Compare Output Mode 5A, bit 0
                                 .equ	COM5A1	= 7	; Compare Output Mode 1A, bit 1
                                 
                                 ; TCCR5B - Timer/Counter5 Control Register B
                                 .equ	CS50	= 0	; Prescaler source of Timer/Counter 5
                                 .equ	CS51	= 1	; Prescaler source of Timer/Counter 5
                                 .equ	CS52	= 2	; Prescaler source of Timer/Counter 5
                                 .equ	WGM52	= 3	; Waveform Generation Mode
                                 .equ	WGM53	= 4	; Waveform Generation Mode
                                 .equ	ICES5	= 6	; Input Capture 5 Edge Select
                                 .equ	ICNC5	= 7	; Input Capture 5 Noise Canceler
                                 
                                 ; TCCR5C - Timer/Counter 5 Control Register C
                                 .equ	FOC5C	= 5	; Force Output Compare 5C
                                 .equ	FOC5B	= 6	; Force Output Compare 5B
                                 .equ	FOC5A	= 7	; Force Output Compare 5A
                                 
                                 ; ICR5H - Timer/Counter5 Input Capture Register High Byte
                                 .equ	ICR5H0	= 0	; Timer/Counter5 Input Capture Register High Byte bit 0
                                 .equ	ICR5H1	= 1	; Timer/Counter5 Input Capture Register High Byte bit 1
                                 .equ	ICR5H2	= 2	; Timer/Counter5 Input Capture Register High Byte bit 2
                                 .equ	ICR5H3	= 3	; Timer/Counter5 Input Capture Register High Byte bit 3
                                 .equ	ICR5H4	= 4	; Timer/Counter5 Input Capture Register High Byte bit 4
                                 .equ	ICR5H5	= 5	; Timer/Counter5 Input Capture Register High Byte bit 5
                                 .equ	ICR5H6	= 6	; Timer/Counter5 Input Capture Register High Byte bit 6
                                 .equ	ICR5H7	= 7	; Timer/Counter5 Input Capture Register High Byte bit 7
                                 
                                 ; ICR5L - Timer/Counter5 Input Capture Register Low Byte
                                 .equ	ICR5L0	= 0	; Timer/Counter5 Input Capture Register Low Byte bit 0
                                 .equ	ICR5L1	= 1	; Timer/Counter5 Input Capture Register Low Byte bit 1
                                 .equ	ICR5L2	= 2	; Timer/Counter5 Input Capture Register Low Byte bit 2
                                 .equ	ICR5L3	= 3	; Timer/Counter5 Input Capture Register Low Byte bit 3
                                 .equ	ICR5L4	= 4	; Timer/Counter5 Input Capture Register Low Byte bit 4
                                 .equ	ICR5L5	= 5	; Timer/Counter5 Input Capture Register Low Byte bit 5
                                 .equ	ICR5L6	= 6	; Timer/Counter5 Input Capture Register Low Byte bit 6
                                 .equ	ICR5L7	= 7	; Timer/Counter5 Input Capture Register Low Byte bit 7
                                 
                                 
                                 ; ***** TIMER_COUNTER_4 **************
                                 ; TIMSK4 - Timer/Counter4 Interrupt Mask Register
                                 .equ	TOIE4	= 0	; Timer/Counter4 Overflow Interrupt Enable
                                 .equ	OCIE4A	= 1	; Timer/Counter4 Output Compare A Match Interrupt Enable
                                 .equ	OCIE4B	= 2	; Timer/Counter4 Output Compare B Match Interrupt Enable
                                 .equ	OCIE4C	= 3	; Timer/Counter4 Output Compare C Match Interrupt Enable
                                 .equ	ICIE4	= 5	; Timer/Counter4 Input Capture Interrupt Enable
                                 
                                 ; TIFR4 - Timer/Counter4 Interrupt Flag register
                                 .equ	TOV4	= 0	; Timer/Counter4 Overflow Flag
                                 .equ	OCF4A	= 1	; Output Compare Flag 4A
                                 .equ	OCF4B	= 2	; Output Compare Flag 4B
                                 .equ	OCF4C	= 3	; Output Compare Flag 4C
                                 .equ	ICF4	= 5	; Input Capture Flag 4
                                 
                                 ; TCCR4A - Timer/Counter4 Control Register A
                                 .equ	WGM40	= 0	; Waveform Generation Mode
                                 .equ	WGM41	= 1	; Waveform Generation Mode
                                 .equ	COM4C0	= 2	; Compare Output Mode 4C, bit 0
                                 .equ	COM4C1	= 3	; Compare Output Mode 4C, bit 1
                                 .equ	COM4B0	= 4	; Compare Output Mode 4B, bit 0
                                 .equ	COM4B1	= 5	; Compare Output Mode 4B, bit 1
                                 .equ	COM4A0	= 6	; Compare Output Mode 4A, bit 0
                                 .equ	COM4A1	= 7	; Compare Output Mode 1A, bit 1
                                 
                                 ; TCCR4B - Timer/Counter4 Control Register B
                                 .equ	CS40	= 0	; Prescaler source of Timer/Counter 4
                                 .equ	CS41	= 1	; Prescaler source of Timer/Counter 4
                                 .equ	CS42	= 2	; Prescaler source of Timer/Counter 4
                                 .equ	WGM42	= 3	; Waveform Generation Mode
                                 .equ	WGM43	= 4	; Waveform Generation Mode
                                 .equ	ICES4	= 6	; Input Capture 4 Edge Select
                                 .equ	ICNC4	= 7	; Input Capture 4 Noise Canceler
                                 
                                 ; TCCR4C - Timer/Counter 4 Control Register C
                                 .equ	FOC4C	= 5	; Force Output Compare 4C
                                 .equ	FOC4B	= 6	; Force Output Compare 4B
                                 .equ	FOC4A	= 7	; Force Output Compare 4A
                                 
                                 
                                 ; ***** TIMER_COUNTER_3 **************
                                 ; TIMSK3 - Timer/Counter3 Interrupt Mask Register
                                 .equ	TOIE3	= 0	; Timer/Counter3 Overflow Interrupt Enable
                                 .equ	OCIE3A	= 1	; Timer/Counter3 Output Compare A Match Interrupt Enable
                                 .equ	OCIE3B	= 2	; Timer/Counter3 Output Compare B Match Interrupt Enable
                                 .equ	OCIE3C	= 3	; Timer/Counter3 Output Compare C Match Interrupt Enable
                                 .equ	ICIE3	= 5	; Timer/Counter3 Input Capture Interrupt Enable
                                 
                                 ; TIFR3 - Timer/Counter3 Interrupt Flag register
                                 .equ	TOV3	= 0	; Timer/Counter3 Overflow Flag
                                 .equ	OCF3A	= 1	; Output Compare Flag 3A
                                 .equ	OCF3B	= 2	; Output Compare Flag 3B
                                 .equ	OCF3C	= 3	; Output Compare Flag 3C
                                 .equ	ICF3	= 5	; Input Capture Flag 3
                                 
                                 ; TCCR3A - Timer/Counter3 Control Register A
                                 .equ	WGM30	= 0	; Waveform Generation Mode
                                 .equ	WGM31	= 1	; Waveform Generation Mode
                                 .equ	COM3C0	= 2	; Compare Output Mode 3C, bit 0
                                 .equ	COM3C1	= 3	; Compare Output Mode 3C, bit 1
                                 .equ	COM3B0	= 4	; Compare Output Mode 3B, bit 0
                                 .equ	COM3B1	= 5	; Compare Output Mode 3B, bit 1
                                 .equ	COM3A0	= 6	; Compare Output Mode 3A, bit 0
                                 .equ	COM3A1	= 7	; Compare Output Mode 1A, bit 1
                                 
                                 ; TCCR3B - Timer/Counter3 Control Register B
                                 .equ	CS30	= 0	; Prescaler source of Timer/Counter 3
                                 .equ	CS31	= 1	; Prescaler source of Timer/Counter 3
                                 .equ	CS32	= 2	; Prescaler source of Timer/Counter 3
                                 .equ	WGM32	= 3	; Waveform Generation Mode
                                 .equ	WGM33	= 4	; Waveform Generation Mode
                                 .equ	ICES3	= 6	; Input Capture 3 Edge Select
                                 .equ	ICNC3	= 7	; Input Capture 3 Noise Canceler
                                 
                                 ; TCCR3C - Timer/Counter 3 Control Register C
                                 .equ	FOC3C	= 5	; Force Output Compare 3C
                                 .equ	FOC3B	= 6	; Force Output Compare 3B
                                 .equ	FOC3A	= 7	; Force Output Compare 3A
                                 
                                 
                                 ; ***** TIMER_COUNTER_1 **************
                                 ; TIMSK1 - Timer/Counter1 Interrupt Mask Register
                                 .equ	TOIE1	= 0	; Timer/Counter1 Overflow Interrupt Enable
                                 .equ	OCIE1A	= 1	; Timer/Counter1 Output Compare A Match Interrupt Enable
                                 .equ	OCIE1B	= 2	; Timer/Counter1 Output Compare B Match Interrupt Enable
                                 .equ	OCIE1C	= 3	; Timer/Counter1 Output Compare C Match Interrupt Enable
                                 .equ	ICIE1	= 5	; Timer/Counter1 Input Capture Interrupt Enable
                                 
                                 ; TIFR1 - Timer/Counter1 Interrupt Flag register
                                 .equ	TOV1	= 0	; Timer/Counter1 Overflow Flag
                                 .equ	OCF1A	= 1	; Output Compare Flag 1A
                                 .equ	OCF1B	= 2	; Output Compare Flag 1B
                                 .equ	OCF1C	= 3	; Output Compare Flag 1C
                                 .equ	ICF1	= 5	; Input Capture Flag 1
                                 
                                 ; TCCR1A - Timer/Counter1 Control Register A
                                 .equ	WGM10	= 0	; Waveform Generation Mode
                                 .equ	WGM11	= 1	; Waveform Generation Mode
                                 .equ	COM1C0	= 2	; Compare Output Mode 1C, bit 0
                                 .equ	COM1C1	= 3	; Compare Output Mode 1C, bit 1
                                 .equ	COM1B0	= 4	; Compare Output Mode 1B, bit 0
                                 .equ	COM1B1	= 5	; Compare Output Mode 1B, bit 1
                                 .equ	COM1A0	= 6	; Compare Output Mode 1A, bit 0
                                 .equ	COM1A1	= 7	; Compare Output Mode 1A, bit 1
                                 
                                 ; TCCR1B - Timer/Counter1 Control Register B
                                 .equ	CS10	= 0	; Prescaler source of Timer/Counter 1
                                 .equ	CS11	= 1	; Prescaler source of Timer/Counter 1
                                 .equ	CS12	= 2	; Prescaler source of Timer/Counter 1
                                 .equ	WGM12	= 3	; Waveform Generation Mode
                                 .equ	WGM13	= 4	; Waveform Generation Mode
                                 .equ	ICES1	= 6	; Input Capture 1 Edge Select
                                 .equ	ICNC1	= 7	; Input Capture 1 Noise Canceler
                                 
                                 ; TCCR1C - Timer/Counter 1 Control Register C
                                 .equ	FOC1C	= 5	; Force Output Compare 1C
                                 .equ	FOC1B	= 6	; Force Output Compare 1B
                                 .equ	FOC1A	= 7	; Force Output Compare 1A
                                 
                                 
                                 ; ***** JTAG *************************
                                 ; OCDR - On-Chip Debug Related Register in I/O Memory
                                 .equ	OCDR0	= 0	; On-Chip Debug Register Bit 0
                                 .equ	OCDR1	= 1	; On-Chip Debug Register Bit 1
                                 .equ	OCDR2	= 2	; On-Chip Debug Register Bit 2
                                 .equ	OCDR3	= 3	; On-Chip Debug Register Bit 3
                                 .equ	OCDR4	= 4	; On-Chip Debug Register Bit 4
                                 .equ	OCDR5	= 5	; On-Chip Debug Register Bit 5
                                 .equ	OCDR6	= 6	; On-Chip Debug Register Bit 6
                                 .equ	OCDR7	= 7	; On-Chip Debug Register Bit 7
                                 .equ	IDRD	= OCDR7	; For compatibility
                                 
                                 ; MCUCR - MCU Control Register
                                 .equ	JTD	= 7	; JTAG Interface Disable
                                 
                                 ; MCUSR - MCU Status Register
                                 .equ	JTRF	= 4	; JTAG Reset Flag
                                 
                                 
                                 ; ***** EXTERNAL_INTERRUPT ***********
                                 ; EICRA - External Interrupt Control Register A
                                 .equ	ISC00	= 0	; External Interrupt Sense Control Bit
                                 .equ	ISC01	= 1	; External Interrupt Sense Control Bit
                                 .equ	ISC10	= 2	; External Interrupt Sense Control Bit
                                 .equ	ISC11	= 3	; External Interrupt Sense Control Bit
                                 .equ	ISC20	= 4	; External Interrupt Sense Control Bit
                                 .equ	ISC21	= 5	; External Interrupt Sense Control Bit
                                 .equ	ISC30	= 6	; External Interrupt Sense Control Bit
                                 .equ	ISC31	= 7	; External Interrupt Sense Control Bit
                                 
                                 ; EICRB - External Interrupt Control Register B
                                 .equ	ISC40	= 0	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC41	= 1	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC50	= 2	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC51	= 3	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC60	= 4	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC61	= 5	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC70	= 6	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC71	= 7	; External Interrupt 7-4 Sense Control Bit
                                 
                                 ; EIMSK - External Interrupt Mask Register
                                 .equ	INT0	= 0	; External Interrupt Request 0 Enable
                                 .equ	INT1	= 1	; External Interrupt Request 1 Enable
                                 .equ	INT2	= 2	; External Interrupt Request 2 Enable
                                 .equ	INT3	= 3	; External Interrupt Request 3 Enable
                                 .equ	INT4	= 4	; External Interrupt Request 4 Enable
                                 .equ	INT5	= 5	; External Interrupt Request 5 Enable
                                 .equ	INT6	= 6	; External Interrupt Request 6 Enable
                                 .equ	INT7	= 7	; External Interrupt Request 7 Enable
                                 
                                 ; EIFR - External Interrupt Flag Register
                                 .equ	INTF0	= 0	; External Interrupt Flag 0
                                 .equ	INTF1	= 1	; External Interrupt Flag 1
                                 .equ	INTF2	= 2	; External Interrupt Flag 2
                                 .equ	INTF3	= 3	; External Interrupt Flag 3
                                 .equ	INTF4	= 4	; External Interrupt Flag 4
                                 .equ	INTF5	= 5	; External Interrupt Flag 5
                                 .equ	INTF6	= 6	; External Interrupt Flag 6
                                 .equ	INTF7	= 7	; External Interrupt Flag 7
                                 
                                 ; PCICR - Pin Change Interrupt Control Register
                                 .equ	PCIE0	= 0	; Pin Change Interrupt Enable 0
                                 .equ	PCIE1	= 1	; Pin Change Interrupt Enable 1
                                 .equ	PCIE2	= 2	; Pin Change Interrupt Enable 2
                                 
                                 ; PCIFR - Pin Change Interrupt Flag Register
                                 .equ	PCIF0	= 0	; Pin Change Interrupt Flag 0
                                 .equ	PCIF1	= 1	; Pin Change Interrupt Flag 1
                                 .equ	PCIF2	= 2	; Pin Change Interrupt Flag 2
                                 
                                 ; PCMSK2 - Pin Change Mask Register 2
                                 .equ	PCINT16	= 0	; Pin Change Enable Mask 16
                                 .equ	PCINT17	= 1	; Pin Change Enable Mask 17
                                 .equ	PCINT18	= 2	; Pin Change Enable Mask 18
                                 .equ	PCINT19	= 3	; Pin Change Enable Mask 19
                                 .equ	PCINT20	= 4	; Pin Change Enable Mask 20
                                 .equ	PCINT21	= 5	; Pin Change Enable Mask 21
                                 .equ	PCINT22	= 6	; Pin Change Enable Mask 22
                                 .equ	PCINT23	= 7	; Pin Change Enable Mask 23
                                 
                                 ; PCMSK1 - Pin Change Mask Register 1
                                 .equ	PCINT8	= 0	; Pin Change Enable Mask 8
                                 .equ	PCINT9	= 1	; Pin Change Enable Mask 9
                                 .equ	PCINT10	= 2	; Pin Change Enable Mask 10
                                 .equ	PCINT11	= 3	; Pin Change Enable Mask 11
                                 .equ	PCINT12	= 4	; Pin Change Enable Mask 12
                                 .equ	PCINT13	= 5	; Pin Change Enable Mask 13
                                 .equ	PCINT14	= 6	; Pin Change Enable Mask 14
                                 .equ	PCINT15	= 7	; Pin Change Enable Mask 15
                                 
                                 ; PCMSK0 - Pin Change Mask Register 0
                                 .equ	PCINT0	= 0	; Pin Change Enable Mask 0
                                 .equ	PCINT1	= 1	; Pin Change Enable Mask 1
                                 .equ	PCINT2	= 2	; Pin Change Enable Mask 2
                                 .equ	PCINT3	= 3	; Pin Change Enable Mask 3
                                 .equ	PCINT4	= 4	; Pin Change Enable Mask 4
                                 .equ	PCINT5	= 5	; Pin Change Enable Mask 5
                                 .equ	PCINT6	= 6	; Pin Change Enable Mask 6
                                 .equ	PCINT7	= 7	; Pin Change Enable Mask 7
                                 
                                 
                                 ; ***** CPU **************************
                                 ; SREG - Status Register
                                 .equ	SREG_C	= 0	; Carry Flag
                                 .equ	SREG_Z	= 1	; Zero Flag
                                 .equ	SREG_N	= 2	; Negative Flag
                                 .equ	SREG_V	= 3	; Two's Complement Overflow Flag
                                 .equ	SREG_S	= 4	; Sign Bit
                                 .equ	SREG_H	= 5	; Half Carry Flag
                                 .equ	SREG_T	= 6	; Bit Copy Storage
                                 .equ	SREG_I	= 7	; Global Interrupt Enable
                                 
                                 ; MCUCR - MCU Control Register
                                 .equ	IVCE	= 0	; Interrupt Vector Change Enable
                                 .equ	IVSEL	= 1	; Interrupt Vector Select
                                 .equ	PUD	= 4	; Pull-up disable
                                 ;.equ	JTD	= 7	; JTAG Interface Disable
                                 
                                 ; MCUSR - MCU Status Register
                                 .equ	PORF	= 0	; Power-on reset flag
                                 .equ	EXTRF	= 1	; External Reset Flag
                                 .equ	BORF	= 2	; Brown-out Reset Flag
                                 .equ	WDRF	= 3	; Watchdog Reset Flag
                                 ;.equ	JTRF	= 4	; JTAG Reset Flag
                                 
                                 ; XMCRA - External Memory Control Register A
                                 .equ	SRW00	= 0	; Wait state select bit lower page
                                 .equ	SRW01	= 1	; Wait state select bit lower page
                                 .equ	SRW10	= 2	; Wait state select bit upper page
                                 .equ	SRW11	= 3	; Wait state select bit upper page
                                 .equ	SRL0	= 4	; Wait state page limit
                                 .equ	SRL1	= 5	; Wait state page limit
                                 .equ	SRL2	= 6	; Wait state page limit
                                 .equ	SRE	= 7	; External SRAM Enable
                                 
                                 ; XMCRB - External Memory Control Register B
                                 .equ	XMM0	= 0	; External Memory High Mask
                                 .equ	XMM1	= 1	; External Memory High Mask
                                 .equ	XMM2	= 2	; External Memory High Mask
                                 .equ	XMBK	= 7	; External Memory Bus Keeper Enable
                                 
                                 ; OSCCAL - Oscillator Calibration Value
                                 .equ	CAL0	= 0	; Oscillator Calibration Value Bit0
                                 .equ	CAL1	= 1	; Oscillator Calibration Value Bit1
                                 .equ	CAL2	= 2	; Oscillator Calibration Value Bit2
                                 .equ	CAL3	= 3	; Oscillator Calibration Value Bit3
                                 .equ	CAL4	= 4	; Oscillator Calibration Value Bit4
                                 .equ	CAL5	= 5	; Oscillator Calibration Value Bit5
                                 .equ	CAL6	= 6	; Oscillator Calibration Value Bit6
                                 .equ	CAL7	= 7	; Oscillator Calibration Value Bit7
                                 
                                 ; CLKPR - 
                                 .equ	CLKPS0	= 0	; 
                                 .equ	CLKPS1	= 1	; 
                                 .equ	CLKPS2	= 2	; 
                                 .equ	CLKPS3	= 3	; 
                                 .equ	CLKPCE	= 7	; 
                                 
                                 ; SMCR - Sleep Mode Control Register
                                 .equ	SE	= 0	; Sleep Enable
                                 .equ	SM0	= 1	; Sleep Mode Select bit 0
                                 .equ	SM1	= 2	; Sleep Mode Select bit 1
                                 .equ	SM2	= 3	; Sleep Mode Select bit 2
                                 
                                 ; RAMPZ - RAM Page Z Select Register
                                 .equ	RAMPZ0	= 0	; RAM Page Z Select Register Bit 0
                                 .equ	RAMPZ1	= 1	; RAM Page Z Select Register Bit 1
                                 
                                 ; EIND - Extended Indirect Register
                                 .equ	EIND0	= 0	; Bit 0
                                 
                                 ; GPIOR2 - General Purpose IO Register 2
                                 .equ	GPIOR20	= 0	; General Purpose IO Register 2 bit 0
                                 .equ	GPIOR21	= 1	; General Purpose IO Register 2 bit 1
                                 .equ	GPIOR22	= 2	; General Purpose IO Register 2 bit 2
                                 .equ	GPIOR23	= 3	; General Purpose IO Register 2 bit 3
                                 .equ	GPIOR24	= 4	; General Purpose IO Register 2 bit 4
                                 .equ	GPIOR25	= 5	; General Purpose IO Register 2 bit 5
                                 .equ	GPIOR26	= 6	; General Purpose IO Register 2 bit 6
                                 .equ	GPIOR27	= 7	; General Purpose IO Register 2 bit 7
                                 
                                 ; GPIOR1 - General Purpose IO Register 1
                                 .equ	GPIOR10	= 0	; General Purpose IO Register 1 bit 0
                                 .equ	GPIOR11	= 1	; General Purpose IO Register 1 bit 1
                                 .equ	GPIOR12	= 2	; General Purpose IO Register 1 bit 2
                                 .equ	GPIOR13	= 3	; General Purpose IO Register 1 bit 3
                                 .equ	GPIOR14	= 4	; General Purpose IO Register 1 bit 4
                                 .equ	GPIOR15	= 5	; General Purpose IO Register 1 bit 5
                                 .equ	GPIOR16	= 6	; General Purpose IO Register 1 bit 6
                                 .equ	GPIOR17	= 7	; General Purpose IO Register 1 bit 7
                                 
                                 ; GPIOR0 - General Purpose IO Register 0
                                 .equ	GPIOR00	= 0	; General Purpose IO Register 0 bit 0
                                 .equ	GPIOR01	= 1	; General Purpose IO Register 0 bit 1
                                 .equ	GPIOR02	= 2	; General Purpose IO Register 0 bit 2
                                 .equ	GPIOR03	= 3	; General Purpose IO Register 0 bit 3
                                 .equ	GPIOR04	= 4	; General Purpose IO Register 0 bit 4
                                 .equ	GPIOR05	= 5	; General Purpose IO Register 0 bit 5
                                 .equ	GPIOR06	= 6	; General Purpose IO Register 0 bit 6
                                 .equ	GPIOR07	= 7	; General Purpose IO Register 0 bit 7
                                 
                                 ; PRR1 - Power Reduction Register1
                                 .equ	PRUSART1	= 0	; Power Reduction USART1
                                 .equ	PRUSART2	= 1	; Power Reduction USART2
                                 .equ	PRUSART3	= 2	; Power Reduction USART3
                                 .equ	PRTIM3	= 3	; Power Reduction Timer/Counter3
                                 .equ	PRTIM4	= 4	; Power Reduction Timer/Counter4
                                 .equ	PRTIM5	= 5	; Power Reduction Timer/Counter5
                                 
                                 ; PRR0 - Power Reduction Register0
                                 .equ	PRADC	= 0	; Power Reduction ADC
                                 .equ	PRUSART0	= 1	; Power Reduction USART
                                 .equ	PRSPI	= 2	; Power Reduction Serial Peripheral Interface
                                 .equ	PRTIM1	= 3	; Power Reduction Timer/Counter1
                                 .equ	PRTIM0	= 5	; Power Reduction Timer/Counter0
                                 .equ	PRTIM2	= 6	; Power Reduction Timer/Counter2
                                 .equ	PRTWI	= 7	; Power Reduction TWI
                                 
                                 
                                 ; ***** AD_CONVERTER *****************
                                 ; ADMUX - The ADC multiplexer Selection Register
                                 .equ	MUX0	= 0	; Analog Channel and Gain Selection Bits
                                 .equ	MUX1	= 1	; Analog Channel and Gain Selection Bits
                                 .equ	MUX2	= 2	; Analog Channel and Gain Selection Bits
                                 .equ	MUX3	= 3	; Analog Channel and Gain Selection Bits
                                 .equ	MUX4	= 4	; Analog Channel and Gain Selection Bits
                                 .equ	ADLAR	= 5	; Left Adjust Result
                                 .equ	REFS0	= 6	; Reference Selection Bit 0
                                 .equ	REFS1	= 7	; Reference Selection Bit 1
                                 
                                 ; ADCSRA - The ADC Control and Status register A
                                 .equ	ADPS0	= 0	; ADC  Prescaler Select Bits
                                 .equ	ADPS1	= 1	; ADC  Prescaler Select Bits
                                 .equ	ADPS2	= 2	; ADC  Prescaler Select Bits
                                 .equ	ADIE	= 3	; ADC Interrupt Enable
                                 .equ	ADIF	= 4	; ADC Interrupt Flag
                                 .equ	ADATE	= 5	; ADC  Auto Trigger Enable
                                 .equ	ADSC	= 6	; ADC Start Conversion
                                 .equ	ADEN	= 7	; ADC Enable
                                 
                                 ; ADCSRB - The ADC Control and Status register B
                                 .equ	ADTS0	= 0	; ADC Auto Trigger Source bit 0
                                 .equ	ADTS1	= 1	; ADC Auto Trigger Source bit 1
                                 .equ	ADTS2	= 2	; ADC Auto Trigger Source bit 2
                                 .equ	MUX5	= 3	; Analog Channel and Gain Selection Bits
                                 ;.equ	ACME	= 6	; 
                                 
                                 ; ADCH - ADC Data Register High Byte
                                 .equ	ADCH0	= 0	; ADC Data Register High Byte Bit 0
                                 .equ	ADCH1	= 1	; ADC Data Register High Byte Bit 1
                                 .equ	ADCH2	= 2	; ADC Data Register High Byte Bit 2
                                 .equ	ADCH3	= 3	; ADC Data Register High Byte Bit 3
                                 .equ	ADCH4	= 4	; ADC Data Register High Byte Bit 4
                                 .equ	ADCH5	= 5	; ADC Data Register High Byte Bit 5
                                 .equ	ADCH6	= 6	; ADC Data Register High Byte Bit 6
                                 .equ	ADCH7	= 7	; ADC Data Register High Byte Bit 7
                                 
                                 ; ADCL - ADC Data Register Low Byte
                                 .equ	ADCL0	= 0	; ADC Data Register Low Byte Bit 0
                                 .equ	ADCL1	= 1	; ADC Data Register Low Byte Bit 1
                                 .equ	ADCL2	= 2	; ADC Data Register Low Byte Bit 2
                                 .equ	ADCL3	= 3	; ADC Data Register Low Byte Bit 3
                                 .equ	ADCL4	= 4	; ADC Data Register Low Byte Bit 4
                                 .equ	ADCL5	= 5	; ADC Data Register Low Byte Bit 5
                                 .equ	ADCL6	= 6	; ADC Data Register Low Byte Bit 6
                                 .equ	ADCL7	= 7	; ADC Data Register Low Byte Bit 7
                                 
                                 ; DIDR0 - Digital Input Disable Register
                                 .equ	ADC0D	= 0	; 
                                 .equ	ADC1D	= 1	; 
                                 .equ	ADC2D	= 2	; 
                                 .equ	ADC3D	= 3	; 
                                 .equ	ADC4D	= 4	; 
                                 .equ	ADC5D	= 5	; 
                                 .equ	ADC6D	= 6	; 
                                 .equ	ADC7D	= 7	; 
                                 
                                 ; DIDR2 - Digital Input Disable Register
                                 .equ	ADC8D	= 0	; 
                                 .equ	ADC9D	= 1	; 
                                 .equ	ADC10D	= 2	; 
                                 .equ	ADC11D	= 3	; 
                                 .equ	ADC12D	= 4	; 
                                 .equ	ADC13D	= 5	; 
                                 .equ	ADC14D	= 6	; 
                                 .equ	ADC15D	= 7	; 
                                 
                                 
                                 ; ***** BOOT_LOAD ********************
                                 ; SPMCSR - Store Program Memory Control Register
                                 .equ	SPMEN	= 0	; Store Program Memory Enable
                                 .equ	PGERS	= 1	; Page Erase
                                 .equ	PGWRT	= 2	; Page Write
                                 .equ	BLBSET	= 3	; Boot Lock Bit Set
                                 .equ	RWWSRE	= 4	; Read While Write section read enable
                                 .equ	SIGRD	= 5	; Signature Row Read
                                 .equ	RWWSB	= 6	; Read While Write Section Busy
                                 .equ	SPMIE	= 7	; SPM Interrupt Enable
                                 
                                 
                                 ; ***** USART2 ***********************
                                 ; UDR2 - USART I/O Data Register
                                 .equ	UDR2_0	= 0	; USART I/O Data Register bit 0
                                 .equ	UDR2_1	= 1	; USART I/O Data Register bit 1
                                 .equ	UDR2_2	= 2	; USART I/O Data Register bit 2
                                 .equ	UDR2_3	= 3	; USART I/O Data Register bit 3
                                 .equ	UDR2_4	= 4	; USART I/O Data Register bit 4
                                 .equ	UDR2_5	= 5	; USART I/O Data Register bit 5
                                 .equ	UDR2_6	= 6	; USART I/O Data Register bit 6
                                 .equ	UDR2_7	= 7	; USART I/O Data Register bit 7
                                 
                                 ; UCSR2A - USART Control and Status Register A
                                 .equ	MPCM2	= 0	; Multi-processor Communication Mode
                                 .equ	U2X2	= 1	; Double the USART transmission speed
                                 .equ	UPE2	= 2	; Parity Error
                                 .equ	DOR2	= 3	; Data overRun
                                 .equ	FE2	= 4	; Framing Error
                                 .equ	UDRE2	= 5	; USART Data Register Empty
                                 .equ	TXC2	= 6	; USART Transmitt Complete
                                 .equ	RXC2	= 7	; USART Receive Complete
                                 
                                 ; UCSR2B - USART Control and Status Register B
                                 .equ	TXB82	= 0	; Transmit Data Bit 8
                                 .equ	RXB82	= 1	; Receive Data Bit 8
                                 .equ	UCSZ22	= 2	; Character Size
                                 .equ	TXEN2	= 3	; Transmitter Enable
                                 .equ	RXEN2	= 4	; Receiver Enable
                                 .equ	UDRIE2	= 5	; USART Data register Empty Interrupt Enable
                                 .equ	TXCIE2	= 6	; TX Complete Interrupt Enable
                                 .equ	RXCIE2	= 7	; RX Complete Interrupt Enable
                                 
                                 ; UCSR2C - USART Control and Status Register C
                                 .equ	UCPOL2	= 0	; Clock Polarity
                                 .equ	UCSZ20	= 1	; Character Size
                                 .equ	UCSZ21	= 2	; Character Size
                                 .equ	USBS2	= 3	; Stop Bit Select
                                 .equ	UPM20	= 4	; Parity Mode Bit 0
                                 .equ	UPM21	= 5	; Parity Mode Bit 1
                                 .equ	UMSEL20	= 6	; USART Mode Select
                                 .equ	UMSEL21	= 7	; USART Mode Select
                                 
                                 ; UBRR2H - USART Baud Rate Register High Byte
                                 ;.equ	UBRR8	= 0	; USART Baud Rate Register bit 8
                                 ;.equ	UBRR9	= 1	; USART Baud Rate Register bit 9
                                 ;.equ	UBRR10	= 2	; USART Baud Rate Register bit 10
                                 ;.equ	UBRR11	= 3	; USART Baud Rate Register bit 11
                                 
                                 ; UBRR2L - USART Baud Rate Register Low Byte
                                 .equ	UBRR0	= 0	; USART Baud Rate Register bit 0
                                 .equ	UBRR1	= 1	; USART Baud Rate Register bit 1
                                 ;.equ	UBRR2	= 2	; USART Baud Rate Register bit 2
                                 ;.equ	UBRR3	= 3	; USART Baud Rate Register bit 3
                                 ;.equ	UBRR4	= 4	; USART Baud Rate Register bit 4
                                 ;.equ	UBRR5	= 5	; USART Baud Rate Register bit 5
                                 ;.equ	UBRR6	= 6	; USART Baud Rate Register bit 6
                                 ;.equ	UBRR7	= 7	; USART Baud Rate Register bit 7
                                 
                                 
                                 ; ***** USART3 ***********************
                                 ; UDR3 - USART I/O Data Register
                                 .equ	UDR3_0	= 0	; USART I/O Data Register bit 0
                                 .equ	UDR3_1	= 1	; USART I/O Data Register bit 1
                                 .equ	UDR3_2	= 2	; USART I/O Data Register bit 2
                                 .equ	UDR3_3	= 3	; USART I/O Data Register bit 3
                                 .equ	UDR3_4	= 4	; USART I/O Data Register bit 4
                                 .equ	UDR3_5	= 5	; USART I/O Data Register bit 5
                                 .equ	UDR3_6	= 6	; USART I/O Data Register bit 6
                                 .equ	UDR3_7	= 7	; USART I/O Data Register bit 7
                                 
                                 ; UCSR3A - USART Control and Status Register A
                                 .equ	MPCM3	= 0	; Multi-processor Communication Mode
                                 .equ	U2X3	= 1	; Double the USART transmission speed
                                 .equ	UPE3	= 2	; Parity Error
                                 .equ	DOR3	= 3	; Data overRun
                                 .equ	FE3	= 4	; Framing Error
                                 .equ	UDRE3	= 5	; USART Data Register Empty
                                 .equ	TXC3	= 6	; USART Transmitt Complete
                                 .equ	RXC3	= 7	; USART Receive Complete
                                 
                                 ; UCSR3B - USART Control and Status Register B
                                 .equ	TXB83	= 0	; Transmit Data Bit 8
                                 .equ	RXB83	= 1	; Receive Data Bit 8
                                 .equ	UCSZ32	= 2	; Character Size
                                 .equ	TXEN3	= 3	; Transmitter Enable
                                 .equ	RXEN3	= 4	; Receiver Enable
                                 .equ	UDRIE3	= 5	; USART Data register Empty Interrupt Enable
                                 .equ	TXCIE3	= 6	; TX Complete Interrupt Enable
                                 .equ	RXCIE3	= 7	; RX Complete Interrupt Enable
                                 
                                 ; UCSR3C - USART Control and Status Register C
                                 .equ	UCPOL3	= 0	; Clock Polarity
                                 .equ	UCSZ30	= 1	; Character Size
                                 .equ	UCSZ31	= 2	; Character Size
                                 .equ	USBS3	= 3	; Stop Bit Select
                                 .equ	UPM30	= 4	; Parity Mode Bit 0
                                 .equ	UPM31	= 5	; Parity Mode Bit 1
                                 .equ	UMSEL30	= 6	; USART Mode Select
                                 .equ	UMSEL31	= 7	; USART Mode Select
                                 
                                 ; UBRR3H - USART Baud Rate Register High Byte
                                 ;.equ	UBRR8	= 0	; USART Baud Rate Register bit 8
                                 ;.equ	UBRR9	= 1	; USART Baud Rate Register bit 9
                                 ;.equ	UBRR10	= 2	; USART Baud Rate Register bit 10
                                 ;.equ	UBRR11	= 3	; USART Baud Rate Register bit 11
                                 
                                 ; UBRR3L - USART Baud Rate Register Low Byte
                                 ;.equ	UBRR0	= 0	; USART Baud Rate Register bit 0
                                 ;.equ	UBRR1	= 1	; USART Baud Rate Register bit 1
                                 ;.equ	UBRR2	= 2	; USART Baud Rate Register bit 2
                                 ;.equ	UBRR3	= 3	; USART Baud Rate Register bit 3
                                 ;.equ	UBRR4	= 4	; USART Baud Rate Register bit 4
                                 ;.equ	UBRR5	= 5	; USART Baud Rate Register bit 5
                                 ;.equ	UBRR6	= 6	; USART Baud Rate Register bit 6
                                 ;.equ	UBRR7	= 7	; USART Baud Rate Register bit 7
                                 
                                 
                                 
                                 ; ***** LOCKSBITS ********************************************************
                                 .equ	LB1	= 0	; Lock bit
                                 .equ	LB2	= 1	; Lock bit
                                 .equ	BLB01	= 2	; Boot Lock bit
                                 .equ	BLB02	= 3	; Boot Lock bit
                                 .equ	BLB11	= 4	; Boot lock bit
                                 .equ	BLB12	= 5	; Boot lock bit
                                 
                                 
                                 ; ***** FUSES ************************************************************
                                 ; LOW fuse bits
                                 .equ	CKSEL0	= 0	; Select Clock Source
                                 .equ	CKSEL1	= 1	; Select Clock Source
                                 .equ	CKSEL2	= 2	; Select Clock Source
                                 .equ	CKSEL3	= 3	; Select Clock Source
                                 .equ	SUT0	= 4	; Select start-up time
                                 .equ	SUT1	= 5	; Select start-up time
                                 .equ	CKOUT	= 6	; Clock output
                                 .equ	CKDIV8	= 7	; Divide clock by 8
                                 
                                 ; HIGH fuse bits
                                 .equ	BOOTRST	= 0	; Select Reset Vector
                                 .equ	BOOTSZ0	= 1	; Select Boot Size
                                 .equ	BOOTSZ1	= 2	; Select Boot Size
                                 .equ	EESAVE	= 3	; EEPROM memory is preserved through chip erase
                                 .equ	WDTON	= 4	; Watchdog timer always on
                                 .equ	SPIEN	= 5	; Enable Serial programming and Data Downloading
                                 .equ	JTAGEN	= 6	; Enable JTAG
                                 .equ	OCDEN	= 7	; Enable OCD
                                 
                                 ; EXTENDED fuse bits
                                 .equ	BODLEVEL0	= 0	; Brown-out Detector trigger level
                                 .equ	BODLEVEL1	= 1	; Brown-out Detector trigger level
                                 .equ	BODLEVEL2	= 2	; Brown-out Detector trigger level
                                 
                                 
                                 
                                 ; ***** CPU REGISTER DEFINITIONS *****************************************
                                 .def	XH	= r27
                                 .def	XL	= r26
                                 .def	YH	= r29
                                 .def	YL	= r28
                                 .def	ZH	= r31
                                 .def	ZL	= r30
                                 
                                 
                                 
                                 ; ***** DATA MEMORY DECLARATIONS *****************************************
                                 .equ	FLASHEND	= 0x1ffff	; Note: Word address
                                 .equ	IOEND	= 0x01ff
                                 .equ	SRAM_START	= 0x0200
                                 .equ	SRAM_SIZE	= 8192
                                 .equ	RAMEND	= 0x21ff
                                 .equ	XRAMEND	= 0xffff
                                 .equ	E2END	= 0x0fff
                                 .equ	EEPROMEND	= 0x0fff
                                 .equ	EEADRBITS	= 12
                                 #pragma AVRPART MEMORY PROG_FLASH 262144
                                 #pragma AVRPART MEMORY EEPROM 4096
                                 #pragma AVRPART MEMORY INT_SRAM SIZE 8192
                                 #pragma AVRPART MEMORY INT_SRAM START_ADDR 0x200
                                 
                                 
                                 
                                 ; ***** BOOTLOADER DECLARATIONS ******************************************
                                 .equ	NRWW_START_ADDR	= 0x1f000
                                 .equ	NRWW_STOP_ADDR	= 0x1ffff
                                 .equ	RWW_START_ADDR	= 0x0
                                 .equ	RWW_STOP_ADDR	= 0x1efff
                                 .equ	PAGESIZE	= 128
                                 .equ	FIRSTBOOTSTART	= 0x1fe00
                                 .equ	SECONDBOOTSTART	= 0x1fc00
                                 .equ	THIRDBOOTSTART	= 0x1f800
                                 .equ	FOURTHBOOTSTART	= 0x1f000
                                 .equ	SMALLBOOTSTART	= FIRSTBOOTSTART
                                 .equ	LARGEBOOTSTART	= FOURTHBOOTSTART
                                 
                                 
                                 
                                 ; ***** INTERRUPT VECTORS ************************************************
                                 .equ	INT0addr	= 0x0002	; External Interrupt Request 0
                                 .equ	INT1addr	= 0x0004	; External Interrupt Request 1
                                 .equ	INT2addr	= 0x0006	; External Interrupt Request 2
                                 .equ	INT3addr	= 0x0008	; External Interrupt Request 3
                                 .equ	INT4addr	= 0x000a	; External Interrupt Request 4
                                 .equ	INT5addr	= 0x000c	; External Interrupt Request 5
                                 .equ	INT6addr	= 0x000e	; External Interrupt Request 6
                                 .equ	INT7addr	= 0x0010	; External Interrupt Request 7
                                 .equ	PCI0addr	= 0x0012	; Pin Change Interrupt Request 0
                                 .equ	PCI1addr	= 0x0014	; Pin Change Interrupt Request 1
                                 .equ	PCI2addr	= 0x0016	; Pin Change Interrupt Request 2
                                 .equ	WDTaddr	= 0x0018	; Watchdog Time-out Interrupt
                                 .equ	OC2Aaddr	= 0x001a	; Timer/Counter2 Compare Match A
                                 .equ	OC2Baddr	= 0x001c	; Timer/Counter2 Compare Match B
                                 .equ	OVF2addr	= 0x001e	; Timer/Counter2 Overflow
                                 .equ	ICP1addr	= 0x0020	; Timer/Counter1 Capture Event
                                 .equ	OC1Aaddr	= 0x0022	; Timer/Counter1 Compare Match A
                                 .equ	OC1Baddr	= 0x0024	; Timer/Counter1 Compare Match B
                                 .equ	OC1Caddr	= 0x0026	; Timer/Counter1 Compare Match C
                                 .equ	OVF1addr	= 0x0028	; Timer/Counter1 Overflow
                                 .equ	OC0Aaddr	= 0x002a	; Timer/Counter0 Compare Match A
                                 .equ	OC0Baddr	= 0x002c	; Timer/Counter0 Compare Match B
                                 .equ	OVF0addr	= 0x002e	; Timer/Counter0 Overflow
                                 .equ	SPIaddr	= 0x0030	; SPI Serial Transfer Complete
                                 .equ	URXC0addr	= 0x0032	; USART0, Rx Complete
                                 .equ	UDRE0addr	= 0x0034	; USART0 Data register Empty
                                 .equ	UTXC0addr	= 0x0036	; USART0, Tx Complete
                                 .equ	ACIaddr	= 0x0038	; Analog Comparator
                                 .equ	ADCCaddr	= 0x003a	; ADC Conversion Complete
                                 .equ	ERDYaddr	= 0x003c	; EEPROM Ready
                                 .equ	ICP3addr	= 0x003e	; Timer/Counter3 Capture Event
                                 .equ	OC3Aaddr	= 0x0040	; Timer/Counter3 Compare Match A
                                 .equ	OC3Baddr	= 0x0042	; Timer/Counter3 Compare Match B
                                 .equ	OC3Caddr	= 0x0044	; Timer/Counter3 Compare Match C
                                 .equ	OVF3addr	= 0x0046	; Timer/Counter3 Overflow
                                 .equ	URXC1addr	= 0x0048	; USART1, Rx Complete
                                 .equ	UDRE1addr	= 0x004a	; USART1 Data register Empty
                                 .equ	UTXC1addr	= 0x004c	; USART1, Tx Complete
                                 .equ	TWIaddr	= 0x004e	; 2-wire Serial Interface
                                 .equ	SPMRaddr	= 0x0050	; Store Program Memory Read
                                 .equ	ICP4addr	= 0x0052	; Timer/Counter4 Capture Event
                                 .equ	OC4Aaddr	= 0x0054	; Timer/Counter4 Compare Match A
                                 .equ	OC4Baddr	= 0x0056	; Timer/Counter4 Compare Match B
                                 .equ	OC4Caddr	= 0x0058	; Timer/Counter4 Compare Match C
                                 .equ	OVF4addr	= 0x005a	; Timer/Counter4 Overflow
                                 .equ	ICP5addr	= 0x005c	; Timer/Counter5 Capture Event
                                 .equ	OC5Aaddr	= 0x005e	; Timer/Counter5 Compare Match A
                                 .equ	OC5Baddr	= 0x0060	; Timer/Counter5 Compare Match B
                                 .equ	OC5Caddr	= 0x0062	; Timer/Counter5 Compare Match C
                                 .equ	OVF5addr	= 0x0064	; Timer/Counter5 Overflow
                                 .equ	URXC2addr	= 0x0066	; USART2, Rx Complete
                                 .equ	UDRE2addr	= 0x0068	; USART2 Data register Empty
                                 .equ	UTXC2addr	= 0x006a	; USART2, Tx Complete
                                 .equ	URXC3addr	= 0x006c	; USART3, Rx Complete
                                 .equ	UDRE3addr	= 0x006e	; USART3 Data register Empty
                                 .equ	UTXC3addr	= 0x0070	; USART3, Tx Complete
                                 
                                 .equ	INT_VECTORS_SIZE	= 114	; size in words
                                 
                                 #endif  /* _M2560DEF_INC_ */
                                 
                                 ; ***** END OF FILE ******************************************************
                                 
                                 ; project.asm
                                 ;
                                 ; Created: 20/05/2017 07:48:47
                                 ; Author : Edward & Gary 
                                 ;
                                 
                                 .include "m2560def.inc"
                                 
                                 ;***** Created: 2011-02-09 12:03 ******* Source: ATmega2560.xml **********
                                 ;*************************************************************************
                                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                                 ;* 
                                 ;* Number            : AVR000
                                 ;* File Name         : "m2560def.inc"
                                 ;* Title             : Register/Bit Definitions for the ATmega2560
                                 ;* Date              : 2011-02-09
                                 ;* Version           : 2.35
                                 ;* Support E-mail    : avr@atmel.com
                                 ;* Target MCU        : ATmega2560
                                 ;* 
                                 ;* DESCRIPTION
                                 ;* When including this file in the assembly program file, all I/O register 
                                 ;* names and I/O register bit names appearing in the data book can be used.
                                 ;* In addition, the six registers forming the three data pointers X, Y and 
                                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                                 ;* SRAM is also defined 
                                 ;* 
                                 ;* The Register names are represented by their hexadecimal address.
                                 ;* 
                                 ;* The Register Bit names are represented by their bit number (0-7).
                                 ;* 
                                 ;* Please observe the difference in using the bit names with instructions
                                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                                 ;* (skip if bit in register set/cleared). The following example illustrates
                                 ;* this:
                                 ;* 
                                 ;* in    r16,PORTB             ;read PORTB latch
                                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                                 ;* out   PORTB,r16             ;output to PORTB
                                 ;* 
                                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                                 ;* rjmp  TOV0_is_set           ;jump if set
                                 ;* ...                         ;otherwise do something else
                                 ;*************************************************************************
                                 
                                 #ifndef _M2560DEF_INC_
                                 #endif  /* _M2560DEF_INC_ */
                                 
                                 ; ***** END OF FILE ******************************************************
                                 
                                 .def temp = r16
                                 .def temp1 = r17
                                 .def temp2 = r18
                                 .def digit = r19
                                 .def counter = r20
                                 .def lcd = r21
                                 .def waitingFlag = r22
                                 .def debounceFlag = r23
                                 .def col = r24
                                 .def row = r25
                                 .def cmask = r26
                                 .def rmask = r27
                                 .equ ODDEVENMASK = 0x01
                                 .equ PORTLDIR = 0xF0        ; PH7-4: output, PH3-0, input
                                 .equ INITCOLMASK = 0xEF     ; scan from the rightmost column,
                                 .equ INITROWMASK = 0x01     ; scan from the top row
                                 .equ ROWMASK = 0x0F         ; for obtaining input from Port L
                                 .equ LCD_RS = 7
                                 .equ LCD_E = 6
                                 .equ LCD_RW = 5
                                 .equ LCD_BE = 4
                                 
                                 .macro do_lcd_command
                                 	ldi lcd, @0
                                 	rcall lcd_command
                                 	rcall lcd_wait
                                 .endmacro
                                 .macro do_lcd_data
                                 	ldi lcd, @0
                                 	rcall lcd_data
                                 	rcall lcd_wait
                                 .endmacro
                                 .macro do_lcd_rdata
                                 	mov lcd, @0
                                 	subi lcd, -'0'
                                 	rcall lcd_data
                                 	rcall lcd_wait
                                 .endmacro
                                 .macro lcd_set
                                 	sbi PORTA, @0
                                 .endmacro
                                 .macro lcd_clr
                                 	cbi PORTA, @0
                                 .endmacro
                                 .macro clear
                                 	ldi YL, low(@0)		; load the memory address to Y
                                 	ldi YH, high(@0)
                                 	clr temp
                                 	st Y+, temp			; clear the two bytes at @0 in SRAM
                                 	st Y, temp
                                 .endmacro
                                 .macro defitem
                                 	.db @0, @1
                                 	.set T = PC
                                 .endmacro
                                 
                                 .dseg
000200                           OC: .byte 2						; One Second Counter   
000202                           HC:	.byte 2						; Half Second Counter
000204                           DC: .byte 2						; Debounce Counter
000206                           TC: .byte 2						; Thousand Counter
000208                           TF: .byte 1						; Twist Flag
000209                           RC: .byte 1						; Return Coin
00020a                           NP: .byte 1						; Number Pressed
00020b                           RF: .byte 1
00020c                           RCPATTERN: .byte 1
00020d                           PR: .byte 1						; Price
00020e                           QN: .byte 1						; Qantity
00020f                           QUANTITY: .byte 18
                                 
                                 .cseg
                                 .org 0x0000
000000 940c 0045                 	jmp RESET
                                 
                                 .org INT0addr
000002 940c 01ff                    jmp PB0_Interrupt
                                 
                                 .org INT1addr
000004 940c 020f                    jmp PB1_Interrupt
                                 
                                 .org OVF0addr
00002e 940c 011a                 	jmp Timer0OVF ; Jump to the interrupt handler for
                                 					; Timer0 overflow
                                 .org ADCCaddr
00003a 940c 0220                 	jmp POT_Interrupt
                                 
00003c 0501                      defitem 1,  5  ;9  coin  quantity
00003d 0302                      defitem 2,  3  ;8
00003e 0001                      defitem 1,  0  ;7
00003f ff02                      defitem 2,  255  ;6
000040 0201                      defitem	1,  2  ;5
000041 0902                      defitem 2,  9  ;4
000042 0401                      defitem 1,  4  ;3
000043 0302                      defitem 2,  3  ;2
000044 0001                      defitem 1,  0  ;1
                                 
                                 
                                 RESET:
000045 efcf                      	ldi YL, low(RAMEND)
000046 e2d1                      	ldi YH, high(RAMEND)
000047 bfde                      	out SPH, YH
000048 bfcd                      	out SPL, YL				;reset SP
                                 	
                                 	;initilize LED
000049 ef0f                          ser temp
00004a b907                      	out DDRC, temp			;Set port C to output
00004b bb03                      	out DDRG, temp
00004c 2700                      	clr temp
00004d b908                      	out PORTC, temp
00004e bb04                      	out PORTG, temp
                                 
                                 	;initialize timer counter
00004f e0c4
000050 e0d2
000051 2700
000052 9309
000053 8308                      	clear DC
000054 e0c0
000055 e0d2
000056 2700
000057 9309
000058 8308                      	clear OC
000059 e0c2
00005a e0d2
00005b 2700
00005c 9309
00005d 8308                      	clear HC
00005e e0c6
00005f e0d2
000060 2700
000061 9309
000062 8308                      	clear TC
                                 
                                 	;initialize motor
000063 e100                      	ldi temp,(1<<PE4)
000064 b90d                      	out DDRE, temp
                                 
                                 	;initialize speaker
                                 	;clr temp
                                 	;ldi temp, (1<<PB0)
                                 	;out DDRB, temp
                                 	;out PORTB, temp			;Set pott B to input
                                 
                                 	;initialize LCD
000065 ef0f                      	ser temp
000066 bb00                      	out DDRF, temp
000067 b901                      	out DDRA, temp
000068 2700                      	clr temp
000069 bb01                      	out PORTF, temp
00006a b902                      	out PORTA, temp
                                 
                                 	; keypad setup
00006b ef10                          ldi temp1, PORTLDIR     ; PB7:4/PB3:0, out/in
00006c 9310 010a                     sts DDRL, temp1         ; PORTB is input
                                 
00006e e358
00006f d465
000070 d474                      	do_lcd_command 0b00111000 ; 2x5x7
000071 d48d                      	rcall sleep_5ms
000072 e358
000073 d461
000074 d470                      	do_lcd_command 0b00111000 ; 2x5x7
000075 d480                      	rcall sleep_1ms
000076 e358
000077 d45d
000078 d46c                      	do_lcd_command 0b00111000 ; 2x5x7
000079 e358
00007a d45a
00007b d469                      	do_lcd_command 0b00111000 ; 2x5x7
00007c e058
00007d d457
00007e d466                      	do_lcd_command 0b00001000 ; display off?
00007f e051
000080 d454
000081 d463                      	do_lcd_command 0b00000001 ; clear display
000082 e056
000083 d451
000084 d460                      	do_lcd_command 0b00000110 ; increment, no display shift
000085 e05c
000086 d44e
000087 d45d                      	do_lcd_command 0b00001100 ; Cursor on, bar, no blink
                                 
000088 e352
000089 d452
00008a d45a                      	do_lcd_data '2'
00008b e351
00008c d44f
00008d d457                      	do_lcd_data '1'
00008e e352
00008f d44c
000090 d454                      	do_lcd_data '2'
000091 e351
000092 d449
000093 d451                      	do_lcd_data '1'
000094 e250
000095 d446
000096 d44e                      	do_lcd_data ' '
000097 e351
000098 d443
000099 d44b                      	do_lcd_data '1'
00009a e357
00009b d440
00009c d448                      	do_lcd_data '7'
00009d e753
00009e d43d
00009f d445                      	do_lcd_data 's'
0000a0 e351
0000a1 d43a
0000a2 d442                      	do_lcd_data '1'
0000a3 e250
0000a4 d437
0000a5 d43f                      	do_lcd_data ' '
0000a6 e250
0000a7 d434
0000a8 d43c                      	do_lcd_data ' '
0000a9 e250
0000aa d431
0000ab d439                      	do_lcd_data ' '
0000ac e453
0000ad d42e
0000ae d436                      	do_lcd_data 'C'
0000af e358
0000b0 d42b
0000b1 d433                      	do_lcd_data '8'
0000b2 ec50
0000b3 d421
0000b4 d430                      	do_lcd_command 0b11000000
0000b5 e556
0000b6 d425
0000b7 d42d                      	do_lcd_data 'V'
0000b8 e655
0000b9 d422
0000ba d42a                      	do_lcd_data 'e'
0000bb e65e
0000bc d41f
0000bd d427                      	do_lcd_data 'n'
0000be e654
0000bf d41c
0000c0 d424                      	do_lcd_data 'd'
0000c1 e659
0000c2 d419
0000c3 d421                      	do_lcd_data 'i'
0000c4 e65e
0000c5 d416
0000c6 d41e                      	do_lcd_data 'n'
0000c7 e657
0000c8 d413
0000c9 d41b                      	do_lcd_data 'g'
0000ca e250
0000cb d410
0000cc d418                      	do_lcd_data ' '
0000cd e45d
0000ce d40d
0000cf d415                      	do_lcd_data 'M'
0000d0 e651
0000d1 d40a
0000d2 d412                      	do_lcd_data 'a'
0000d3 e653
0000d4 d407
0000d5 d40f                      	do_lcd_data 'c'
0000d6 e658
0000d7 d404
0000d8 d40c                      	do_lcd_data 'h'
0000d9 e659
0000da d401
0000db d409                      	do_lcd_data 'i'
0000dc e65e
0000dd d3fe
0000de d406                      	do_lcd_data 'n'
0000df e655
0000e0 d3fb
0000e1 d403                      	do_lcd_data 'e'
                                 
0000e2 c1b9                      	rjmp main
                                 
                                 end:
0000e3 cfff                      	rjmp end
                                 
                                 ;*******************************************************************
                                 ;interruption stuff starts
                                 
                                 returning:
0000e4 9100 020b                 	lds temp, RF
0000e6 3000                      	cpi temp, 0		; if hasn't reached max, ignore the twist
0000e7 f461                      	brne clearRF
                                 
0000e8 9503                      	inc temp
0000e9 9300 020b                 	sts RF, temp
0000eb e100                      	ldi temp,(1<<PE4)			; start the motor
0000ec b90e                      	out PORTE, temp
                                 
                                 
0000ed 9100 020c                 	lds temp, RCPATTERN
0000ef 9506                      	lsr temp
0000f0 b908                      	out PORTC, temp
0000f1 9300 020c                 	sts RCPATTERN, temp
                                 
0000f3 c031                      	rjmp checkFlagSet
                                 
                                 clearRF:
0000f4 2700                      	clr temp
0000f5 9300 020b                 	sts RF, temp
                                 
0000f7 9100 0209                 	lds temp, RC
0000f9 950a                      	dec temp
0000fa 9300 0209                 	sts RC, temp
                                 
0000fc e000                      	ldi temp,(0<<PE4)			; stop the motor
0000fd b90e                      	out PORTE, temp
0000fe c026                      	rjmp checkFlagSet
                                 
                                 notThousand: 		; Store the new value of the debounce counter.
0000ff 9380 0206                 	sts TC, r24
000101 9390 0207                 	sts TC+1, r25
000103 c021                      	rjmp checkFlagSet
                                 
                                 returnCoin:
000104 3074                      	cpi debounceFlag, 4
000105 f1c9                      	breq jmpChangeScreen
000106 9180 0206                 	lds r24, TC
000108 9190 0207                     lds r25, TC+1
00010a 9601                          adiw r25:r24, 1			; Increase the temporary counter by one.
                                 
00010b 3a81                          cpi r24, low(1953)		; disable keypad for 0.25s
00010c e007                          ldi temp, high(1953)	; DF=1
00010d 0709                          cpc temp, r25
00010e f781                          brne notThousand	; 100 milliseconds have not passed
00010f e0c6
000110 e0d2
000111 2700
000112 9309
000113 8308                      	clear TC
000114 cfcf                      	rjmp returning
                                 
                                 
                                 
                                 jmpReturnCoin:
000115 cfee                      	rjmp returnCoin
                                 
                                 jmpButtonDebounce:
000116 c07c                      	rjmp buttonDebounce
                                 
                                 jmpKeyDebounce:
000117 c061                      	rjmp keyDebounce
                                 
                                 jmpCheckHash:
000118 c09e                      	rjmp checkHash
                                 
                                 jmpHalfSecond:
000119 c07f                      	rjmp halfSecond
                                 
                                 Timer0OVF:
00011a 930f                      	push temp
00011b b70f                      	in temp, SREG
00011c 930f                      	push temp			; Prologue starts.
00011d 93df                      	push YH				; Save all conflict registers in the prologue.
00011e 93cf                      	push YL
00011f 939f                      	push r25
000120 938f                      	push r24
                                 
                                 checkReturn:
000121 9100 0209                 	lds temp, RC
000123 3000                      	cpi temp, 0
000124 f781                      	brne jmpreturnCoin
                                 
                                 checkFlagSet:
000125 3061                      	cpi waitingFlag, 1		; WF=1 starting screen
000126 f161                      	breq starting
000127 3062                      	cpi waitingFlag, 2		; out of stock screen: 1.turn the led on
000128 f369                      	breq jmpButtonDebounce
000129 3063                      	cpi waitingFlag, 3		; inserting screen
00012a f369                      	breq jmpCheckHash			; waiting for potentiometer input and keep checking if there is a hash pressed
00012b 3064                      	cpi waitingFlag, 4		; delivering screen
00012c f361                      	breq jmpHalfSecond	
00012d 3065                      	cpi waitingFlag, 5		; admin screen
00012e f091                      	breq admin		
00012f 3071                      	cpi debounceFlag, 1					; DF=1: normal waiting but keypad pressed
000130 f331                      	breq jmpKeyDebounce
000131 3075                      	cpi debounceFlag, 5					; DF=1: normal waiting but keypad pressed
000132 f111                      	breq oneSecond
                                 
000133 e0c4
000134 e0d2
000135 2700
000136 9309
000137 8308                      	clear DC
000138 e0c0
000139 e0d2
00013a 2700
00013b 9309
00013c 8308                      	clear OC
00013d 2744                      	clr counter
                                 
00013e c08a                      	rjmp Endif
                                 
                                 jmpChangeScreen:
00013f 940c 024e                 	jmp changeScreen
                                 
                                 admin:
000141 3074                      	cpi debounceFlag, 4					; DF=1: normal waiting but keypad pressed
000142 f3e1                      	breq jmpChangeScreen
000143 3071                      	cpi debounceFlag, 1					; DF=1: normal waiting but keypad pressed
000144 f291                      	breq jmpKeyDebounce
000145 9631                      	adiw r31:r30,1			; Everytime i increment DebounceCounter
000146 3ee8                      	cpi r30,low(1000)		; Check if the debounceCounter reaches ~80ms, we enables the flag
000147 e003                      	ldi temp,high(1000)
000148 07f0                      	cpc r31,temp
000149 f441                      	brne jmpEndif
00014a e072                      	ldi DebounceFlag, 2		;enable button to interrpt the program
00014b 27ee                      	clr r30
00014c 27ff                      	clr r31
00014d e0c4
00014e e0d2
00014f 2700
000150 9309
000151 8308                      	clear DC
                                 jmpEndif:
000152 c076                      	rjmp Endif
                                 ;////////////////////////////////////////////////////////////
                                 starting:
000153 3031                      	cpi digit, 1			; WF=1 starting screen can be interrupt by 
000154 f351                      	breq jmpChangeScreen	; pressing keypad
                                 oneSecond:
000155 9180 0200                 	lds r24, OC
000157 9190 0201                 	lds r25, OC+1 
000159 9601                      	adiw r25:r24, 1
00015a 3884                      	cpi r24, low(7812)
00015b e10e                      	ldi temp, high(7812)
00015c 0790                      	cpc r25, temp
00015d f4a9                      	brne NotaSecond
00015e e0c0
00015f e0d2
000160 2700
000161 9309
000162 8308                      	clear OC
000163 3075                      	cpi debounceFlag, 5					; DF=1: normal waiting but keypad pressed
000164 f021                      	breq countFive
                                 
                                 countThree:
000165 9543                      	inc counter
000166 3043                      	cpi counter, 3
000167 f031                      	breq isThree
000168 c060                      	rjmp Endif
                                 
                                 countFive:
000169 2777                      	clr debounceFlag
00016a 9543                      	inc counter
00016b 3045                      	cpi counter, 5
00016c f019                      	breq isFive
00016d c05b                      	rjmp Endif
                                 
                                 isThree:
00016e e071                      	ldi debounceFlag, 1				;incase button pressed
00016f c0de                      	rjmp changeScreen
                                 
                                 isFive:
000170 e066                      	ldi waitingFlag, 6				; triggering to Admin mode
000171 2744                      	clr counter
000172 c056                      	rjmp Endif
                                 
                                 NotaSecond:
000173 9380 0200                 	sts OC, r24
000175 9390 0201                 	sts OC+1, r25
000177 2777                      	clr debounceFlag
000178 c050                      	rjmp Endif
                                 
                                 ;//////////////////////////////////////////////////////////////////////
                                 ;######################################################################
                                 keyDebounce:
                                 	;out PORTC, debounceFlag
000179 9180 0204                 	lds r24, DC
00017b 9190 0205                     lds r25, DC+1
00017d 9601                          adiw r25:r24, 1			; Increase the temporary counter by one.
                                 
00017e 3d80                          cpi r24, low(2000)		; disable keypad for 50ms
00017f e007                          ldi temp, high(2000)	; DF=1
000180 0709                          cpc temp, r25
000181 f439                          brne notHundred			; 100 milliseconds have not passed
000182 e0c4
000183 e0d2
000184 2700
000185 9309
000186 8308                      	clear DC
000187 2777                      	clr debounceFlag		; renable keypad
000188 c040                          rjmp EndIF
                                 
                                 notHundred: 		; Store the new value of the debounce counter.
000189 9380 0204                 	sts DC, r24
00018b 9390 0205                 	sts DC+1, r25
00018d c03b                      	rjmp Endif
                                 
                                 
                                 ;#####################################################################################
                                 ;$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
                                 
                                 turnOnLED:
00018e ef0f                      	ser temp
00018f b908                      	out PORTC, temp
000190 bb04                      	out PORTG, temp
000191 3064                      	cpi waitingFlag, 4
000192 f031                      	breq halfSecond
                                 
                                 buttonDebounce:
000193 9631                      	adiw r31:r30,1			; Everytime i increment DebounceCounter
000194 3fe4                      	cpi r30,low(500)		; Check if the debounceCounter reaches ~80ms, we enables the flag
000195 e001                      	ldi temp,high(500)
000196 07f0                      	cpc r31,temp
000197 f409                      	brne halfSecond
000198 e072                      	ldi DebounceFlag, 2		;enable button to interrpt the program
                                 halfSecond:
000199 9180 0202                 	lds r24, HC
00019b 9190 0203                 	lds r25, HC+1 
00019d 9601                      	adiw r25:r24, 1
00019e 3482                      	cpi r24, low(3906)
00019f e00f                      	ldi temp, high(3906)
0001a0 0790                      	cpc r25, temp
0001a1 f481                      	brne NotaHalfSecond
0001a2 e0c2
0001a3 e0d2
0001a4 2700
0001a5 9309
0001a6 8308                      	clear HC
                                 
                                 flashLED:
0001a7 3045                      	cpi counter, 5
0001a8 f229                      	breq isThree
0001a9 9543                      	inc counter
0001aa 2f04                      	mov temp, counter
0001ab 7001                      	andi temp, ODDEVENMASK
0001ac 3000                      	cpi temp, 0			; odd
0001ad f301                      	breq turnOnLED		
0001ae 2700                      	clr temp			; even
0001af b908                      	out PORTC, temp
0001b0 bb04                      	out PORTG, temp
0001b1 c017                      	rjmp Endif
                                 
                                 NotaHalfSecond:
0001b2 9380 0202                 	sts HC, r24
0001b4 9390 0203                 	sts HC+1, r25
0001b6 c012                      	rjmp Endif
                                 
                                 ;$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
                                 checkHash:
0001b7 3074                      	cpi debounceFlag, 4
0001b8 f079                      	breq goChangeScreen
0001b9 3073                      	cpi debounceFlag, 3					; twisted, waiting for main to clr debounce
0001ba f071                      	breq Endif
0001bb 2777                      	clr debounceFlag
0001bc 9631                      	adiw r31:r30, 1
0001bd 32ec                      	cpi r30, low(300)
0001be e001                      	ldi temp, high(300)
0001bf 07f0                      	cpc r31, temp
0001c0 f431                      	brne Not50ms
0001c1 ec0d                      	ldi temp, (1<<ADEN | 1<<ADSC | 1<<ADIE | 5<<ADPS0)	; Read the potentiometer
0001c2 9300 007a                 	sts ADCSRA, temp
0001c4 27ee                      	clr r30
0001c5 27ff                      	clr r31
0001c6 c002                      	rjmp Endif
                                 
                                 Not50ms:
0001c7 c001                      	rjmp Endif
                                 
                                 goChangeScreen:
0001c8 c085                      	rjmp changeScreen
                                 
                                 Endif:
0001c9 918f                      	pop	r24
0001ca 919f                      	pop	r25
0001cb 91cf                      	pop	YL
0001cc 91df                      	pop	YH
0001cd 910f                      	pop	temp
0001ce bf0f                      	out SREG, temp
0001cf 910f                      	pop temp
0001d0 9518                      	reti
                                 
                                 returni:
0001d1 910f                      	pop temp
0001d2 bf0f                      	out SREG, temp
0001d3 910f                      	pop temp
0001d4 9518                      	reti
                                 
                                 increaseInv:
0001d5 930f                      	push temp
0001d6 b70f                      	in temp, SREG
0001d7 930f                      	push temp
0001d8 9100 020e                 	lds temp, QN
0001da 3f0f                      	cpi temp, 255
0001db f3a9                      	breq returni
0001dc 93cf                      	push YL
0001dd 93df                      	push YH
0001de 9503                      	inc temp
0001df 9721                      	sbiw Y, 1
0001e0 8308                      	st Y, temp
0001e1 e078                      	ldi debounceFlag, 8
0001e2 27ee                      	clr r30
0001e3 27ff                      	clr r31
0001e4 91df                      	pop YH
0001e5 91cf                      	pop YL
0001e6 910f                      	pop temp
0001e7 bf0f                      	out SREG, temp
0001e8 910f                      	pop temp
0001e9 9518                      	reti
                                 
                                 decreaseInv:
0001ea 930f                      	push temp
0001eb b70f                      	in temp, SREG
0001ec 930f                      	push temp
0001ed 9100 020e                 	lds temp, QN
0001ef 3000                      	cpi temp, 0
0001f0 f301                      	breq returni
0001f1 93cf                      	push YL
0001f2 93df                      	push YH
0001f3 950a                      	dec temp
0001f4 9721                      	sbiw Y, 1
0001f5 8308                      	st Y, temp
0001f6 e078                      	ldi debounceFlag, 8
0001f7 27ee                      	clr r30
0001f8 27ff                      	clr r31
0001f9 91df                      	pop YH
0001fa 91cf                      	pop YL
0001fb 910f                      	pop temp
0001fc bf0f                      	out SREG, temp
0001fd 910f                      	pop temp
0001fe 9518                      	reti
                                 
                                 PB0_Interrupt:
0001ff 3072                      	cpi debounceFlag, 2				;if the buttons are still debouncing
000200 f4f1                      	brne return						;Do nothing
000201 3065                      	cpi waitingFlag, 5
000202 f291                      	breq increaseInv
000203 930f                      	push temp
000204 b70f                      	in temp, SREG
000205 930f                      	push temp
000206 27ee                      	clr r30
000207 27ff                      	clr r31
000208 2700                      	clr temp
000209 b908                      	out PORTC, temp
00020a bb04                      	out PORTG, temp
00020b 910f                      	pop temp
00020c bf0f                      	out SREG, temp
00020d 910f                      	pop temp
00020e c03f                      	rjmp changeScreen
                                 
                                 PB1_Interrupt:
00020f 3072                      	cpi debounceFlag, 2
000210 f471                      	brne return
000211 3065                      	cpi waitingFlag, 5
000212 f2b9                      	breq decreaseInv
000213 930f                      	push temp
000214 b70f                      	in temp, SREG
000215 930f                      	push temp
000216 27ee                      	clr r30
000217 27ff                      	clr r31
000218 2700                      	clr temp
000219 b908                      	out PORTC, temp
00021a bb04                      	out PORTG, temp
00021b 910f                      	pop temp
00021c bf0f                      	out SREG, temp
00021d 910f                      	pop temp
00021e c02f                      	rjmp changeScreen
                                 
                                 return:
00021f 9518                      	reti
                                 
                                 POT_Interrupt:
000220 3073                      	cpi debounceFlag, 3
000221 f3e9                      	breq return
000222 930f                      	push temp
000223 b70f                      	in temp, SREG
000224 930f                      	push temp
000225 939f                      	push r25
000226 938f                      	push r24
000227 9180 0078                 	lds r24, ADCL
000229 9190 0079                 	lds r25, ADCH
00022b b998                      	out PORTC, r25		; for debug
00022c 3080                      	cpi r24, 0
00022d e000                      	ldi temp, 0
00022e 0790                          cpc r25, temp
00022f f051                      	breq setPOTMinFlag
000230 3f8f                      	cpi r24, 0xFF		; ADCL/H  is 10 bits reg
000231 e003                      	ldi temp, 0b11
000232 0790                          cpc r25, temp
000233 f091                      	breq setPOTMaxFlag
                                 
                                 continue:
000234 918f                      	pop r24
000235 919f                      	pop r25
000236 910f                      	pop temp
000237 bf0f                      	out SREG, temp
000238 910f                      	pop temp
000239 9518                      	reti
                                 
                                 setPOTMinFlag:
00023a 9100 0208                 	lds temp, TF
00023c 3000                      	cpi temp, 0		; if hasn't reached max, ignore the twist
00023d f7b1                      	brne continue
00023e 9503                      	inc temp
00023f 9300 0208                 	sts TF, temp
000241 9543                      	inc counter
                                 	;out PORTC, counter
000242 3042                      	cpi counter, 2
000243 f781                      	brne continue
000244 e073                      	ldi debounceFlag, 3
000245 cfee                      	rjmp continue
                                 
                                 setPOTMaxFlag:
000246 9100 0208                 	lds temp, TF
000248 3001                      	cpi temp, 1
000249 f751                      	brne continue
00024a 2700                      	clr temp
00024b 9300 0208                 	sts TF, temp
                                 	;do_lcd_rdata debounceFlag
00024d cfe6                      	rjmp continue
                                 
                                 changeScreen:
00024e e051
00024f d285
000250 d294                      	do_lcd_command 0b00000001 ; clear display
000251 e553
000252 d289
000253 d291                      	do_lcd_data 'S'
000254 e655
000255 d286
000256 d28e                      	do_lcd_data 'e'
000257 e65c
000258 d283
000259 d28b                      	do_lcd_data 'l'
00025a e655
00025b d280
00025c d288                      	do_lcd_data 'e'
00025d e653
00025e d27d
00025f d285                      	do_lcd_data 'c'
000260 e754
000261 d27a
000262 d282                      	do_lcd_data 't'
000263 e250
000264 d277
000265 d27f                      	do_lcd_data ' '
000266 e659
000267 d274
000268 d27c                      	do_lcd_data 'i'
000269 e754
00026a d271
00026b d279                      	do_lcd_data 't'
00026c e655
00026d d26e
00026e d276                      	do_lcd_data 'e'
00026f e65d
000270 d26b
000271 d273                      	do_lcd_data 'm'
000272 ec50
000273 d261
000274 d270                      	do_lcd_command 0b11000000	; break to the next line
000275 d289                      	rcall sleep_5ms
                                 
000276 2700                      	clr temp
000277 b908                      	out PORTC, temp
000278 bb04                      	out PORTG, temp
                                 
000279 e000                      	ldi temp,(0<<PE4)			; stop the motor
00027a b90e                      	out PORTE, temp
                                 
                                 	; Any time counting should be cleared
00027b e0c0
00027c e0d2
00027d 2700
00027e 9309
00027f 8308                      	clear OC
000280 e0c2
000281 e0d2
000282 2700
000283 9309
000284 8308                      	clear HC
000285 e0c4
000286 e0d2
000287 2700
000288 9309
000289 8308                      	clear DC
00028a 2744                      	clr counter
                                 
00028b 2766                      	clr waitingFlag				; Back to normal mode
00028c 3071                      	cpi debounceFlag, 1			; Any key pressed
00028d f069                      	breq keepDebounce			; disable keypad input for more 50 ms 
00028e 3072                      	cpi debounceFlag, 2			; button interrupted
00028f f049                      	breq returnClear			; clear debounceFlag
000290 3074                      	cpi debounceFlag, 4			; button interrupted
000291 f011                      	breq retCoin			; clear debounceFlag
000292 2777                      	clr debounceFlag
000293 cf35                      	rjmp Endif
                                 retCoin:
000294 e071                      	ldi debounceFlag, 1
000295 2700                      	clr temp
000296 9300 020b                 	sts RF, temp
000298 cee0                      	rjmp keyDebounce
                                 
                                 returnClear:					; return button interrupt
000299 2777                      	clr debounceFlag
00029a 9518                      	reti
                                 
                                 keepDebounce:					; disable keypad input for more 50 ms
00029b cedd                      	rjmp keyDebounce			; debounceFlag will be reset in 50ms
                                 
                                 ;interruption stuff ends
                                 ;*****************************************************************************
                                 
                                 
                                 main:
                                 	; Button PB0 & PB1 initialization
00029c e00a                      	ldi temp, (1<<ISC01 | 1<<ISC11)	;set failing edge for INT0 and INT1
00029d 9300 0069                 	sts EICRA, temp
00029f b30d                      	in temp, EIMSK					
0002a0 6003                      	ori temp, (1<<INT0 | 1<<INT1)	;Enable INT0/1
0002a1 bb0d                      	out EIMSK, temp
                                 
                                 	; Potentiometer initialization
0002a2 ec00                      	ldi temp, (3<<REFS0 | 0<<ADLAR | 0<<MUX0)	;
0002a3 9300 007c                 	sts ADMUX, temp
0002a5 e008                      	ldi temp, (1<<MUX5)	;
0002a6 9300 007b                 	sts ADCSRB, temp
                                 
                                 	; general initialization
0002a8 2744                      	clr counter
0002a9 2777                      	clr debounceFlag
                                 	
                                 	;set timer interrupt
0002aa 2700                      	clr temp
0002ab bd04                      	out TCCR0A, temp
0002ac e002                      	ldi temp, (1<<CS01)
0002ad bd05                      	out TCCR0B, temp		; Prescaling value=8
0002ae e001                      	ldi temp, 1<<TOIE0		; Enable timeroverflow flag
0002af 9300 006e                 	sts TIMSK0, temp
0002b1 9478                      	sei						; Enable global interrupt*/
                                 
                                 	;initialize Z
0002b2 e0f0                      	ldi ZH, high(T << 1)
0002b3 e8ea                      	ldi ZL, low(T << 1)
0002b4 9731                      	sbiw Z, 1
0002b5 e0d2                      	ldi YH, high(QUANTITY)
0002b6 e0cf                      	ldi YL, low(QUANTITY)
0002b7 934f                      	push counter
                                 initQuantity:
                                 	;initialize the quantity
0002b8 9104                      	lpm temp,Z
                                 	;subi temp, 48
0002b9 9731                      	sbiw Z, 1
0002ba 9543                      	inc counter
0002bb 9309                      	st Y+,temp
0002bc 3142                      	cpi counter, 18
0002bd f7d1                      	brne initQuantity
0002be 27ee                      	clr r30
0002bf 27ff                      	clr r31
0002c0 914f                      	pop counter
                                 
0002c1 e061                      	ldi waitingFlag, 1	;initialize the waiting from starting screen
                                 
                                 initKeypadClear:
0002c2 2733                      	clr digit
                                 initKeypad:
                                 	;out PORTC, counter
                                 	; waitingFlag check
0002c3 3062                      	cpi waitingFlag, 2		; WF=2 DF=1 out of stock screen
0002c4 f3f1                      	breq initKeypad
0002c5 3066                      	cpi waitingFlag, 6		; WF=0 DF=6 enter Admin mode
0002c6 f1a1                      	breq goInitAdmin
                                 	; debounce check
0002c7 3071                      	cpi debounceFlag, 1		; WF=0 DF=1 key pressed
0002c8 f3d1                      	breq initKeypad
0002c9 3073                      	cpi debounceFlag, 3		; WF=3 DF=3 insertion finished
0002ca f179                      	breq goPOT
                                 	
0002cb 3078                      	cpi debounceFlag, 8		; WF=5 DF=8 refresh admin screen
0002cc f179                      	breq goAdmin
                                 
0002cd eeaf                          ldi cmask, INITCOLMASK  ; initial column mask
0002ce 2788                          clr col                 ; initial column
0002cf 2700                      	clr temp
0002d0 2711                      	clr temp1
0002d1 2722                      	clr temp2
                                 
                                 colloop:
0002d2 3084                          cpi col, 4
0002d3 f371                          breq initKeypadClear               ; If all keys are scanned, repeat.
0002d4 93a0 010b                     sts PORTL, cmask        ; Otherwise, scan a column.
                                   
0002d6 ef1f                          ldi temp1, 0xFF         ; Slow down the scan operation.
                                 
                                 delay:
0002d7 951a                          dec temp1
0002d8 f7f1                          brne delay              ; until temp1 is zero? - delay
                                 
0002d9 9110 0109                     lds temp1, PINL          ; Read PORTL
0002db 701f                          andi temp1, ROWMASK     ; Get the keypad output value
0002dc 301f                          cpi temp1, 0xF          ; Check if any row is low
0002dd f059                          breq nextcol            ; if not - switch to next column
                                 
                                                             ; If yes, find which row is low
0002de e0b1                          ldi rmask, INITROWMASK  ; initialize for row check
0002df 2799                          clr row
                                 
                                 ; and going into the row loop
                                 rowloop:
0002e0 3094                          cpi row, 4              ; is row already 4?
0002e1 f039                          breq nextcol            ; the row scan is over - next column
0002e2 2f21                          mov temp2, temp1
0002e3 232b                          and temp2, rmask        ; check un-masked bit
0002e4 f041                          breq convert            ; if bit is clear, the key is pressed
0002e5 9593                          inc row                 ; else move to the next row
0002e6 0fbb                          lsl rmask
0002e7 940c 02e0                     jmp rowloop
                                     
                                 nextcol:                    ; if row scan is over
0002e9 0faa                           lsl cmask
0002ea 9583                           inc col                ; increase col value
0002eb 940c 02d2                      jmp colloop            ; go to the next column
                                      
                                 convert:
0002ed 3031                      	cpi digit, 1			; button has not been released yet
0002ee f2a1                      	breq initKeypad			; don't use it, scan again
                                 
0002ef 3083                          cpi col, 3              ; If the pressed key is in col 3
0002f0 f061                          breq letters           ; we have letter
                                                             ; If the key is not in col 3 and
0002f1 3093                          cpi row, 3              ; if the key is in row 3,
0002f2 f189                          breq symbols            ; we have a symbol or 0
0002f3 2f19                          mov temp1, row          ; otherwise we have a number 1-9
0002f4 0f11                          lsl temp1
0002f5 0f19                          add temp1, row
0002f6 0f18                          add temp1, col          ; temp1 = row*3 + col
0002f7 5f1f                      	subi temp1, -1
0002f8 940c 034d                     jmp convert_end
                                 
                                 goPOT:
0002fa c125                      	rjmp POT
                                 goInitAdmin:
0002fb c05a                      	rjmp initAdmin
                                 goAdmin:
0002fc c05f                      	rjmp adminMode
                                     
                                 letters:
0002fd e031                      	ldi digit, 1
0002fe 3065                      	cpi waitingFlag, 5
0002ff f019                      	breq letterAdmin
000300 e071                      	ldi debounceFlag, 1
000301 940c 02c3                     jmp initKeypad
                                 
                                 letterAdmin:
000303 3090                      	cpi row, 0
000304 f039                      	breq A
000305 3091                      	cpi row, 1
000306 f061                      	breq B
000307 3092                      	cpi row, 2
000308 f089                      	breq C
                                 
                                 nothing:
000309 e071                      	ldi debounceFlag, 1
00030a 940c 02c3                     jmp initKeypad
                                 
                                 A:
00030c 9120 020d                 	lds temp2, PR
00030e 3023                      	cpi temp2, 3
00030f f3c9                      	breq nothing
000310 9523                      	inc temp2
000311 8328                      	st Y, temp2
000312 c049                      	rjmp adminMode
                                 
                                 B:
000313 9120 020d                 	lds temp2, PR
000315 3020                      	cpi temp2, 0
000316 f391                      	breq nothing
000317 952a                      	dec temp2
000318 8328                      	st Y, temp2
000319 c042                      	rjmp adminMode
                                 C:
00031a 930f                      	push temp
00031b 93cf                      	push YL
00031c 93df                      	push YH
00031d 9721                      	sbiw Y, 1
00031e 2700                      	clr temp
00031f 8308                      	st Y, temp
000320 91df                      	pop YH
000321 91cf                      	pop YL
000322 910f                      	pop temp
000323 c038                      	rjmp adminMode
                                 
                                 symbols:
000324 3080                          cpi col, 0              ; Check if we have a star
000325 f0d1                          breq star
000326 3081                          cpi col, 1              ; or if we have zero
000327 f109                          breq zero
000328 3063                      	cpi waitingFlag, 3		; # is pressed inserting screen
000329 f031                      	breq abort
00032a 3065                      	cpi waitingFlag, 5		; admin screen
00032b f091                      	breq abortAdmin
00032c e031                      	ldi digit, 1
00032d e071                      	ldi debounceFlag, 1		; 
00032e 940c 02c3                     jmp initKeypad
                                 
                                 abort:
000330 91cf                      	pop YL
000331 91df                      	pop YH
000332 914f                      	pop counter							; coin inserted
000333 912f                      	pop temp2							; coin left
000334 911f                      	pop temp1
000335 910f                      	pop temp							; count left
                                 	;out PORTC, counter
000336 9340 0209                 	sts RC, counter
000338 9310 020c                 	sts RCPATTERN, temp1
00033a 2744                      	clr counter
00033b e074                      	ldi debounceFlag, 4					; # pressed when it's inserting WF=3
00033c 940c 02c3                 	jmp initKeypad
                                 
                                 abortAdmin:
00033e e074                      	ldi debounceFlag, 4			; #is pressed when it's in admin mode WF=5
00033f cf83                      	rjmp initKeypad
                                 
                                 star:
000340 3060                      	cpi waitingFlag, 0
000341 f021                      	breq goingAdmin
000342 e031                      	ldi digit, 1
000343 e071                      	ldi debounceFlag, 1
000344 940c 02c3                     jmp initKeypad
                                 
                                 goingAdmin:
000346 e075                      	ldi debounceFlag, 5				; * has been pressed
000347 940c 02c3                 	jmp initKeypad
                                 
                                 zero:
000349 e031                      	ldi digit, 1
00034a e071                      	ldi debounceFlag, 1
00034b 940c 02c3                 	jmp initKeypad			; no need for that
                                 
                                 convert_end:
00034d 9310 020a                 	sts NP, temp1
00034f 3065                      	cpi waitingFlag, 5
000350 f059                      	breq adminMode
000351 e031                      	ldi digit, 1
000352 e071                      	ldi debounceFlag, 1					; disable keypad
000353 3060                      	cpi waitingFlag, 0
000354 f1a1                      	breq findItem
                                 	
000355 cf6d                          rjmp initKeypad         			; restart the main loop
                                 
                                 initAdmin:
000356 e065                      	ldi waitingFlag, 5
000357 27ee                      	clr r30								; for button debounce
000358 27ff                      	clr r31
000359 e011                      	ldi temp1, 1
00035a 9310 020a                 	sts NP, temp1
                                 adminMode:
00035c 9110 020a                 	lds temp1, NP
00035e e051
00035f d175
000360 d184                      	do_lcd_command 0b00000001 ; clear display
                                 
000361 e451
000362 d179
000363 d181                      	do_lcd_data 'A'
000364 e654
000365 d176
000366 d17e                      	do_lcd_data 'd'
000367 e65d
000368 d173
000369 d17b                      	do_lcd_data 'm'
00036a e659
00036b d170
00036c d178                      	do_lcd_data 'i'
00036d e65e
00036e d16d
00036f d175                      	do_lcd_data 'n'
000370 e250
000371 d16a
000372 d172                      	do_lcd_data ' '
000373 e65d
000374 d167
000375 d16f                      	do_lcd_data 'm'
000376 e65f
000377 d164
000378 d16c                      	do_lcd_data 'o'
000379 e654
00037a d161
00037b d169                      	do_lcd_data 'd'
00037c e655
00037d d15e
00037e d166                      	do_lcd_data 'e'
00037f e250
000380 d15b
000381 d163                      	do_lcd_data ' '
000382 2f51
000383 5d50
000384 d157
000385 d15f                      	do_lcd_rdata temp1
                                 	
000386 9310 020a                 	sts NP, temp1
000388 c000                      	rjmp findItem
                                 
                                 findItem:
000389 9310 020a                 	sts NP, temp1						; Store the number been pressed
00038b e0d2                      	ldi YH, high(QUANTITY)
00038c e0cf                      	ldi YL, low(QUANTITY)
                                 
                                 inventory:
00038d 951a                      	dec temp1
00038e 3010                      	cpi temp1, 0
00038f f011                      	breq goInStock
000390 9622                      	adiw Y, 2
000391 cffb                      	rjmp inventory
                                 
                                 goInStock:
000392 c045                      	rjmp inStock
                                 
                                 showAdmin:
000393 ec50
000394 d140
000395 d14f                      	do_lcd_command 0b11000000	; break to the next line
000396 9100 020e                 	lds temp, QN
000398 d112                      	rcall convert_digits
                                 	;do_lcd_rdata temp
000399 e250
00039a d141
00039b d149                      	do_lcd_data ' '
00039c e250
00039d d13e
00039e d146                      	do_lcd_data ' '
00039f e250
0003a0 d13b
0003a1 d143                      	do_lcd_data ' '
0003a2 e250
0003a3 d138
0003a4 d140                      	do_lcd_data ' '
0003a5 e250
0003a6 d135
0003a7 d13d                      	do_lcd_data ' '
0003a8 e250
0003a9 d132
0003aa d13a                      	do_lcd_data ' '
0003ab e250
0003ac d12f
0003ad d137                      	do_lcd_data ' '
0003ae e250
0003af d12c
0003b0 d134                      	do_lcd_data ' '
0003b1 e254
0003b2 d129
0003b3 d131                      	do_lcd_data '$'
0003b4 9120 020d                 	lds temp2, PR
0003b6 2f52
0003b7 5d50
0003b8 d123
0003b9 d12b                      	do_lcd_rdata temp2
                                 	;ldi debounceFlag, 9
                                 	;out PORTC, debounceFlag
0003ba cf08                      	rjmp initKeypad
                                 
                                 goOutOfStock:
0003bb c07b                      	rjmp outOfStock
                                 
                                 makePattern:
0003bc 930f                      	push temp
0003bd 931f                      	push temp1
0003be 932f                      	push temp2
0003bf 2711                      	clr temp1
0003c0 2722                      	clr temp2
                                 loopPattern:
0003c1 3000                      	cpi temp, 0
0003c2 f079                      	breq showPattern
0003c3 3f1f                      	cpi temp1, 0xFF
0003c4 f021                      	breq overEight
0003c5 0f11                      	lsl temp1
0003c6 9513                      	inc temp1
0003c7 950a                      	dec temp
                                 	
0003c8 cff8                      	rjmp loopPattern
                                 
                                 overEight:
0003c9 3023                      	cpi temp2, 0b11
0003ca f419                      	brne notTen
0003cb 2711                      	clr temp1
0003cc 2722                      	clr temp2
0003cd cff3                      	rjmp loopPattern
                                 notTen:
0003ce 0f22                      	lsl temp2
0003cf 9523                      	inc temp2
0003d0 950a                      	dec temp
0003d1 cfef                      	rjmp loopPattern
                                 showPattern:
0003d2 b918                      	out PORTC, temp1
0003d3 bb24                      	out PORTG, temp2
0003d4 912f                      	pop temp2
0003d5 911f                      	pop temp1
0003d6 910f                      	pop temp
0003d7 cfbb                      	rjmp showAdmin
                                 
                                 inStock:
0003d8 9109                      	ld temp, Y+				;quantity
0003d9 9300 020e                 	sts QN, temp
0003db 8128                      	ld temp2, Y				;price
0003dc 9320 020d                 	sts PR, temp2
                                 
0003de 3065                      	cpi waitingFlag, 5
0003df f2e1                      	breq makePattern
                                 
0003e0 3000                      	cpi temp, 0
0003e1 f2c9                      	breq goOutOfStock
0003e2 2744                      	clr counter
                                 
                                 insertCoin:
0003e3 930f                      	push temp
0003e4 931f                      	push temp1
0003e5 932f                      	push temp2
0003e6 934f                      	push counter
0003e7 93df                      	push YH
0003e8 93cf                      	push YL
0003e9 e051
0003ea d0ea
0003eb d0f9                      	do_lcd_command 0b00000001 ; clear display
0003ec e459
0003ed d0ee
0003ee d0f6                      	do_lcd_data 'I'
0003ef e65e
0003f0 d0eb
0003f1 d0f3                      	do_lcd_data 'n'
0003f2 e753
0003f3 d0e8
0003f4 d0f0                      	do_lcd_data 's'
0003f5 e655
0003f6 d0e5
0003f7 d0ed                      	do_lcd_data 'e'
0003f8 e752
0003f9 d0e2
0003fa d0ea                      	do_lcd_data 'r'
0003fb e754
0003fc d0df
0003fd d0e7                      	do_lcd_data 't'
0003fe e250
0003ff d0dc
000400 d0e4                      	do_lcd_data ' '
000401 e653
000402 d0d9
000403 d0e1                      	do_lcd_data 'c'
000404 e65f
000405 d0d6
000406 d0de                      	do_lcd_data 'o'
000407 e659
000408 d0d3
000409 d0db                      	do_lcd_data 'i'
00040a e65e
00040b d0d0
00040c d0d8                      	do_lcd_data 'n'
00040d e753
00040e d0cd
00040f d0d5                      	do_lcd_data 's'
000410 d09a                      	rcall convert_digits
                                 	;do_lcd_rdata temp			; count left
                                 	;do_lcd_rdata temp			; coin Inserted
000411 ec50
000412 d0c2
000413 d0d1                      	do_lcd_command 0b11000000	; break to the next line
000414 2f52
000415 5d50
000416 d0c5
000417 d0cd                      	do_lcd_rdata temp2			; coin left
                                 
                                 initPOT:								; WF=0 DF=1 
000418 e063                      	ldi waitingFlag, 3					; WF=3 DF=0 diable keyPad but "#" in normal mode
                                 										; waiting for twisted
                                 
000419 2700                      	clr temp							; Flag for two side
00041a 9300 0208                 	sts TF, temp
00041c 2744                      	clr counter
00041d 2777                      	clr debounceFlag							; for the num of coins inserted
00041e 27ee                      	clr r30
00041f 27ff                      	clr r31
                                 
                                 POT:
000420 3073                      	cpi debounceFlag, 3					; see if the twist has been twisted 
000421 f4a1                      	brne goInitial
000422 e400                      	ldi temp, (0<<ADEN | 1<<ADSC | 0<<ADIE)	; disable potentiometer
000423 9300 007a                 	sts ADCSRA, temp
000425 2777                      	clr debounceFlag
000426 91cf                      	pop YL
000427 91df                      	pop YH
000428 914f                      	pop counter
000429 912f                      	pop temp2							; coin left
00042a 911f                      	pop temp1
00042b 910f                      	pop temp							; count left
00042c 9543                      	inc counter
                                 
00042d 0f11                      	lsl temp1
00042e 9513                      	inc temp1
00042f b918                      	out PORTC, temp1
                                 	
000430 5021                      	subi temp2, 1						; 
000431 3020                      	cpi temp2, 0						; if all coin has been inserted
000432 f411                      	brne goInsert						; refresh the screen
000433 2766                      	clr waitingFlag
000434 c03a                      	rjmp delivery
                                 
                                 goInsert:
000435 cfad                      	rjmp insertCoin
                                 goInitial:
000436 ce8c                      	rjmp initKeypad
                                 
                                 outOfStock:
000437 9100 020a                 	lds temp, NP
000439 e051
00043a d09a
00043b d0a9                      	do_lcd_command 0b00000001 ; clear display
00043c e45f
00043d d09e
00043e d0a6                      	do_lcd_data 'O'
00043f e755
000440 d09b
000441 d0a3                      	do_lcd_data 'u'
000442 e754
000443 d098
000444 d0a0                      	do_lcd_data 't'
000445 e250
000446 d095
000447 d09d                      	do_lcd_data ' '
000448 e65f
000449 d092
00044a d09a                      	do_lcd_data 'o'
00044b e656
00044c d08f
00044d d097                      	do_lcd_data 'f'
00044e e250
00044f d08c
000450 d094                      	do_lcd_data ' '
000451 e753
000452 d089
000453 d091                      	do_lcd_data 's'
000454 e754
000455 d086
000456 d08e                      	do_lcd_data 't'
000457 e65f
000458 d083
000459 d08b                      	do_lcd_data 'o'
00045a e653
00045b d080
00045c d088                      	do_lcd_data 'c'
00045d e65b
00045e d07d
00045f d085                      	do_lcd_data 'k'
000460 ec50
000461 d073
000462 d082                      	do_lcd_command 0b11000000	; break to the next line
000463 2f50
000464 5d50
000465 d076
000466 d07e                      	do_lcd_rdata temp
000467 d097                      	rcall sleep_5ms
000468 ef0f                      	ser temp					; let LED to be on as default
000469 b908                      	out PORTC, temp
                                 
00046a 27ee                      	clr r30					; clr button debounce counter
00046b 27ff                      	clr r31
00046c 2744                      	clr counter
                                 
00046d e062                      	ldi waitingFlag, 2		; enter led subroutine in TFOVR, DF=1
00046e ce54                      	rjmp initKeypad
                                 
                                 delivery:
00046f 5001                      	subi temp, 1
000470 930a                      	st -Y, temp
000471 e051
000472 d062
000473 d071                      	do_lcd_command 0b00000001 ; clear display
                                 
000474 e454
000475 d066
000476 d06e                      	do_lcd_data 'D'
000477 e655
000478 d063
000479 d06b                      	do_lcd_data 'e'
00047a e65c
00047b d060
00047c d068                      	do_lcd_data 'l'
00047d e659
00047e d05d
00047f d065                      	do_lcd_data 'i'
000480 e756
000481 d05a
000482 d062                      	do_lcd_data 'v'
000483 e655
000484 d057
000485 d05f                      	do_lcd_data 'e'
000486 e752
000487 d054
000488 d05c                      	do_lcd_data 'r'
000489 e659
00048a d051
00048b d059                      	do_lcd_data 'i'
00048c e65e
00048d d04e
00048e d056                      	do_lcd_data 'n'
00048f e657
000490 d04b
000491 d053                      	do_lcd_data 'g'
000492 e250
000493 d048
000494 d050                      	do_lcd_data ' '
000495 e659
000496 d045
000497 d04d                      	do_lcd_data 'i'
000498 e754
000499 d042
00049a d04a                      	do_lcd_data 't'
00049b e655
00049c d03f
00049d d047                      	do_lcd_data 'e'
00049e e65d
00049f d03c
0004a0 d044                      	do_lcd_data 'm'
                                 
0004a1 ec50
0004a2 d032
0004a3 d041                      	do_lcd_command 0b11000000	; break to the next line
                                 
0004a4 ef0f                      	ser temp					; let LED to be on as default
0004a5 b908                      	out PORTC, temp
                                 
0004a6 e100                      	ldi temp,(1<<PE4)			; start the motor
0004a7 b90e                      	out PORTE, temp
                                 
0004a8 e064                      	ldi waitingFlag, 4
                                 
0004a9 2744                      	clr counter
0004aa cf8b                      	rjmp goInitial
                                 
                                 
                                 
                                 
                                 
                                 ; main program ends here
                                 ;****************************************************************************************
                                 ;*******************************************    *****************************************
                                 ;*******************************************    *****************************************
                                 ;*******************************************    *****************************************
                                 ;***************************************   *    *   *************************************
                                 ;************************************  *   *    *   *   *********************************
                                 ;************************************  *   *    *   *  **********************************
                                 ;**************************************               ***********************************
                                 ;*****************************************          *************************************
                                 
                                 convert_digits:
0004ab 933f                      	push digit
0004ac 930f                      	push temp
0004ad 2733                      	clr digit
                                 	;push temp
0004ae 931f                      	push temp1
                                 	;push temp2
                                 checkHundreds:
0004af 3604                      	cpi temp, 100			; is the number still > 100?
0004b0 f498                      	brsh hundredsDigit		; if YES - increase hundreds digit
0004b1 3030                      	cpi digit, 0		
0004b2 f4c1                      	brne showHundredsDigit	; If digit ! 0 => this digit goes into stack
                                 		
                                 checkTensInit:
0004b3 2733                      	clr digit
                                 checkTens:
0004b4 300a                      	cpi temp, 10			; is the number still > 10? 
0004b5 f490                      	brsh tensDigit			; if YES - increase tens digit
0004b6 3010                      	cpi temp1, 0
0004b7 f4c1                      	brne showTensDigit
0004b8 3030                      	cpi digit, 0			; is tens digit = 0?
0004b9 f4b1                      	brne showTensDigit		; if digit != 0 push it to the stack	
                                 	
                                 checkOnes:
0004ba 2733                      	clr digit
0004bb 2f30                      	mov digit, temp			; whatever is left in temp is the ones digit
                                 	; now all digit temp data is in the stack
                                 	; unload data into temp2, temp1, temp
                                 	; and the do_lcd_rdata in reverse order
                                 	; this will display the currentNumber value to LCD
                                 	; it's not an elegant solution but will do for now
0004bc 2f53
0004bd 5d50
0004be d01d
0004bf d025                      	do_lcd_rdata digit
0004c0 911f                      	pop temp1
0004c1 910f                      	pop temp
0004c2 913f                      	pop digit
0004c3 9508                      	ret
                                 
                                 ; hundreds digit
                                 hundredsDigit:
0004c4 e011                      	ldi temp1, 1
0004c5 9533                      	inc digit
0004c6 5604                      	subi temp, 100			; and subtract a 100 from the number
0004c7 cfe7                      	rjmp checkHundreds		; check hundreds again
                                 
                                 ; tens digit
                                 tensDigit:
0004c8 9533                      	inc digit				; if YES increase the digit count
0004c9 500a                      	subi temp, 10			; and subtract a 10 from the number
0004ca cfe9                      	rjmp checkTens			; check tens again
                                 
                                 showHundredsDigit:
0004cb 2f53
0004cc 5d50
0004cd d00e
0004ce d016                      	do_lcd_rdata digit
0004cf cfe3                      	rjmp checkTensInit
                                 
                                 showTensDigit:
0004d0 2f53
0004d1 5d50
0004d2 d009
0004d3 d011                      	do_lcd_rdata digit
0004d4 cfe5                      	rjmp checkOnes
                                 
                                 
                                 ; lcd stuff
                                 
                                 lcd_command:
0004d5 bb51                      	out PORTF, lcd
0004d6 d01f                      	rcall sleep_1ms
0004d7 9a16                      	lcd_set LCD_E
0004d8 d01d                      	rcall sleep_1ms
0004d9 9816                      	lcd_clr LCD_E
0004da d01b                      	rcall sleep_1ms
0004db 9508                      	ret
                                 
                                 lcd_data:
0004dc bb51                      	out PORTF, lcd
0004dd 9a17                      	lcd_set LCD_RS
0004de d017                      	rcall sleep_1ms
0004df 9a16                      	lcd_set LCD_E
0004e0 d015                      	rcall sleep_1ms
0004e1 9816                      	lcd_clr LCD_E
0004e2 d013                      	rcall sleep_1ms
0004e3 9817                      	lcd_clr LCD_RS
0004e4 9508                      	ret
                                 
                                 
                                 lcd_wait:
0004e5 935f                      	push lcd
0004e6 2755                      	clr lcd
0004e7 bb50                      	out DDRF, lcd
0004e8 bb51                      	out PORTF, lcd
0004e9 9a15                      	lcd_set LCD_RW
                                 
                                 lcd_wait_loop:
0004ea d00b                      	rcall sleep_1ms
0004eb 9a16                      	lcd_set LCD_E
0004ec d009                      	rcall sleep_1ms
0004ed b15f                      	in lcd, PINF
0004ee 9816                      	lcd_clr LCD_E
0004ef fd57                      	sbrc lcd, 7
0004f0 cff9                      	rjmp lcd_wait_loop
0004f1 9815                      	lcd_clr LCD_RW
0004f2 ef5f                      	ser lcd
0004f3 bb50                      	out DDRF, lcd
0004f4 915f                      	pop lcd
0004f5 9508                      	ret
                                 
                                 ; For LCD delay
                                 .equ F_CPU = 16000000
                                 .equ DELAY_1MS = F_CPU / 4 / 1000 - 4
                                 ; 4 cycles per iteration - setup/call-return overhead
                                 
                                 sleep_1ms:
0004f6 938f                      		push r24
0004f7 939f                      		push r25
0004f8 e09f                      		ldi r25, high(DELAY_1MS)
0004f9 e98c                      		ldi r24, low(DELAY_1MS)
                                 delayloop_1ms:
0004fa 9701                      		sbiw r25:r24, 1
0004fb f7f1                      		brne delayloop_1ms
0004fc 919f                      		pop r25
0004fd 918f                      		pop r24
0004fe 9508                      		ret
                                 
                                 sleep_5ms:
0004ff dff6                      		rcall sleep_1ms
000500 dff5                      		rcall sleep_1ms
000501 dff4                      		rcall sleep_1ms
000502 dff3                      		rcall sleep_1ms
000503 dff2                      		rcall sleep_1ms


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

"ATmega2560" register use summary:
x  :   0 y  :  41 z  :   3 r0 :   0 r1 :   0 r2 :   0 r3 :   0 r4 :   0 
r5 :   0 r6 :   0 r7 :   0 r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 
r13:   0 r14:   0 r15:   0 r16: 227 r17:  42 r18:  29 r19:  21 r20:  27 
r21: 143 r22:  25 r23:  43 r24:  34 r25:  37 r26:   3 r27:   3 r28:  29 
r29:  29 r30:  17 r31:  17 
Registers used: 18 out of 35 (51.4%)

"ATmega2560" instruction use summary:
.lds  :   0 .sts  :   0 adc   :   0 add   :   2 adiw  :   8 and   :   1 
andi  :   2 asr   :   0 bclr  :   0 bld   :   0 brbc  :   0 brbs  :   0 
brcc  :   0 brcs  :   0 break :   0 breq  :  59 brge  :   0 brhc  :   0 
brhs  :   0 brid  :   0 brie  :   0 brlo  :   0 brlt  :   0 brmi  :   0 
brne  :  23 brpl  :   0 brsh  :   2 brtc  :   0 brts  :   0 brvc  :   0 
brvs  :   0 bset  :   0 bst   :   0 call  :   0 cbi   :   5 cbr   :   0 
clc   :   0 clh   :   0 cli   :   0 cln   :   0 clr   :  80 cls   :   0 
clt   :   0 clv   :   0 clz   :   0 com   :   0 cp    :   0 cpc   :   9 
cpi   :  81 cpse  :   0 dec   :   7 eicall:   0 eijmp :   0 elpm  :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :   8 inc   :  17 jmp   :  16 ld    :   2 ldd   :   0 ldi   : 210 
lds   :  25 lpm   :   2 lsl   :   6 lsr   :   1 mov   :  11 movw  :   0 
mul   :   0 muls  :   0 mulsu :   0 neg   :   0 nop   :   0 or    :   0 
ori   :   1 out   :  47 pop   :  49 push  :  41 rcall : 269 ret   :   6 
reti  :   7 rjmp  :  59 rol   :   0 ror   :   0 sbc   :   0 sbci  :   0 
sbi   :   5 sbic  :   0 sbis  :   0 sbiw  :   6 sbr   :   0 sbrc  :   1 
sbrs  :   0 sec   :   0 seh   :   0 sei   :   1 sen   :   0 ser   :   6 
ses   :   0 set   :   0 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  35 std   :   0 sts   :  32 sub   :   0 subi  :  12 swap  :   0 
tst   :   0 wdr   :   0 
Instructions used: 38 out of 116 (32.8%)

"ATmega2560" memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000a0a   2452     18   2470  262144   0.9%
[.dseg] 0x000200 0x000221      0     33     33    8192   0.4%
[.eseg] 0x000000 0x000000      0      0      0    4096   0.0%

Assembly complete, 0 errors, 2 warnings
