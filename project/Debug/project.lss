
AVRASM ver. 2.2.6  C:\Users\Edward\Desktop\project\project\main.asm Thu Jun 01 01:31:49 2017

[builtin](2): Including file 'D:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.2.132\avrasm\inc\m2560def.inc'
C:\Users\Edward\Desktop\project\project\main.asm(8): Including file 'D:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.2.132\avrasm\inc\m2560def.inc'
C:\Users\Edward\Desktop\project\project\main.asm(20): warning: Register r26 already defined by the .DEF directive
C:\Users\Edward\Desktop\project\project\main.asm(21): warning: Register r27 already defined by the .DEF directive
[builtin](2): Including file 'D:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.2.132\avrasm\inc\m2560def.inc'
C:\Users\Edward\Desktop\project\project\main.asm(8): Including file 'D:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.2.132\avrasm\inc\m2560def.inc'
                                 
                                 ;
                                 
                                 ;***** Created: 2011-02-09 12:03 ******* Source: ATmega2560.xml **********
                                 ;*************************************************************************
                                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                                 ;* 
                                 ;* Number            : AVR000
                                 ;* File Name         : "m2560def.inc"
                                 ;* Title             : Register/Bit Definitions for the ATmega2560
                                 ;* Date              : 2011-02-09
                                 ;* Version           : 2.35
                                 ;* Support E-mail    : avr@atmel.com
                                 ;* Target MCU        : ATmega2560
                                 ;* 
                                 ;* DESCRIPTION
                                 ;* When including this file in the assembly program file, all I/O register 
                                 ;* names and I/O register bit names appearing in the data book can be used.
                                 ;* In addition, the six registers forming the three data pointers X, Y and 
                                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                                 ;* SRAM is also defined 
                                 ;* 
                                 ;* The Register names are represented by their hexadecimal address.
                                 ;* 
                                 ;* The Register Bit names are represented by their bit number (0-7).
                                 ;* 
                                 ;* Please observe the difference in using the bit names with instructions
                                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                                 ;* (skip if bit in register set/cleared). The following example illustrates
                                 ;* this:
                                 ;* 
                                 ;* in    r16,PORTB             ;read PORTB latch
                                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                                 ;* out   PORTB,r16             ;output to PORTB
                                 ;* 
                                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                                 ;* rjmp  TOV0_is_set           ;jump if set
                                 ;* ...                         ;otherwise do something else
                                 ;*************************************************************************
                                 
                                 #ifndef _M2560DEF_INC_
                                 #define _M2560DEF_INC_
                                 
                                 
                                 #pragma partinc 0
                                 
                                 ; ***** SPECIFY DEVICE ***************************************************
                                 .device ATmega2560
                                 #pragma AVRPART ADMIN PART_NAME ATmega2560
                                 .equ	SIGNATURE_000	= 0x1e
                                 .equ	SIGNATURE_001	= 0x98
                                 .equ	SIGNATURE_002	= 0x01
                                 
                                 #pragma AVRPART CORE CORE_VERSION V3
                                 
                                 
                                 ; ***** I/O REGISTER DEFINITIONS *****************************************
                                 ; NOTE:
                                 ; Definitions marked "MEMORY MAPPED"are extended I/O ports
                                 ; and cannot be used with IN/OUT instructions
                                 .equ	UDR3	= 0x136	; MEMORY MAPPED
                                 .equ	UBRR3L	= 0x134	; MEMORY MAPPED
                                 .equ	UBRR3H	= 0x135	; MEMORY MAPPED
                                 .equ	UCSR3C	= 0x132	; MEMORY MAPPED
                                 .equ	UCSR3B	= 0x131	; MEMORY MAPPED
                                 .equ	UCSR3A	= 0x130	; MEMORY MAPPED
                                 .equ	OCR5CL	= 0x12c	; MEMORY MAPPED
                                 .equ	OCR5CH	= 0x12d	; MEMORY MAPPED
                                 .equ	OCR5BL	= 0x12a	; MEMORY MAPPED
                                 .equ	OCR5BH	= 0x12b	; MEMORY MAPPED
                                 .equ	OCR5AL	= 0x128	; MEMORY MAPPED
                                 .equ	OCR5AH	= 0x129	; MEMORY MAPPED
                                 .equ	ICR5H	= 0x127	; MEMORY MAPPED
                                 .equ	ICR5L	= 0x126	; MEMORY MAPPED
                                 .equ	TCNT5L	= 0x124	; MEMORY MAPPED
                                 .equ	TCNT5H	= 0x125	; MEMORY MAPPED
                                 .equ	TCCR5C	= 0x122	; MEMORY MAPPED
                                 .equ	TCCR5B	= 0x121	; MEMORY MAPPED
                                 .equ	TCCR5A	= 0x120	; MEMORY MAPPED
                                 .equ	PORTL	= 0x10b	; MEMORY MAPPED
                                 .equ	DDRL	= 0x10a	; MEMORY MAPPED
                                 .equ	PINL	= 0x109	; MEMORY MAPPED
                                 .equ	PORTK	= 0x108	; MEMORY MAPPED
                                 .equ	DDRK	= 0x107	; MEMORY MAPPED
                                 .equ	PINK	= 0x106	; MEMORY MAPPED
                                 .equ	PORTJ	= 0x105	; MEMORY MAPPED
                                 .equ	DDRJ	= 0x104	; MEMORY MAPPED
                                 .equ	PINJ	= 0x103	; MEMORY MAPPED
                                 .equ	PORTH	= 0x102	; MEMORY MAPPED
                                 .equ	DDRH	= 0x101	; MEMORY MAPPED
                                 .equ	PINH	= 0x100	; MEMORY MAPPED
                                 .equ	UDR2	= 0xd6	; MEMORY MAPPED
                                 .equ	UBRR2L	= 0xd4	; MEMORY MAPPED
                                 .equ	UBRR2H	= 0xd5	; MEMORY MAPPED
                                 .equ	UCSR2C	= 0xd2	; MEMORY MAPPED
                                 .equ	UCSR2B	= 0xd1	; MEMORY MAPPED
                                 .equ	UCSR2A	= 0xd0	; MEMORY MAPPED
                                 .equ	UDR1	= 0xce	; MEMORY MAPPED
                                 .equ	UBRR1L	= 0xcc	; MEMORY MAPPED
                                 .equ	UBRR1H	= 0xcd	; MEMORY MAPPED
                                 .equ	UCSR1C	= 0xca	; MEMORY MAPPED
                                 .equ	UCSR1B	= 0xc9	; MEMORY MAPPED
                                 .equ	UCSR1A	= 0xc8	; MEMORY MAPPED
                                 .equ	UDR0	= 0xc6	; MEMORY MAPPED
                                 .equ	UBRR0L	= 0xc4	; MEMORY MAPPED
                                 .equ	UBRR0H	= 0xc5	; MEMORY MAPPED
                                 .equ	UCSR0C	= 0xc2	; MEMORY MAPPED
                                 .equ	UCSR0B	= 0xc1	; MEMORY MAPPED
                                 .equ	UCSR0A	= 0xc0	; MEMORY MAPPED
                                 .equ	TWAMR	= 0xbd	; MEMORY MAPPED
                                 .equ	TWCR	= 0xbc	; MEMORY MAPPED
                                 .equ	TWDR	= 0xbb	; MEMORY MAPPED
                                 .equ	TWAR	= 0xba	; MEMORY MAPPED
                                 .equ	TWSR	= 0xb9	; MEMORY MAPPED
                                 .equ	TWBR	= 0xb8	; MEMORY MAPPED
                                 .equ	ASSR	= 0xb6	; MEMORY MAPPED
                                 .equ	OCR2B	= 0xb4	; MEMORY MAPPED
                                 .equ	OCR2A	= 0xb3	; MEMORY MAPPED
                                 .equ	TCNT2	= 0xb2	; MEMORY MAPPED
                                 .equ	TCCR2B	= 0xb1	; MEMORY MAPPED
                                 .equ	TCCR2A	= 0xb0	; MEMORY MAPPED
                                 .equ	OCR4CL	= 0xac	; MEMORY MAPPED
                                 .equ	OCR4CH	= 0xad	; MEMORY MAPPED
                                 .equ	OCR4BL	= 0xaa	; MEMORY MAPPED
                                 .equ	OCR4BH	= 0xab	; MEMORY MAPPED
                                 .equ	OCR4AL	= 0xa8	; MEMORY MAPPED
                                 .equ	OCR4AH	= 0xa9	; MEMORY MAPPED
                                 .equ	ICR4L	= 0xa6	; MEMORY MAPPED
                                 .equ	ICR4H	= 0xa7	; MEMORY MAPPED
                                 .equ	TCNT4L	= 0xa4	; MEMORY MAPPED
                                 .equ	TCNT4H	= 0xa5	; MEMORY MAPPED
                                 .equ	TCCR4C	= 0xa2	; MEMORY MAPPED
                                 .equ	TCCR4B	= 0xa1	; MEMORY MAPPED
                                 .equ	TCCR4A	= 0xa0	; MEMORY MAPPED
                                 .equ	OCR3CL	= 0x9c	; MEMORY MAPPED
                                 .equ	OCR3CH	= 0x9d	; MEMORY MAPPED
                                 .equ	OCR3BL	= 0x9a	; MEMORY MAPPED
                                 .equ	OCR3BH	= 0x9b	; MEMORY MAPPED
                                 .equ	OCR3AL	= 0x98	; MEMORY MAPPED
                                 .equ	OCR3AH	= 0x99	; MEMORY MAPPED
                                 .equ	ICR3L	= 0x96	; MEMORY MAPPED
                                 .equ	ICR3H	= 0x97	; MEMORY MAPPED
                                 .equ	TCNT3L	= 0x94	; MEMORY MAPPED
                                 .equ	TCNT3H	= 0x95	; MEMORY MAPPED
                                 .equ	TCCR3C	= 0x92	; MEMORY MAPPED
                                 .equ	TCCR3B	= 0x91	; MEMORY MAPPED
                                 .equ	TCCR3A	= 0x90	; MEMORY MAPPED
                                 .equ	OCR1CL	= 0x8c	; MEMORY MAPPED
                                 .equ	OCR1CH	= 0x8d	; MEMORY MAPPED
                                 .equ	OCR1BL	= 0x8a	; MEMORY MAPPED
                                 .equ	OCR1BH	= 0x8b	; MEMORY MAPPED
                                 .equ	OCR1AL	= 0x88	; MEMORY MAPPED
                                 .equ	OCR1AH	= 0x89	; MEMORY MAPPED
                                 .equ	ICR1L	= 0x86	; MEMORY MAPPED
                                 .equ	ICR1H	= 0x87	; MEMORY MAPPED
                                 .equ	TCNT1L	= 0x84	; MEMORY MAPPED
                                 .equ	TCNT1H	= 0x85	; MEMORY MAPPED
                                 .equ	TCCR1C	= 0x82	; MEMORY MAPPED
                                 .equ	TCCR1B	= 0x81	; MEMORY MAPPED
                                 .equ	TCCR1A	= 0x80	; MEMORY MAPPED
                                 .equ	DIDR1	= 0x7f	; MEMORY MAPPED
                                 .equ	DIDR0	= 0x7e	; MEMORY MAPPED
                                 .equ	DIDR2	= 0x7d	; MEMORY MAPPED
                                 .equ	ADMUX	= 0x7c	; MEMORY MAPPED
                                 .equ	ADCSRB	= 0x7b	; MEMORY MAPPED
                                 .equ	ADCSRA	= 0x7a	; MEMORY MAPPED
                                 .equ	ADCH	= 0x79	; MEMORY MAPPED
                                 .equ	ADCL	= 0x78	; MEMORY MAPPED
                                 .equ	XMCRB	= 0x75	; MEMORY MAPPED
                                 .equ	XMCRA	= 0x74	; MEMORY MAPPED
                                 .equ	TIMSK5	= 0x73	; MEMORY MAPPED
                                 .equ	TIMSK4	= 0x72	; MEMORY MAPPED
                                 .equ	TIMSK3	= 0x71	; MEMORY MAPPED
                                 .equ	TIMSK2	= 0x70	; MEMORY MAPPED
                                 .equ	TIMSK1	= 0x6f	; MEMORY MAPPED
                                 .equ	TIMSK0	= 0x6e	; MEMORY MAPPED
                                 .equ	PCMSK2	= 0x6d	; MEMORY MAPPED
                                 .equ	PCMSK1	= 0x6c	; MEMORY MAPPED
                                 .equ	PCMSK0	= 0x6b	; MEMORY MAPPED
                                 .equ	EICRB	= 0x6a	; MEMORY MAPPED
                                 .equ	EICRA	= 0x69	; MEMORY MAPPED
                                 .equ	PCICR	= 0x68	; MEMORY MAPPED
                                 .equ	OSCCAL	= 0x66	; MEMORY MAPPED
                                 .equ	PRR1	= 0x65	; MEMORY MAPPED
                                 .equ	PRR0	= 0x64	; MEMORY MAPPED
                                 .equ	CLKPR	= 0x61	; MEMORY MAPPED
                                 .equ	WDTCSR	= 0x60	; MEMORY MAPPED
                                 .equ	SREG	= 0x3f
                                 .equ	SPL	= 0x3d
                                 .equ	SPH	= 0x3e
                                 .equ	EIND	= 0x3c
                                 .equ	RAMPZ	= 0x3b
                                 .equ	SPMCSR	= 0x37
                                 .equ	MCUCR	= 0x35
                                 .equ	MCUSR	= 0x34
                                 .equ	SMCR	= 0x33
                                 .equ	OCDR	= 0x31
                                 .equ	ACSR	= 0x30
                                 .equ	SPDR	= 0x2e
                                 .equ	SPSR	= 0x2d
                                 .equ	SPCR	= 0x2c
                                 .equ	GPIOR2	= 0x2b
                                 .equ	GPIOR1	= 0x2a
                                 .equ	OCR0B	= 0x28
                                 .equ	OCR0A	= 0x27
                                 .equ	TCNT0	= 0x26
                                 .equ	TCCR0B	= 0x25
                                 .equ	TCCR0A	= 0x24
                                 .equ	GTCCR	= 0x23
                                 .equ	EEARH	= 0x22
                                 .equ	EEARL	= 0x21
                                 .equ	EEDR	= 0x20
                                 .equ	EECR	= 0x1f
                                 .equ	GPIOR0	= 0x1e
                                 .equ	EIMSK	= 0x1d
                                 .equ	EIFR	= 0x1c
                                 .equ	PCIFR	= 0x1b
                                 .equ	TIFR5	= 0x1a
                                 .equ	TIFR4	= 0x19
                                 .equ	TIFR3	= 0x18
                                 .equ	TIFR2	= 0x17
                                 .equ	TIFR1	= 0x16
                                 .equ	TIFR0	= 0x15
                                 .equ	PORTG	= 0x14
                                 .equ	DDRG	= 0x13
                                 .equ	PING	= 0x12
                                 .equ	PORTF	= 0x11
                                 .equ	DDRF	= 0x10
                                 .equ	PINF	= 0x0f
                                 .equ	PORTE	= 0x0e
                                 .equ	DDRE	= 0x0d
                                 .equ	PINE	= 0x0c
                                 .equ	PORTD	= 0x0b
                                 .equ	DDRD	= 0x0a
                                 .equ	PIND	= 0x09
                                 .equ	PORTC	= 0x08
                                 .equ	DDRC	= 0x07
                                 .equ	PINC	= 0x06
                                 .equ	PORTB	= 0x05
                                 .equ	DDRB	= 0x04
                                 .equ	PINB	= 0x03
                                 .equ	PORTA	= 0x02
                                 .equ	DDRA	= 0x01
                                 .equ	PINA	= 0x00
                                 
                                 
                                 ; ***** BIT DEFINITIONS **************************************************
                                 
                                 ; ***** ANALOG_COMPARATOR ************
                                 ; ADCSRB - ADC Control and Status Register B
                                 .equ	ACME	= 6	; Analog Comparator Multiplexer Enable
                                 
                                 ; ACSR - Analog Comparator Control And Status Register
                                 .equ	ACIS0	= 0	; Analog Comparator Interrupt Mode Select bit 0
                                 .equ	ACIS1	= 1	; Analog Comparator Interrupt Mode Select bit 1
                                 .equ	ACIC	= 2	; Analog Comparator Input Capture Enable
                                 .equ	ACIE	= 3	; Analog Comparator Interrupt Enable
                                 .equ	ACI	= 4	; Analog Comparator Interrupt Flag
                                 .equ	ACO	= 5	; Analog Compare Output
                                 .equ	ACBG	= 6	; Analog Comparator Bandgap Select
                                 .equ	ACD	= 7	; Analog Comparator Disable
                                 
                                 ; DIDR1 - Digital Input Disable Register 1
                                 .equ	AIN0D	= 0	; AIN0 Digital Input Disable
                                 .equ	AIN1D	= 1	; AIN1 Digital Input Disable
                                 
                                 
                                 ; ***** USART0 ***********************
                                 ; UDR0 - USART I/O Data Register
                                 .equ	UDR0_0	= 0	; USART I/O Data Register bit 0
                                 .equ	UDR0_1	= 1	; USART I/O Data Register bit 1
                                 .equ	UDR0_2	= 2	; USART I/O Data Register bit 2
                                 .equ	UDR0_3	= 3	; USART I/O Data Register bit 3
                                 .equ	UDR0_4	= 4	; USART I/O Data Register bit 4
                                 .equ	UDR0_5	= 5	; USART I/O Data Register bit 5
                                 .equ	UDR0_6	= 6	; USART I/O Data Register bit 6
                                 .equ	UDR0_7	= 7	; USART I/O Data Register bit 7
                                 
                                 ; UCSR0A - USART Control and Status Register A
                                 .equ	MPCM0	= 0	; Multi-processor Communication Mode
                                 .equ	U2X0	= 1	; Double the USART transmission speed
                                 .equ	UPE0	= 2	; Parity Error
                                 .equ	DOR0	= 3	; Data overRun
                                 .equ	FE0	= 4	; Framing Error
                                 .equ	UDRE0	= 5	; USART Data Register Empty
                                 .equ	TXC0	= 6	; USART Transmitt Complete
                                 .equ	RXC0	= 7	; USART Receive Complete
                                 
                                 ; UCSR0B - USART Control and Status Register B
                                 .equ	TXB80	= 0	; Transmit Data Bit 8
                                 .equ	RXB80	= 1	; Receive Data Bit 8
                                 .equ	UCSZ02	= 2	; Character Size
                                 .equ	TXEN0	= 3	; Transmitter Enable
                                 .equ	RXEN0	= 4	; Receiver Enable
                                 .equ	UDRIE0	= 5	; USART Data register Empty Interrupt Enable
                                 .equ	TXCIE0	= 6	; TX Complete Interrupt Enable
                                 .equ	RXCIE0	= 7	; RX Complete Interrupt Enable
                                 
                                 ; UCSR0C - USART Control and Status Register C
                                 .equ	UCPOL0	= 0	; Clock Polarity
                                 .equ	UCSZ00	= 1	; Character Size
                                 .equ	UCPHA0	= UCSZ00	; For compatibility
                                 .equ	UCSZ01	= 2	; Character Size
                                 .equ	UDORD0	= UCSZ01	; For compatibility
                                 .equ	USBS0	= 3	; Stop Bit Select
                                 .equ	UPM00	= 4	; Parity Mode Bit 0
                                 .equ	UPM01	= 5	; Parity Mode Bit 1
                                 .equ	UMSEL00	= 6	; USART Mode Select
                                 .equ	UMSEL0	= UMSEL00	; For compatibility
                                 .equ	UMSEL01	= 7	; USART Mode Select
                                 .equ	UMSEL1	= UMSEL01	; For compatibility
                                 
                                 ; UBRR0H - USART Baud Rate Register High Byte
                                 .equ	UBRR8	= 0	; USART Baud Rate Register bit 8
                                 .equ	UBRR9	= 1	; USART Baud Rate Register bit 9
                                 .equ	UBRR10	= 2	; USART Baud Rate Register bit 10
                                 .equ	UBRR11	= 3	; USART Baud Rate Register bit 11
                                 
                                 ; UBRR0L - USART Baud Rate Register Low Byte
                                 .equ	_UBRR0	= 0	; USART Baud Rate Register bit 0
                                 .equ	_UBRR1	= 1	; USART Baud Rate Register bit 1
                                 .equ	UBRR2	= 2	; USART Baud Rate Register bit 2
                                 .equ	UBRR3	= 3	; USART Baud Rate Register bit 3
                                 .equ	UBRR4	= 4	; USART Baud Rate Register bit 4
                                 .equ	UBRR5	= 5	; USART Baud Rate Register bit 5
                                 .equ	UBRR6	= 6	; USART Baud Rate Register bit 6
                                 .equ	UBRR7	= 7	; USART Baud Rate Register bit 7
                                 
                                 
                                 ; ***** TWI **************************
                                 ; TWAMR - TWI (Slave) Address Mask Register
                                 .equ	TWAM0	= 1	; 
                                 .equ	TWAMR0	= TWAM0	; For compatibility
                                 .equ	TWAM1	= 2	; 
                                 .equ	TWAMR1	= TWAM1	; For compatibility
                                 .equ	TWAM2	= 3	; 
                                 .equ	TWAMR2	= TWAM2	; For compatibility
                                 .equ	TWAM3	= 4	; 
                                 .equ	TWAMR3	= TWAM3	; For compatibility
                                 .equ	TWAM4	= 5	; 
                                 .equ	TWAMR4	= TWAM4	; For compatibility
                                 .equ	TWAM5	= 6	; 
                                 .equ	TWAMR5	= TWAM5	; For compatibility
                                 .equ	TWAM6	= 7	; 
                                 .equ	TWAMR6	= TWAM6	; For compatibility
                                 
                                 ; TWBR - TWI Bit Rate register
                                 .equ	TWBR0	= 0	; 
                                 .equ	TWBR1	= 1	; 
                                 .equ	TWBR2	= 2	; 
                                 .equ	TWBR3	= 3	; 
                                 .equ	TWBR4	= 4	; 
                                 .equ	TWBR5	= 5	; 
                                 .equ	TWBR6	= 6	; 
                                 .equ	TWBR7	= 7	; 
                                 
                                 ; TWCR - TWI Control Register
                                 .equ	TWIE	= 0	; TWI Interrupt Enable
                                 .equ	TWEN	= 2	; TWI Enable Bit
                                 .equ	TWWC	= 3	; TWI Write Collition Flag
                                 .equ	TWSTO	= 4	; TWI Stop Condition Bit
                                 .equ	TWSTA	= 5	; TWI Start Condition Bit
                                 .equ	TWEA	= 6	; TWI Enable Acknowledge Bit
                                 .equ	TWINT	= 7	; TWI Interrupt Flag
                                 
                                 ; TWSR - TWI Status Register
                                 .equ	TWPS0	= 0	; TWI Prescaler
                                 .equ	TWPS1	= 1	; TWI Prescaler
                                 .equ	TWS3	= 3	; TWI Status
                                 .equ	TWS4	= 4	; TWI Status
                                 .equ	TWS5	= 5	; TWI Status
                                 .equ	TWS6	= 6	; TWI Status
                                 .equ	TWS7	= 7	; TWI Status
                                 
                                 ; TWDR - TWI Data register
                                 .equ	TWD0	= 0	; TWI Data Register Bit 0
                                 .equ	TWD1	= 1	; TWI Data Register Bit 1
                                 .equ	TWD2	= 2	; TWI Data Register Bit 2
                                 .equ	TWD3	= 3	; TWI Data Register Bit 3
                                 .equ	TWD4	= 4	; TWI Data Register Bit 4
                                 .equ	TWD5	= 5	; TWI Data Register Bit 5
                                 .equ	TWD6	= 6	; TWI Data Register Bit 6
                                 .equ	TWD7	= 7	; TWI Data Register Bit 7
                                 
                                 ; TWAR - TWI (Slave) Address register
                                 .equ	TWGCE	= 0	; TWI General Call Recognition Enable Bit
                                 .equ	TWA0	= 1	; TWI (Slave) Address register Bit 0
                                 .equ	TWA1	= 2	; TWI (Slave) Address register Bit 1
                                 .equ	TWA2	= 3	; TWI (Slave) Address register Bit 2
                                 .equ	TWA3	= 4	; TWI (Slave) Address register Bit 3
                                 .equ	TWA4	= 5	; TWI (Slave) Address register Bit 4
                                 .equ	TWA5	= 6	; TWI (Slave) Address register Bit 5
                                 .equ	TWA6	= 7	; TWI (Slave) Address register Bit 6
                                 
                                 
                                 ; ***** SPI **************************
                                 ; SPDR - SPI Data Register
                                 .equ	SPDR0	= 0	; SPI Data Register bit 0
                                 .equ	SPDR1	= 1	; SPI Data Register bit 1
                                 .equ	SPDR2	= 2	; SPI Data Register bit 2
                                 .equ	SPDR3	= 3	; SPI Data Register bit 3
                                 .equ	SPDR4	= 4	; SPI Data Register bit 4
                                 .equ	SPDR5	= 5	; SPI Data Register bit 5
                                 .equ	SPDR6	= 6	; SPI Data Register bit 6
                                 .equ	SPDR7	= 7	; SPI Data Register bit 7
                                 
                                 ; SPSR - SPI Status Register
                                 .equ	SPI2X	= 0	; Double SPI Speed Bit
                                 .equ	WCOL	= 6	; Write Collision Flag
                                 .equ	SPIF	= 7	; SPI Interrupt Flag
                                 
                                 ; SPCR - SPI Control Register
                                 .equ	SPR0	= 0	; SPI Clock Rate Select 0
                                 .equ	SPR1	= 1	; SPI Clock Rate Select 1
                                 .equ	CPHA	= 2	; Clock Phase
                                 .equ	CPOL	= 3	; Clock polarity
                                 .equ	MSTR	= 4	; Master/Slave Select
                                 .equ	DORD	= 5	; Data Order
                                 .equ	SPE	= 6	; SPI Enable
                                 .equ	SPIE	= 7	; SPI Interrupt Enable
                                 
                                 
                                 ; ***** PORTA ************************
                                 ; PORTA - Port A Data Register
                                 .equ	PORTA0	= 0	; Port A Data Register bit 0
                                 .equ	PA0	= 0	; For compatibility
                                 .equ	PORTA1	= 1	; Port A Data Register bit 1
                                 .equ	PA1	= 1	; For compatibility
                                 .equ	PORTA2	= 2	; Port A Data Register bit 2
                                 .equ	PA2	= 2	; For compatibility
                                 .equ	PORTA3	= 3	; Port A Data Register bit 3
                                 .equ	PA3	= 3	; For compatibility
                                 .equ	PORTA4	= 4	; Port A Data Register bit 4
                                 .equ	PA4	= 4	; For compatibility
                                 .equ	PORTA5	= 5	; Port A Data Register bit 5
                                 .equ	PA5	= 5	; For compatibility
                                 .equ	PORTA6	= 6	; Port A Data Register bit 6
                                 .equ	PA6	= 6	; For compatibility
                                 .equ	PORTA7	= 7	; Port A Data Register bit 7
                                 .equ	PA7	= 7	; For compatibility
                                 
                                 ; DDRA - Port A Data Direction Register
                                 .equ	DDA0	= 0	; Data Direction Register, Port A, bit 0
                                 .equ	DDA1	= 1	; Data Direction Register, Port A, bit 1
                                 .equ	DDA2	= 2	; Data Direction Register, Port A, bit 2
                                 .equ	DDA3	= 3	; Data Direction Register, Port A, bit 3
                                 .equ	DDA4	= 4	; Data Direction Register, Port A, bit 4
                                 .equ	DDA5	= 5	; Data Direction Register, Port A, bit 5
                                 .equ	DDA6	= 6	; Data Direction Register, Port A, bit 6
                                 .equ	DDA7	= 7	; Data Direction Register, Port A, bit 7
                                 
                                 ; PINA - Port A Input Pins
                                 .equ	PINA0	= 0	; Input Pins, Port A bit 0
                                 .equ	PINA1	= 1	; Input Pins, Port A bit 1
                                 .equ	PINA2	= 2	; Input Pins, Port A bit 2
                                 .equ	PINA3	= 3	; Input Pins, Port A bit 3
                                 .equ	PINA4	= 4	; Input Pins, Port A bit 4
                                 .equ	PINA5	= 5	; Input Pins, Port A bit 5
                                 .equ	PINA6	= 6	; Input Pins, Port A bit 6
                                 .equ	PINA7	= 7	; Input Pins, Port A bit 7
                                 
                                 
                                 ; ***** PORTB ************************
                                 ; PORTB - Port B Data Register
                                 .equ	PORTB0	= 0	; Port B Data Register bit 0
                                 .equ	PB0	= 0	; For compatibility
                                 .equ	PORTB1	= 1	; Port B Data Register bit 1
                                 .equ	PB1	= 1	; For compatibility
                                 .equ	PORTB2	= 2	; Port B Data Register bit 2
                                 .equ	PB2	= 2	; For compatibility
                                 .equ	PORTB3	= 3	; Port B Data Register bit 3
                                 .equ	PB3	= 3	; For compatibility
                                 .equ	PORTB4	= 4	; Port B Data Register bit 4
                                 .equ	PB4	= 4	; For compatibility
                                 .equ	PORTB5	= 5	; Port B Data Register bit 5
                                 .equ	PB5	= 5	; For compatibility
                                 .equ	PORTB6	= 6	; Port B Data Register bit 6
                                 .equ	PB6	= 6	; For compatibility
                                 .equ	PORTB7	= 7	; Port B Data Register bit 7
                                 .equ	PB7	= 7	; For compatibility
                                 
                                 ; DDRB - Port B Data Direction Register
                                 .equ	DDB0	= 0	; Port B Data Direction Register bit 0
                                 .equ	DDB1	= 1	; Port B Data Direction Register bit 1
                                 .equ	DDB2	= 2	; Port B Data Direction Register bit 2
                                 .equ	DDB3	= 3	; Port B Data Direction Register bit 3
                                 .equ	DDB4	= 4	; Port B Data Direction Register bit 4
                                 .equ	DDB5	= 5	; Port B Data Direction Register bit 5
                                 .equ	DDB6	= 6	; Port B Data Direction Register bit 6
                                 .equ	DDB7	= 7	; Port B Data Direction Register bit 7
                                 
                                 ; PINB - Port B Input Pins
                                 .equ	PINB0	= 0	; Port B Input Pins bit 0
                                 .equ	PINB1	= 1	; Port B Input Pins bit 1
                                 .equ	PINB2	= 2	; Port B Input Pins bit 2
                                 .equ	PINB3	= 3	; Port B Input Pins bit 3
                                 .equ	PINB4	= 4	; Port B Input Pins bit 4
                                 .equ	PINB5	= 5	; Port B Input Pins bit 5
                                 .equ	PINB6	= 6	; Port B Input Pins bit 6
                                 .equ	PINB7	= 7	; Port B Input Pins bit 7
                                 
                                 
                                 ; ***** PORTC ************************
                                 ; PORTC - Port C Data Register
                                 .equ	PORTC0	= 0	; Port C Data Register bit 0
                                 .equ	PC0	= 0	; For compatibility
                                 .equ	PORTC1	= 1	; Port C Data Register bit 1
                                 .equ	PC1	= 1	; For compatibility
                                 .equ	PORTC2	= 2	; Port C Data Register bit 2
                                 .equ	PC2	= 2	; For compatibility
                                 .equ	PORTC3	= 3	; Port C Data Register bit 3
                                 .equ	PC3	= 3	; For compatibility
                                 .equ	PORTC4	= 4	; Port C Data Register bit 4
                                 .equ	PC4	= 4	; For compatibility
                                 .equ	PORTC5	= 5	; Port C Data Register bit 5
                                 .equ	PC5	= 5	; For compatibility
                                 .equ	PORTC6	= 6	; Port C Data Register bit 6
                                 .equ	PC6	= 6	; For compatibility
                                 .equ	PORTC7	= 7	; Port C Data Register bit 7
                                 .equ	PC7	= 7	; For compatibility
                                 
                                 ; DDRC - Port C Data Direction Register
                                 .equ	DDC0	= 0	; Port C Data Direction Register bit 0
                                 .equ	DDC1	= 1	; Port C Data Direction Register bit 1
                                 .equ	DDC2	= 2	; Port C Data Direction Register bit 2
                                 .equ	DDC3	= 3	; Port C Data Direction Register bit 3
                                 .equ	DDC4	= 4	; Port C Data Direction Register bit 4
                                 .equ	DDC5	= 5	; Port C Data Direction Register bit 5
                                 .equ	DDC6	= 6	; Port C Data Direction Register bit 6
                                 .equ	DDC7	= 7	; Port C Data Direction Register bit 7
                                 
                                 ; PINC - Port C Input Pins
                                 .equ	PINC0	= 0	; Port C Input Pins bit 0
                                 .equ	PINC1	= 1	; Port C Input Pins bit 1
                                 .equ	PINC2	= 2	; Port C Input Pins bit 2
                                 .equ	PINC3	= 3	; Port C Input Pins bit 3
                                 .equ	PINC4	= 4	; Port C Input Pins bit 4
                                 .equ	PINC5	= 5	; Port C Input Pins bit 5
                                 .equ	PINC6	= 6	; Port C Input Pins bit 6
                                 .equ	PINC7	= 7	; Port C Input Pins bit 7
                                 
                                 
                                 ; ***** PORTD ************************
                                 ; PORTD - Port D Data Register
                                 .equ	PORTD0	= 0	; Port D Data Register bit 0
                                 .equ	PD0	= 0	; For compatibility
                                 .equ	PORTD1	= 1	; Port D Data Register bit 1
                                 .equ	PD1	= 1	; For compatibility
                                 .equ	PORTD2	= 2	; Port D Data Register bit 2
                                 .equ	PD2	= 2	; For compatibility
                                 .equ	PORTD3	= 3	; Port D Data Register bit 3
                                 .equ	PD3	= 3	; For compatibility
                                 .equ	PORTD4	= 4	; Port D Data Register bit 4
                                 .equ	PD4	= 4	; For compatibility
                                 .equ	PORTD5	= 5	; Port D Data Register bit 5
                                 .equ	PD5	= 5	; For compatibility
                                 .equ	PORTD6	= 6	; Port D Data Register bit 6
                                 .equ	PD6	= 6	; For compatibility
                                 .equ	PORTD7	= 7	; Port D Data Register bit 7
                                 .equ	PD7	= 7	; For compatibility
                                 
                                 ; DDRD - Port D Data Direction Register
                                 .equ	DDD0	= 0	; Port D Data Direction Register bit 0
                                 .equ	DDD1	= 1	; Port D Data Direction Register bit 1
                                 .equ	DDD2	= 2	; Port D Data Direction Register bit 2
                                 .equ	DDD3	= 3	; Port D Data Direction Register bit 3
                                 .equ	DDD4	= 4	; Port D Data Direction Register bit 4
                                 .equ	DDD5	= 5	; Port D Data Direction Register bit 5
                                 .equ	DDD6	= 6	; Port D Data Direction Register bit 6
                                 .equ	DDD7	= 7	; Port D Data Direction Register bit 7
                                 
                                 ; PIND - Port D Input Pins
                                 .equ	PIND0	= 0	; Port D Input Pins bit 0
                                 .equ	PIND1	= 1	; Port D Input Pins bit 1
                                 .equ	PIND2	= 2	; Port D Input Pins bit 2
                                 .equ	PIND3	= 3	; Port D Input Pins bit 3
                                 .equ	PIND4	= 4	; Port D Input Pins bit 4
                                 .equ	PIND5	= 5	; Port D Input Pins bit 5
                                 .equ	PIND6	= 6	; Port D Input Pins bit 6
                                 .equ	PIND7	= 7	; Port D Input Pins bit 7
                                 
                                 
                                 ; ***** PORTE ************************
                                 ; PORTE - Data Register, Port E
                                 .equ	PORTE0	= 0	; 
                                 .equ	PE0	= 0	; For compatibility
                                 .equ	PORTE1	= 1	; 
                                 .equ	PE1	= 1	; For compatibility
                                 .equ	PORTE2	= 2	; 
                                 .equ	PE2	= 2	; For compatibility
                                 .equ	PORTE3	= 3	; 
                                 .equ	PE3	= 3	; For compatibility
                                 .equ	PORTE4	= 4	; 
                                 .equ	PE4	= 4	; For compatibility
                                 .equ	PORTE5	= 5	; 
                                 .equ	PE5	= 5	; For compatibility
                                 .equ	PORTE6	= 6	; 
                                 .equ	PE6	= 6	; For compatibility
                                 .equ	PORTE7	= 7	; 
                                 .equ	PE7	= 7	; For compatibility
                                 
                                 ; DDRE - Data Direction Register, Port E
                                 .equ	DDE0	= 0	; 
                                 .equ	DDE1	= 1	; 
                                 .equ	DDE2	= 2	; 
                                 .equ	DDE3	= 3	; 
                                 .equ	DDE4	= 4	; 
                                 .equ	DDE5	= 5	; 
                                 .equ	DDE6	= 6	; 
                                 .equ	DDE7	= 7	; 
                                 
                                 ; PINE - Input Pins, Port E
                                 .equ	PINE0	= 0	; 
                                 .equ	PINE1	= 1	; 
                                 .equ	PINE2	= 2	; 
                                 .equ	PINE3	= 3	; 
                                 .equ	PINE4	= 4	; 
                                 .equ	PINE5	= 5	; 
                                 .equ	PINE6	= 6	; 
                                 .equ	PINE7	= 7	; 
                                 
                                 
                                 ; ***** PORTF ************************
                                 ; PORTF - Data Register, Port F
                                 .equ	PORTF0	= 0	; 
                                 .equ	PF0	= 0	; For compatibility
                                 .equ	PORTF1	= 1	; 
                                 .equ	PF1	= 1	; For compatibility
                                 .equ	PORTF2	= 2	; 
                                 .equ	PF2	= 2	; For compatibility
                                 .equ	PORTF3	= 3	; 
                                 .equ	PF3	= 3	; For compatibility
                                 .equ	PORTF4	= 4	; 
                                 .equ	PF4	= 4	; For compatibility
                                 .equ	PORTF5	= 5	; 
                                 .equ	PF5	= 5	; For compatibility
                                 .equ	PORTF6	= 6	; 
                                 .equ	PF6	= 6	; For compatibility
                                 .equ	PORTF7	= 7	; 
                                 .equ	PF7	= 7	; For compatibility
                                 
                                 ; DDRF - Data Direction Register, Port F
                                 .equ	DDF0	= 0	; 
                                 .equ	DDF1	= 1	; 
                                 .equ	DDF2	= 2	; 
                                 .equ	DDF3	= 3	; 
                                 .equ	DDF4	= 4	; 
                                 .equ	DDF5	= 5	; 
                                 .equ	DDF6	= 6	; 
                                 .equ	DDF7	= 7	; 
                                 
                                 ; PINF - Input Pins, Port F
                                 .equ	PINF0	= 0	; 
                                 .equ	PINF1	= 1	; 
                                 .equ	PINF2	= 2	; 
                                 .equ	PINF3	= 3	; 
                                 .equ	PINF4	= 4	; 
                                 .equ	PINF5	= 5	; 
                                 .equ	PINF6	= 6	; 
                                 .equ	PINF7	= 7	; 
                                 
                                 
                                 ; ***** PORTG ************************
                                 ; PORTG - Data Register, Port G
                                 .equ	PORTG0	= 0	; 
                                 .equ	PG0	= 0	; For compatibility
                                 .equ	PORTG1	= 1	; 
                                 .equ	PG1	= 1	; For compatibility
                                 .equ	PORTG2	= 2	; 
                                 .equ	PG2	= 2	; For compatibility
                                 .equ	PORTG3	= 3	; 
                                 .equ	PG3	= 3	; For compatibility
                                 .equ	PORTG4	= 4	; 
                                 .equ	PG4	= 4	; For compatibility
                                 .equ	PORTG5	= 5	; 
                                 .equ	PG5	= 5	; For compatibility
                                 
                                 ; DDRG - Data Direction Register, Port G
                                 .equ	DDG0	= 0	; 
                                 .equ	DDG1	= 1	; 
                                 .equ	DDG2	= 2	; 
                                 .equ	DDG3	= 3	; 
                                 .equ	DDG4	= 4	; 
                                 .equ	DDG5	= 5	; 
                                 
                                 ; PING - Input Pins, Port G
                                 .equ	PING0	= 0	; 
                                 .equ	PING1	= 1	; 
                                 .equ	PING2	= 2	; 
                                 .equ	PING3	= 3	; 
                                 .equ	PING4	= 4	; 
                                 .equ	PING5	= 5	; 
                                 
                                 
                                 ; ***** PORTH ************************
                                 ; PORTH - PORT H Data Register
                                 .equ	PORTH0	= 0	; PORT H Data Register bit 0
                                 .equ	PH0	= 0	; For compatibility
                                 .equ	PORTH1	= 1	; PORT H Data Register bit 1
                                 .equ	PH1	= 1	; For compatibility
                                 .equ	PORTH2	= 2	; PORT H Data Register bit 2
                                 .equ	PH2	= 2	; For compatibility
                                 .equ	PORTH3	= 3	; PORT H Data Register bit 3
                                 .equ	PH3	= 3	; For compatibility
                                 .equ	PORTH4	= 4	; PORT H Data Register bit 4
                                 .equ	PH4	= 4	; For compatibility
                                 .equ	PORTH5	= 5	; PORT H Data Register bit 5
                                 .equ	PH5	= 5	; For compatibility
                                 .equ	PORTH6	= 6	; PORT H Data Register bit 6
                                 .equ	PH6	= 6	; For compatibility
                                 .equ	PORTH7	= 7	; PORT H Data Register bit 7
                                 .equ	PH7	= 7	; For compatibility
                                 
                                 ; DDRH - PORT H Data Direction Register
                                 .equ	DDH0	= 0	; PORT H Data Direction Register bit 0
                                 .equ	DDH1	= 1	; PORT H Data Direction Register bit 1
                                 .equ	DDH2	= 2	; PORT H Data Direction Register bit 2
                                 .equ	DDH3	= 3	; PORT H Data Direction Register bit 3
                                 .equ	DDH4	= 4	; PORT H Data Direction Register bit 4
                                 .equ	DDH5	= 5	; PORT H Data Direction Register bit 5
                                 .equ	DDH6	= 6	; PORT H Data Direction Register bit 6
                                 .equ	DDH7	= 7	; PORT H Data Direction Register bit 7
                                 
                                 ; PINH - PORT H Input Pins
                                 .equ	PINH0	= 0	; PORT H Input Pins bit 0
                                 .equ	PINH1	= 1	; PORT H Input Pins bit 1
                                 .equ	PINH2	= 2	; PORT H Input Pins bit 2
                                 .equ	PINH3	= 3	; PORT H Input Pins bit 3
                                 .equ	PINH4	= 4	; PORT H Input Pins bit 4
                                 .equ	PINH5	= 5	; PORT H Input Pins bit 5
                                 .equ	PINH6	= 6	; PORT H Input Pins bit 6
                                 .equ	PINH7	= 7	; PORT H Input Pins bit 7
                                 
                                 
                                 ; ***** PORTJ ************************
                                 ; PORTJ - PORT J Data Register
                                 .equ	PORTJ0	= 0	; PORT J Data Register bit 0
                                 .equ	PJ0	= 0	; For compatibility
                                 .equ	PORTJ1	= 1	; PORT J Data Register bit 1
                                 .equ	PJ1	= 1	; For compatibility
                                 .equ	PORTJ2	= 2	; PORT J Data Register bit 2
                                 .equ	PJ2	= 2	; For compatibility
                                 .equ	PORTJ3	= 3	; PORT J Data Register bit 3
                                 .equ	PJ3	= 3	; For compatibility
                                 .equ	PORTJ4	= 4	; PORT J Data Register bit 4
                                 .equ	PJ4	= 4	; For compatibility
                                 .equ	PORTJ5	= 5	; PORT J Data Register bit 5
                                 .equ	PJ5	= 5	; For compatibility
                                 .equ	PORTJ6	= 6	; PORT J Data Register bit 6
                                 .equ	PJ6	= 6	; For compatibility
                                 .equ	PORTJ7	= 7	; PORT J Data Register bit 7
                                 .equ	PJ7	= 7	; For compatibility
                                 
                                 ; DDRJ - PORT J Data Direction Register
                                 .equ	DDJ0	= 0	; PORT J Data Direction Register bit 0
                                 .equ	DDJ1	= 1	; PORT J Data Direction Register bit 1
                                 .equ	DDJ2	= 2	; PORT J Data Direction Register bit 2
                                 .equ	DDJ3	= 3	; PORT J Data Direction Register bit 3
                                 .equ	DDJ4	= 4	; PORT J Data Direction Register bit 4
                                 .equ	DDJ5	= 5	; PORT J Data Direction Register bit 5
                                 .equ	DDJ6	= 6	; PORT J Data Direction Register bit 6
                                 .equ	DDJ7	= 7	; PORT J Data Direction Register bit 7
                                 
                                 ; PINJ - PORT J Input Pins
                                 .equ	PINJ0	= 0	; PORT J Input Pins bit 0
                                 .equ	PINJ1	= 1	; PORT J Input Pins bit 1
                                 .equ	PINJ2	= 2	; PORT J Input Pins bit 2
                                 .equ	PINJ3	= 3	; PORT J Input Pins bit 3
                                 .equ	PINJ4	= 4	; PORT J Input Pins bit 4
                                 .equ	PINJ5	= 5	; PORT J Input Pins bit 5
                                 .equ	PINJ6	= 6	; PORT J Input Pins bit 6
                                 .equ	PINJ7	= 7	; PORT J Input Pins bit 7
                                 
                                 
                                 ; ***** PORTK ************************
                                 ; PORTK - PORT K Data Register
                                 .equ	PORTK0	= 0	; PORT K Data Register bit 0
                                 .equ	PK0	= 0	; For compatibility
                                 .equ	PORTK1	= 1	; PORT K Data Register bit 1
                                 .equ	PK1	= 1	; For compatibility
                                 .equ	PORTK2	= 2	; PORT K Data Register bit 2
                                 .equ	PK2	= 2	; For compatibility
                                 .equ	PORTK3	= 3	; PORT K Data Register bit 3
                                 .equ	PK3	= 3	; For compatibility
                                 .equ	PORTK4	= 4	; PORT K Data Register bit 4
                                 .equ	PK4	= 4	; For compatibility
                                 .equ	PORTK5	= 5	; PORT K Data Register bit 5
                                 .equ	PK5	= 5	; For compatibility
                                 .equ	PORTK6	= 6	; PORT K Data Register bit 6
                                 .equ	PK6	= 6	; For compatibility
                                 .equ	PORTK7	= 7	; PORT K Data Register bit 7
                                 .equ	PK7	= 7	; For compatibility
                                 
                                 ; DDRK - PORT K Data Direction Register
                                 .equ	DDK0	= 0	; PORT K Data Direction Register bit 0
                                 .equ	DDK1	= 1	; PORT K Data Direction Register bit 1
                                 .equ	DDK2	= 2	; PORT K Data Direction Register bit 2
                                 .equ	DDK3	= 3	; PORT K Data Direction Register bit 3
                                 .equ	DDK4	= 4	; PORT K Data Direction Register bit 4
                                 .equ	DDK5	= 5	; PORT K Data Direction Register bit 5
                                 .equ	DDK6	= 6	; PORT K Data Direction Register bit 6
                                 .equ	DDK7	= 7	; PORT K Data Direction Register bit 7
                                 
                                 ; PINK - PORT K Input Pins
                                 .equ	PINK0	= 0	; PORT K Input Pins bit 0
                                 .equ	PINK1	= 1	; PORT K Input Pins bit 1
                                 .equ	PINK2	= 2	; PORT K Input Pins bit 2
                                 .equ	PINK3	= 3	; PORT K Input Pins bit 3
                                 .equ	PINK4	= 4	; PORT K Input Pins bit 4
                                 .equ	PINK5	= 5	; PORT K Input Pins bit 5
                                 .equ	PINK6	= 6	; PORT K Input Pins bit 6
                                 .equ	PINK7	= 7	; PORT K Input Pins bit 7
                                 
                                 
                                 ; ***** PORTL ************************
                                 ; PORTL - PORT L Data Register
                                 .equ	PORTL0	= 0	; PORT L Data Register bit 0
                                 .equ	PL0	= 0	; For compatibility
                                 .equ	PORTL1	= 1	; PORT L Data Register bit 1
                                 .equ	PL1	= 1	; For compatibility
                                 .equ	PORTL2	= 2	; PORT L Data Register bit 2
                                 .equ	PL2	= 2	; For compatibility
                                 .equ	PORTL3	= 3	; PORT L Data Register bit 3
                                 .equ	PL3	= 3	; For compatibility
                                 .equ	PORTL4	= 4	; PORT L Data Register bit 4
                                 .equ	PL4	= 4	; For compatibility
                                 .equ	PORTL5	= 5	; PORT L Data Register bit 5
                                 .equ	PL5	= 5	; For compatibility
                                 .equ	PORTL6	= 6	; PORT L Data Register bit 6
                                 .equ	PL6	= 6	; For compatibility
                                 .equ	PORTL7	= 7	; PORT L Data Register bit 7
                                 .equ	PL7	= 7	; For compatibility
                                 
                                 ; DDRL - PORT L Data Direction Register
                                 .equ	DDL0	= 0	; PORT L Data Direction Register bit 0
                                 .equ	DDL1	= 1	; PORT L Data Direction Register bit 1
                                 .equ	DDL2	= 2	; PORT L Data Direction Register bit 2
                                 .equ	DDL3	= 3	; PORT L Data Direction Register bit 3
                                 .equ	DDL4	= 4	; PORT L Data Direction Register bit 4
                                 .equ	DDL5	= 5	; PORT L Data Direction Register bit 5
                                 .equ	DDL6	= 6	; PORT L Data Direction Register bit 6
                                 .equ	DDL7	= 7	; PORT L Data Direction Register bit 7
                                 
                                 ; PINL - PORT L Input Pins
                                 .equ	PINL0	= 0	; PORT L Input Pins bit 0
                                 .equ	PINL1	= 1	; PORT L Input Pins bit 1
                                 .equ	PINL2	= 2	; PORT L Input Pins bit 2
                                 .equ	PINL3	= 3	; PORT L Input Pins bit 3
                                 .equ	PINL4	= 4	; PORT L Input Pins bit 4
                                 .equ	PINL5	= 5	; PORT L Input Pins bit 5
                                 .equ	PINL6	= 6	; PORT L Input Pins bit 6
                                 .equ	PINL7	= 7	; PORT L Input Pins bit 7
                                 
                                 
                                 ; ***** TIMER_COUNTER_0 **************
                                 ; TIMSK0 - Timer/Counter0 Interrupt Mask Register
                                 .equ	TOIE0	= 0	; Timer/Counter0 Overflow Interrupt Enable
                                 .equ	OCIE0A	= 1	; Timer/Counter0 Output Compare Match A Interrupt Enable
                                 .equ	OCIE0B	= 2	; Timer/Counter0 Output Compare Match B Interrupt Enable
                                 
                                 ; TIFR0 - Timer/Counter0 Interrupt Flag register
                                 .equ	TOV0	= 0	; Timer/Counter0 Overflow Flag
                                 .equ	OCF0A	= 1	; Timer/Counter0 Output Compare Flag 0A
                                 .equ	OCF0B	= 2	; Timer/Counter0 Output Compare Flag 0B
                                 
                                 ; TCCR0A - Timer/Counter  Control Register A
                                 .equ	WGM00	= 0	; Waveform Generation Mode
                                 .equ	WGM01	= 1	; Waveform Generation Mode
                                 .equ	COM0B0	= 4	; Compare Output Mode, Fast PWm
                                 .equ	COM0B1	= 5	; Compare Output Mode, Fast PWm
                                 .equ	COM0A0	= 6	; Compare Output Mode, Phase Correct PWM Mode
                                 .equ	COM0A1	= 7	; Compare Output Mode, Phase Correct PWM Mode
                                 
                                 ; TCCR0B - Timer/Counter Control Register B
                                 .equ	CS00	= 0	; Clock Select
                                 .equ	CS01	= 1	; Clock Select
                                 .equ	CS02	= 2	; Clock Select
                                 .equ	WGM02	= 3	; 
                                 .equ	FOC0B	= 6	; Force Output Compare B
                                 .equ	FOC0A	= 7	; Force Output Compare A
                                 
                                 ; TCNT0 - Timer/Counter0
                                 .equ	TCNT0_0	= 0	; 
                                 .equ	TCNT0_1	= 1	; 
                                 .equ	TCNT0_2	= 2	; 
                                 .equ	TCNT0_3	= 3	; 
                                 .equ	TCNT0_4	= 4	; 
                                 .equ	TCNT0_5	= 5	; 
                                 .equ	TCNT0_6	= 6	; 
                                 .equ	TCNT0_7	= 7	; 
                                 
                                 ; OCR0A - Timer/Counter0 Output Compare Register
                                 .equ	OCR0A_0	= 0	; 
                                 .equ	OCR0A_1	= 1	; 
                                 .equ	OCR0A_2	= 2	; 
                                 .equ	OCR0A_3	= 3	; 
                                 .equ	OCR0A_4	= 4	; 
                                 .equ	OCR0A_5	= 5	; 
                                 .equ	OCR0A_6	= 6	; 
                                 .equ	OCR0A_7	= 7	; 
                                 
                                 ; OCR0B - Timer/Counter0 Output Compare Register
                                 .equ	OCR0B_0	= 0	; 
                                 .equ	OCR0B_1	= 1	; 
                                 .equ	OCR0B_2	= 2	; 
                                 .equ	OCR0B_3	= 3	; 
                                 .equ	OCR0B_4	= 4	; 
                                 .equ	OCR0B_5	= 5	; 
                                 .equ	OCR0B_6	= 6	; 
                                 .equ	OCR0B_7	= 7	; 
                                 
                                 ; GTCCR - General Timer/Counter Control Register
                                 .equ	PSRSYNC	= 0	; Prescaler Reset Timer/Counter1 and Timer/Counter0
                                 .equ	PSR10	= PSRSYNC	; For compatibility
                                 .equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 
                                 ; ***** TIMER_COUNTER_2 **************
                                 ; TIMSK2 - Timer/Counter Interrupt Mask register
                                 .equ	TOIE2	= 0	; Timer/Counter2 Overflow Interrupt Enable
                                 .equ	TOIE2A	= TOIE2	; For compatibility
                                 .equ	OCIE2A	= 1	; Timer/Counter2 Output Compare Match A Interrupt Enable
                                 .equ	OCIE2B	= 2	; Timer/Counter2 Output Compare Match B Interrupt Enable
                                 
                                 ; TIFR2 - Timer/Counter Interrupt Flag Register
                                 .equ	TOV2	= 0	; Timer/Counter2 Overflow Flag
                                 .equ	OCF2A	= 1	; Output Compare Flag 2A
                                 .equ	OCF2B	= 2	; Output Compare Flag 2B
                                 
                                 ; TCCR2A - Timer/Counter2 Control Register A
                                 .equ	WGM20	= 0	; Waveform Genration Mode
                                 .equ	WGM21	= 1	; Waveform Genration Mode
                                 .equ	COM2B0	= 4	; Compare Output Mode bit 0
                                 .equ	COM2B1	= 5	; Compare Output Mode bit 1
                                 .equ	COM2A0	= 6	; Compare Output Mode bit 1
                                 .equ	COM2A1	= 7	; Compare Output Mode bit 1
                                 
                                 ; TCCR2B - Timer/Counter2 Control Register B
                                 .equ	CS20	= 0	; Clock Select bit 0
                                 .equ	CS21	= 1	; Clock Select bit 1
                                 .equ	CS22	= 2	; Clock Select bit 2
                                 .equ	WGM22	= 3	; Waveform Generation Mode
                                 .equ	FOC2B	= 6	; Force Output Compare B
                                 .equ	FOC2A	= 7	; Force Output Compare A
                                 
                                 ; TCNT2 - Timer/Counter2
                                 .equ	TCNT2_0	= 0	; Timer/Counter 2 bit 0
                                 .equ	TCNT2_1	= 1	; Timer/Counter 2 bit 1
                                 .equ	TCNT2_2	= 2	; Timer/Counter 2 bit 2
                                 .equ	TCNT2_3	= 3	; Timer/Counter 2 bit 3
                                 .equ	TCNT2_4	= 4	; Timer/Counter 2 bit 4
                                 .equ	TCNT2_5	= 5	; Timer/Counter 2 bit 5
                                 .equ	TCNT2_6	= 6	; Timer/Counter 2 bit 6
                                 .equ	TCNT2_7	= 7	; Timer/Counter 2 bit 7
                                 
                                 ; OCR2A - Timer/Counter2 Output Compare Register A
                                 .equ	OCR2A_0	= 0	; Timer/Counter2 Output Compare Register Bit 0
                                 .equ	OCR2A_1	= 1	; Timer/Counter2 Output Compare Register Bit 1
                                 .equ	OCR2A_2	= 2	; Timer/Counter2 Output Compare Register Bit 2
                                 .equ	OCR2A_3	= 3	; Timer/Counter2 Output Compare Register Bit 3
                                 .equ	OCR2A_4	= 4	; Timer/Counter2 Output Compare Register Bit 4
                                 .equ	OCR2A_5	= 5	; Timer/Counter2 Output Compare Register Bit 5
                                 .equ	OCR2A_6	= 6	; Timer/Counter2 Output Compare Register Bit 6
                                 .equ	OCR2A_7	= 7	; Timer/Counter2 Output Compare Register Bit 7
                                 
                                 ; OCR2B - Timer/Counter2 Output Compare Register B
                                 .equ	OCR2B_0	= 0	; Timer/Counter2 Output Compare Register Bit 0
                                 .equ	OCR2B_1	= 1	; Timer/Counter2 Output Compare Register Bit 1
                                 .equ	OCR2B_2	= 2	; Timer/Counter2 Output Compare Register Bit 2
                                 .equ	OCR2B_3	= 3	; Timer/Counter2 Output Compare Register Bit 3
                                 .equ	OCR2B_4	= 4	; Timer/Counter2 Output Compare Register Bit 4
                                 .equ	OCR2B_5	= 5	; Timer/Counter2 Output Compare Register Bit 5
                                 .equ	OCR2B_6	= 6	; Timer/Counter2 Output Compare Register Bit 6
                                 .equ	OCR2B_7	= 7	; Timer/Counter2 Output Compare Register Bit 7
                                 
                                 ; ASSR - Asynchronous Status Register
                                 .equ	TCR2BUB	= 0	; Timer/Counter Control Register2 Update Busy
                                 .equ	TCR2AUB	= 1	; Timer/Counter Control Register2 Update Busy
                                 .equ	OCR2BUB	= 2	; Output Compare Register 2 Update Busy
                                 .equ	OCR2AUB	= 3	; Output Compare Register2 Update Busy
                                 .equ	TCN2UB	= 4	; Timer/Counter2 Update Busy
                                 .equ	AS2	= 5	; Asynchronous Timer/Counter2
                                 .equ	EXCLK	= 6	; Enable External Clock Input
                                 
                                 ; GTCCR - General Timer Counter Control register
                                 .equ	PSRASY	= 1	; Prescaler Reset Timer/Counter2
                                 .equ	PSR2	= PSRASY	; For compatibility
                                 ;.equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 
                                 ; ***** WATCHDOG *********************
                                 ; WDTCSR - Watchdog Timer Control Register
                                 .equ	WDP0	= 0	; Watch Dog Timer Prescaler bit 0
                                 .equ	WDP1	= 1	; Watch Dog Timer Prescaler bit 1
                                 .equ	WDP2	= 2	; Watch Dog Timer Prescaler bit 2
                                 .equ	WDE	= 3	; Watch Dog Enable
                                 .equ	WDCE	= 4	; Watchdog Change Enable
                                 .equ	WDP3	= 5	; Watchdog Timer Prescaler Bit 3
                                 .equ	WDIE	= 6	; Watchdog Timeout Interrupt Enable
                                 .equ	WDIF	= 7	; Watchdog Timeout Interrupt Flag
                                 
                                 
                                 ; ***** USART1 ***********************
                                 ; UDR1 - USART I/O Data Register
                                 .equ	UDR1_0	= 0	; USART I/O Data Register bit 0
                                 .equ	UDR1_1	= 1	; USART I/O Data Register bit 1
                                 .equ	UDR1_2	= 2	; USART I/O Data Register bit 2
                                 .equ	UDR1_3	= 3	; USART I/O Data Register bit 3
                                 .equ	UDR1_4	= 4	; USART I/O Data Register bit 4
                                 .equ	UDR1_5	= 5	; USART I/O Data Register bit 5
                                 .equ	UDR1_6	= 6	; USART I/O Data Register bit 6
                                 .equ	UDR1_7	= 7	; USART I/O Data Register bit 7
                                 
                                 ; UCSR1A - USART Control and Status Register A
                                 .equ	MPCM1	= 0	; Multi-processor Communication Mode
                                 .equ	U2X1	= 1	; Double the USART transmission speed
                                 .equ	UPE1	= 2	; Parity Error
                                 .equ	DOR1	= 3	; Data overRun
                                 .equ	FE1	= 4	; Framing Error
                                 .equ	UDRE1	= 5	; USART Data Register Empty
                                 .equ	TXC1	= 6	; USART Transmitt Complete
                                 .equ	RXC1	= 7	; USART Receive Complete
                                 
                                 ; UCSR1B - USART Control and Status Register B
                                 .equ	TXB81	= 0	; Transmit Data Bit 8
                                 .equ	RXB81	= 1	; Receive Data Bit 8
                                 .equ	UCSZ12	= 2	; Character Size
                                 .equ	TXEN1	= 3	; Transmitter Enable
                                 .equ	RXEN1	= 4	; Receiver Enable
                                 .equ	UDRIE1	= 5	; USART Data register Empty Interrupt Enable
                                 .equ	TXCIE1	= 6	; TX Complete Interrupt Enable
                                 .equ	RXCIE1	= 7	; RX Complete Interrupt Enable
                                 
                                 ; UCSR1C - USART Control and Status Register C
                                 .equ	UCPOL1	= 0	; Clock Polarity
                                 .equ	UCSZ10	= 1	; Character Size
                                 .equ	UCPHA1	= UCSZ10	; For compatibility
                                 .equ	UCSZ11	= 2	; Character Size
                                 .equ	UDORD1	= UCSZ11	; For compatibility
                                 .equ	USBS1	= 3	; Stop Bit Select
                                 .equ	UPM10	= 4	; Parity Mode Bit 0
                                 .equ	UPM11	= 5	; Parity Mode Bit 1
                                 .equ	UMSEL10	= 6	; USART Mode Select
                                 .equ	UMSEL11	= 7	; USART Mode Select
                                 
                                 ; UBRR1H - USART Baud Rate Register High Byte
                                 .equ	UBRR_8	= 0	; USART Baud Rate Register bit 8
                                 .equ	UBRR_9	= 1	; USART Baud Rate Register bit 9
                                 .equ	UBRR_10	= 2	; USART Baud Rate Register bit 10
                                 .equ	UBRR_11	= 3	; USART Baud Rate Register bit 11
                                 
                                 ; UBRR1L - USART Baud Rate Register Low Byte
                                 .equ	UBRR_0	= 0	; USART Baud Rate Register bit 0
                                 .equ	UBRR_1	= 1	; USART Baud Rate Register bit 1
                                 .equ	UBRR_2	= 2	; USART Baud Rate Register bit 2
                                 .equ	UBRR_3	= 3	; USART Baud Rate Register bit 3
                                 .equ	UBRR_4	= 4	; USART Baud Rate Register bit 4
                                 .equ	UBRR_5	= 5	; USART Baud Rate Register bit 5
                                 .equ	UBRR_6	= 6	; USART Baud Rate Register bit 6
                                 .equ	UBRR_7	= 7	; USART Baud Rate Register bit 7
                                 
                                 
                                 ; ***** EEPROM ***********************
                                 ; EEARH - EEPROM Address Register Low Byte
                                 .equ	EEAR8	= 0	; EEPROM Read/Write Access Bit 8
                                 .equ	EEAR9	= 1	; EEPROM Read/Write Access Bit 9
                                 .equ	EEAR10	= 2	; EEPROM Read/Write Access Bit 10
                                 .equ	EEAR11	= 3	; EEPROM Read/Write Access Bit 11
                                 
                                 ; EEARL - EEPROM Address Register Low Byte
                                 .equ	EEAR0	= 0	; EEPROM Read/Write Access Bit 0
                                 .equ	EEAR1	= 1	; EEPROM Read/Write Access Bit 1
                                 .equ	EEAR2	= 2	; EEPROM Read/Write Access Bit 2
                                 .equ	EEAR3	= 3	; EEPROM Read/Write Access Bit 3
                                 .equ	EEAR4	= 4	; EEPROM Read/Write Access Bit 4
                                 .equ	EEAR5	= 5	; EEPROM Read/Write Access Bit 5
                                 .equ	EEAR6	= 6	; EEPROM Read/Write Access Bit 6
                                 .equ	EEAR7	= 7	; EEPROM Read/Write Access Bit 7
                                 
                                 ; EEDR - EEPROM Data Register
                                 .equ	EEDR0	= 0	; EEPROM Data Register bit 0
                                 .equ	EEDR1	= 1	; EEPROM Data Register bit 1
                                 .equ	EEDR2	= 2	; EEPROM Data Register bit 2
                                 .equ	EEDR3	= 3	; EEPROM Data Register bit 3
                                 .equ	EEDR4	= 4	; EEPROM Data Register bit 4
                                 .equ	EEDR5	= 5	; EEPROM Data Register bit 5
                                 .equ	EEDR6	= 6	; EEPROM Data Register bit 6
                                 .equ	EEDR7	= 7	; EEPROM Data Register bit 7
                                 
                                 ; EECR - EEPROM Control Register
                                 .equ	EERE	= 0	; EEPROM Read Enable
                                 .equ	EEPE	= 1	; EEPROM Write Enable
                                 .equ	EEMPE	= 2	; EEPROM Master Write Enable
                                 .equ	EERIE	= 3	; EEPROM Ready Interrupt Enable
                                 .equ	EEPM0	= 4	; EEPROM Programming Mode Bit 0
                                 .equ	EEPM1	= 5	; EEPROM Programming Mode Bit 1
                                 
                                 
                                 ; ***** TIMER_COUNTER_5 **************
                                 ; TIMSK5 - Timer/Counter5 Interrupt Mask Register
                                 .equ	TOIE5	= 0	; Timer/Counter5 Overflow Interrupt Enable
                                 .equ	OCIE5A	= 1	; Timer/Counter5 Output Compare A Match Interrupt Enable
                                 .equ	OCIE5B	= 2	; Timer/Counter5 Output Compare B Match Interrupt Enable
                                 .equ	OCIE5C	= 3	; Timer/Counter5 Output Compare C Match Interrupt Enable
                                 .equ	ICIE5	= 5	; Timer/Counter5 Input Capture Interrupt Enable
                                 
                                 ; TIFR5 - Timer/Counter5 Interrupt Flag register
                                 .equ	TOV5	= 0	; Timer/Counter5 Overflow Flag
                                 .equ	OCF5A	= 1	; Output Compare Flag 5A
                                 .equ	OCF5B	= 2	; Output Compare Flag 5B
                                 .equ	OCF5C	= 3	; Output Compare Flag 5C
                                 .equ	ICF5	= 5	; Input Capture Flag 5
                                 
                                 ; TCCR5A - Timer/Counter5 Control Register A
                                 .equ	WGM50	= 0	; Waveform Generation Mode
                                 .equ	WGM51	= 1	; Waveform Generation Mode
                                 .equ	COM5C0	= 2	; Compare Output Mode 5C, bit 0
                                 .equ	COM5C1	= 3	; Compare Output Mode 5C, bit 1
                                 .equ	COM5B0	= 4	; Compare Output Mode 5B, bit 0
                                 .equ	COM5B1	= 5	; Compare Output Mode 5B, bit 1
                                 .equ	COM5A0	= 6	; Compare Output Mode 5A, bit 0
                                 .equ	COM5A1	= 7	; Compare Output Mode 1A, bit 1
                                 
                                 ; TCCR5B - Timer/Counter5 Control Register B
                                 .equ	CS50	= 0	; Prescaler source of Timer/Counter 5
                                 .equ	CS51	= 1	; Prescaler source of Timer/Counter 5
                                 .equ	CS52	= 2	; Prescaler source of Timer/Counter 5
                                 .equ	WGM52	= 3	; Waveform Generation Mode
                                 .equ	WGM53	= 4	; Waveform Generation Mode
                                 .equ	ICES5	= 6	; Input Capture 5 Edge Select
                                 .equ	ICNC5	= 7	; Input Capture 5 Noise Canceler
                                 
                                 ; TCCR5C - Timer/Counter 5 Control Register C
                                 .equ	FOC5C	= 5	; Force Output Compare 5C
                                 .equ	FOC5B	= 6	; Force Output Compare 5B
                                 .equ	FOC5A	= 7	; Force Output Compare 5A
                                 
                                 ; ICR5H - Timer/Counter5 Input Capture Register High Byte
                                 .equ	ICR5H0	= 0	; Timer/Counter5 Input Capture Register High Byte bit 0
                                 .equ	ICR5H1	= 1	; Timer/Counter5 Input Capture Register High Byte bit 1
                                 .equ	ICR5H2	= 2	; Timer/Counter5 Input Capture Register High Byte bit 2
                                 .equ	ICR5H3	= 3	; Timer/Counter5 Input Capture Register High Byte bit 3
                                 .equ	ICR5H4	= 4	; Timer/Counter5 Input Capture Register High Byte bit 4
                                 .equ	ICR5H5	= 5	; Timer/Counter5 Input Capture Register High Byte bit 5
                                 .equ	ICR5H6	= 6	; Timer/Counter5 Input Capture Register High Byte bit 6
                                 .equ	ICR5H7	= 7	; Timer/Counter5 Input Capture Register High Byte bit 7
                                 
                                 ; ICR5L - Timer/Counter5 Input Capture Register Low Byte
                                 .equ	ICR5L0	= 0	; Timer/Counter5 Input Capture Register Low Byte bit 0
                                 .equ	ICR5L1	= 1	; Timer/Counter5 Input Capture Register Low Byte bit 1
                                 .equ	ICR5L2	= 2	; Timer/Counter5 Input Capture Register Low Byte bit 2
                                 .equ	ICR5L3	= 3	; Timer/Counter5 Input Capture Register Low Byte bit 3
                                 .equ	ICR5L4	= 4	; Timer/Counter5 Input Capture Register Low Byte bit 4
                                 .equ	ICR5L5	= 5	; Timer/Counter5 Input Capture Register Low Byte bit 5
                                 .equ	ICR5L6	= 6	; Timer/Counter5 Input Capture Register Low Byte bit 6
                                 .equ	ICR5L7	= 7	; Timer/Counter5 Input Capture Register Low Byte bit 7
                                 
                                 
                                 ; ***** TIMER_COUNTER_4 **************
                                 ; TIMSK4 - Timer/Counter4 Interrupt Mask Register
                                 .equ	TOIE4	= 0	; Timer/Counter4 Overflow Interrupt Enable
                                 .equ	OCIE4A	= 1	; Timer/Counter4 Output Compare A Match Interrupt Enable
                                 .equ	OCIE4B	= 2	; Timer/Counter4 Output Compare B Match Interrupt Enable
                                 .equ	OCIE4C	= 3	; Timer/Counter4 Output Compare C Match Interrupt Enable
                                 .equ	ICIE4	= 5	; Timer/Counter4 Input Capture Interrupt Enable
                                 
                                 ; TIFR4 - Timer/Counter4 Interrupt Flag register
                                 .equ	TOV4	= 0	; Timer/Counter4 Overflow Flag
                                 .equ	OCF4A	= 1	; Output Compare Flag 4A
                                 .equ	OCF4B	= 2	; Output Compare Flag 4B
                                 .equ	OCF4C	= 3	; Output Compare Flag 4C
                                 .equ	ICF4	= 5	; Input Capture Flag 4
                                 
                                 ; TCCR4A - Timer/Counter4 Control Register A
                                 .equ	WGM40	= 0	; Waveform Generation Mode
                                 .equ	WGM41	= 1	; Waveform Generation Mode
                                 .equ	COM4C0	= 2	; Compare Output Mode 4C, bit 0
                                 .equ	COM4C1	= 3	; Compare Output Mode 4C, bit 1
                                 .equ	COM4B0	= 4	; Compare Output Mode 4B, bit 0
                                 .equ	COM4B1	= 5	; Compare Output Mode 4B, bit 1
                                 .equ	COM4A0	= 6	; Compare Output Mode 4A, bit 0
                                 .equ	COM4A1	= 7	; Compare Output Mode 1A, bit 1
                                 
                                 ; TCCR4B - Timer/Counter4 Control Register B
                                 .equ	CS40	= 0	; Prescaler source of Timer/Counter 4
                                 .equ	CS41	= 1	; Prescaler source of Timer/Counter 4
                                 .equ	CS42	= 2	; Prescaler source of Timer/Counter 4
                                 .equ	WGM42	= 3	; Waveform Generation Mode
                                 .equ	WGM43	= 4	; Waveform Generation Mode
                                 .equ	ICES4	= 6	; Input Capture 4 Edge Select
                                 .equ	ICNC4	= 7	; Input Capture 4 Noise Canceler
                                 
                                 ; TCCR4C - Timer/Counter 4 Control Register C
                                 .equ	FOC4C	= 5	; Force Output Compare 4C
                                 .equ	FOC4B	= 6	; Force Output Compare 4B
                                 .equ	FOC4A	= 7	; Force Output Compare 4A
                                 
                                 
                                 ; ***** TIMER_COUNTER_3 **************
                                 ; TIMSK3 - Timer/Counter3 Interrupt Mask Register
                                 .equ	TOIE3	= 0	; Timer/Counter3 Overflow Interrupt Enable
                                 .equ	OCIE3A	= 1	; Timer/Counter3 Output Compare A Match Interrupt Enable
                                 .equ	OCIE3B	= 2	; Timer/Counter3 Output Compare B Match Interrupt Enable
                                 .equ	OCIE3C	= 3	; Timer/Counter3 Output Compare C Match Interrupt Enable
                                 .equ	ICIE3	= 5	; Timer/Counter3 Input Capture Interrupt Enable
                                 
                                 ; TIFR3 - Timer/Counter3 Interrupt Flag register
                                 .equ	TOV3	= 0	; Timer/Counter3 Overflow Flag
                                 .equ	OCF3A	= 1	; Output Compare Flag 3A
                                 .equ	OCF3B	= 2	; Output Compare Flag 3B
                                 .equ	OCF3C	= 3	; Output Compare Flag 3C
                                 .equ	ICF3	= 5	; Input Capture Flag 3
                                 
                                 ; TCCR3A - Timer/Counter3 Control Register A
                                 .equ	WGM30	= 0	; Waveform Generation Mode
                                 .equ	WGM31	= 1	; Waveform Generation Mode
                                 .equ	COM3C0	= 2	; Compare Output Mode 3C, bit 0
                                 .equ	COM3C1	= 3	; Compare Output Mode 3C, bit 1
                                 .equ	COM3B0	= 4	; Compare Output Mode 3B, bit 0
                                 .equ	COM3B1	= 5	; Compare Output Mode 3B, bit 1
                                 .equ	COM3A0	= 6	; Compare Output Mode 3A, bit 0
                                 .equ	COM3A1	= 7	; Compare Output Mode 1A, bit 1
                                 
                                 ; TCCR3B - Timer/Counter3 Control Register B
                                 .equ	CS30	= 0	; Prescaler source of Timer/Counter 3
                                 .equ	CS31	= 1	; Prescaler source of Timer/Counter 3
                                 .equ	CS32	= 2	; Prescaler source of Timer/Counter 3
                                 .equ	WGM32	= 3	; Waveform Generation Mode
                                 .equ	WGM33	= 4	; Waveform Generation Mode
                                 .equ	ICES3	= 6	; Input Capture 3 Edge Select
                                 .equ	ICNC3	= 7	; Input Capture 3 Noise Canceler
                                 
                                 ; TCCR3C - Timer/Counter 3 Control Register C
                                 .equ	FOC3C	= 5	; Force Output Compare 3C
                                 .equ	FOC3B	= 6	; Force Output Compare 3B
                                 .equ	FOC3A	= 7	; Force Output Compare 3A
                                 
                                 
                                 ; ***** TIMER_COUNTER_1 **************
                                 ; TIMSK1 - Timer/Counter1 Interrupt Mask Register
                                 .equ	TOIE1	= 0	; Timer/Counter1 Overflow Interrupt Enable
                                 .equ	OCIE1A	= 1	; Timer/Counter1 Output Compare A Match Interrupt Enable
                                 .equ	OCIE1B	= 2	; Timer/Counter1 Output Compare B Match Interrupt Enable
                                 .equ	OCIE1C	= 3	; Timer/Counter1 Output Compare C Match Interrupt Enable
                                 .equ	ICIE1	= 5	; Timer/Counter1 Input Capture Interrupt Enable
                                 
                                 ; TIFR1 - Timer/Counter1 Interrupt Flag register
                                 .equ	TOV1	= 0	; Timer/Counter1 Overflow Flag
                                 .equ	OCF1A	= 1	; Output Compare Flag 1A
                                 .equ	OCF1B	= 2	; Output Compare Flag 1B
                                 .equ	OCF1C	= 3	; Output Compare Flag 1C
                                 .equ	ICF1	= 5	; Input Capture Flag 1
                                 
                                 ; TCCR1A - Timer/Counter1 Control Register A
                                 .equ	WGM10	= 0	; Waveform Generation Mode
                                 .equ	WGM11	= 1	; Waveform Generation Mode
                                 .equ	COM1C0	= 2	; Compare Output Mode 1C, bit 0
                                 .equ	COM1C1	= 3	; Compare Output Mode 1C, bit 1
                                 .equ	COM1B0	= 4	; Compare Output Mode 1B, bit 0
                                 .equ	COM1B1	= 5	; Compare Output Mode 1B, bit 1
                                 .equ	COM1A0	= 6	; Compare Output Mode 1A, bit 0
                                 .equ	COM1A1	= 7	; Compare Output Mode 1A, bit 1
                                 
                                 ; TCCR1B - Timer/Counter1 Control Register B
                                 .equ	CS10	= 0	; Prescaler source of Timer/Counter 1
                                 .equ	CS11	= 1	; Prescaler source of Timer/Counter 1
                                 .equ	CS12	= 2	; Prescaler source of Timer/Counter 1
                                 .equ	WGM12	= 3	; Waveform Generation Mode
                                 .equ	WGM13	= 4	; Waveform Generation Mode
                                 .equ	ICES1	= 6	; Input Capture 1 Edge Select
                                 .equ	ICNC1	= 7	; Input Capture 1 Noise Canceler
                                 
                                 ; TCCR1C - Timer/Counter 1 Control Register C
                                 .equ	FOC1C	= 5	; Force Output Compare 1C
                                 .equ	FOC1B	= 6	; Force Output Compare 1B
                                 .equ	FOC1A	= 7	; Force Output Compare 1A
                                 
                                 
                                 ; ***** JTAG *************************
                                 ; OCDR - On-Chip Debug Related Register in I/O Memory
                                 .equ	OCDR0	= 0	; On-Chip Debug Register Bit 0
                                 .equ	OCDR1	= 1	; On-Chip Debug Register Bit 1
                                 .equ	OCDR2	= 2	; On-Chip Debug Register Bit 2
                                 .equ	OCDR3	= 3	; On-Chip Debug Register Bit 3
                                 .equ	OCDR4	= 4	; On-Chip Debug Register Bit 4
                                 .equ	OCDR5	= 5	; On-Chip Debug Register Bit 5
                                 .equ	OCDR6	= 6	; On-Chip Debug Register Bit 6
                                 .equ	OCDR7	= 7	; On-Chip Debug Register Bit 7
                                 .equ	IDRD	= OCDR7	; For compatibility
                                 
                                 ; MCUCR - MCU Control Register
                                 .equ	JTD	= 7	; JTAG Interface Disable
                                 
                                 ; MCUSR - MCU Status Register
                                 .equ	JTRF	= 4	; JTAG Reset Flag
                                 
                                 
                                 ; ***** EXTERNAL_INTERRUPT ***********
                                 ; EICRA - External Interrupt Control Register A
                                 .equ	ISC00	= 0	; External Interrupt Sense Control Bit
                                 .equ	ISC01	= 1	; External Interrupt Sense Control Bit
                                 .equ	ISC10	= 2	; External Interrupt Sense Control Bit
                                 .equ	ISC11	= 3	; External Interrupt Sense Control Bit
                                 .equ	ISC20	= 4	; External Interrupt Sense Control Bit
                                 .equ	ISC21	= 5	; External Interrupt Sense Control Bit
                                 .equ	ISC30	= 6	; External Interrupt Sense Control Bit
                                 .equ	ISC31	= 7	; External Interrupt Sense Control Bit
                                 
                                 ; EICRB - External Interrupt Control Register B
                                 .equ	ISC40	= 0	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC41	= 1	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC50	= 2	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC51	= 3	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC60	= 4	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC61	= 5	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC70	= 6	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC71	= 7	; External Interrupt 7-4 Sense Control Bit
                                 
                                 ; EIMSK - External Interrupt Mask Register
                                 .equ	INT0	= 0	; External Interrupt Request 0 Enable
                                 .equ	INT1	= 1	; External Interrupt Request 1 Enable
                                 .equ	INT2	= 2	; External Interrupt Request 2 Enable
                                 .equ	INT3	= 3	; External Interrupt Request 3 Enable
                                 .equ	INT4	= 4	; External Interrupt Request 4 Enable
                                 .equ	INT5	= 5	; External Interrupt Request 5 Enable
                                 .equ	INT6	= 6	; External Interrupt Request 6 Enable
                                 .equ	INT7	= 7	; External Interrupt Request 7 Enable
                                 
                                 ; EIFR - External Interrupt Flag Register
                                 .equ	INTF0	= 0	; External Interrupt Flag 0
                                 .equ	INTF1	= 1	; External Interrupt Flag 1
                                 .equ	INTF2	= 2	; External Interrupt Flag 2
                                 .equ	INTF3	= 3	; External Interrupt Flag 3
                                 .equ	INTF4	= 4	; External Interrupt Flag 4
                                 .equ	INTF5	= 5	; External Interrupt Flag 5
                                 .equ	INTF6	= 6	; External Interrupt Flag 6
                                 .equ	INTF7	= 7	; External Interrupt Flag 7
                                 
                                 ; PCICR - Pin Change Interrupt Control Register
                                 .equ	PCIE0	= 0	; Pin Change Interrupt Enable 0
                                 .equ	PCIE1	= 1	; Pin Change Interrupt Enable 1
                                 .equ	PCIE2	= 2	; Pin Change Interrupt Enable 2
                                 
                                 ; PCIFR - Pin Change Interrupt Flag Register
                                 .equ	PCIF0	= 0	; Pin Change Interrupt Flag 0
                                 .equ	PCIF1	= 1	; Pin Change Interrupt Flag 1
                                 .equ	PCIF2	= 2	; Pin Change Interrupt Flag 2
                                 
                                 ; PCMSK2 - Pin Change Mask Register 2
                                 .equ	PCINT16	= 0	; Pin Change Enable Mask 16
                                 .equ	PCINT17	= 1	; Pin Change Enable Mask 17
                                 .equ	PCINT18	= 2	; Pin Change Enable Mask 18
                                 .equ	PCINT19	= 3	; Pin Change Enable Mask 19
                                 .equ	PCINT20	= 4	; Pin Change Enable Mask 20
                                 .equ	PCINT21	= 5	; Pin Change Enable Mask 21
                                 .equ	PCINT22	= 6	; Pin Change Enable Mask 22
                                 .equ	PCINT23	= 7	; Pin Change Enable Mask 23
                                 
                                 ; PCMSK1 - Pin Change Mask Register 1
                                 .equ	PCINT8	= 0	; Pin Change Enable Mask 8
                                 .equ	PCINT9	= 1	; Pin Change Enable Mask 9
                                 .equ	PCINT10	= 2	; Pin Change Enable Mask 10
                                 .equ	PCINT11	= 3	; Pin Change Enable Mask 11
                                 .equ	PCINT12	= 4	; Pin Change Enable Mask 12
                                 .equ	PCINT13	= 5	; Pin Change Enable Mask 13
                                 .equ	PCINT14	= 6	; Pin Change Enable Mask 14
                                 .equ	PCINT15	= 7	; Pin Change Enable Mask 15
                                 
                                 ; PCMSK0 - Pin Change Mask Register 0
                                 .equ	PCINT0	= 0	; Pin Change Enable Mask 0
                                 .equ	PCINT1	= 1	; Pin Change Enable Mask 1
                                 .equ	PCINT2	= 2	; Pin Change Enable Mask 2
                                 .equ	PCINT3	= 3	; Pin Change Enable Mask 3
                                 .equ	PCINT4	= 4	; Pin Change Enable Mask 4
                                 .equ	PCINT5	= 5	; Pin Change Enable Mask 5
                                 .equ	PCINT6	= 6	; Pin Change Enable Mask 6
                                 .equ	PCINT7	= 7	; Pin Change Enable Mask 7
                                 
                                 
                                 ; ***** CPU **************************
                                 ; SREG - Status Register
                                 .equ	SREG_C	= 0	; Carry Flag
                                 .equ	SREG_Z	= 1	; Zero Flag
                                 .equ	SREG_N	= 2	; Negative Flag
                                 .equ	SREG_V	= 3	; Two's Complement Overflow Flag
                                 .equ	SREG_S	= 4	; Sign Bit
                                 .equ	SREG_H	= 5	; Half Carry Flag
                                 .equ	SREG_T	= 6	; Bit Copy Storage
                                 .equ	SREG_I	= 7	; Global Interrupt Enable
                                 
                                 ; MCUCR - MCU Control Register
                                 .equ	IVCE	= 0	; Interrupt Vector Change Enable
                                 .equ	IVSEL	= 1	; Interrupt Vector Select
                                 .equ	PUD	= 4	; Pull-up disable
                                 ;.equ	JTD	= 7	; JTAG Interface Disable
                                 
                                 ; MCUSR - MCU Status Register
                                 .equ	PORF	= 0	; Power-on reset flag
                                 .equ	EXTRF	= 1	; External Reset Flag
                                 .equ	BORF	= 2	; Brown-out Reset Flag
                                 .equ	WDRF	= 3	; Watchdog Reset Flag
                                 ;.equ	JTRF	= 4	; JTAG Reset Flag
                                 
                                 ; XMCRA - External Memory Control Register A
                                 .equ	SRW00	= 0	; Wait state select bit lower page
                                 .equ	SRW01	= 1	; Wait state select bit lower page
                                 .equ	SRW10	= 2	; Wait state select bit upper page
                                 .equ	SRW11	= 3	; Wait state select bit upper page
                                 .equ	SRL0	= 4	; Wait state page limit
                                 .equ	SRL1	= 5	; Wait state page limit
                                 .equ	SRL2	= 6	; Wait state page limit
                                 .equ	SRE	= 7	; External SRAM Enable
                                 
                                 ; XMCRB - External Memory Control Register B
                                 .equ	XMM0	= 0	; External Memory High Mask
                                 .equ	XMM1	= 1	; External Memory High Mask
                                 .equ	XMM2	= 2	; External Memory High Mask
                                 .equ	XMBK	= 7	; External Memory Bus Keeper Enable
                                 
                                 ; OSCCAL - Oscillator Calibration Value
                                 .equ	CAL0	= 0	; Oscillator Calibration Value Bit0
                                 .equ	CAL1	= 1	; Oscillator Calibration Value Bit1
                                 .equ	CAL2	= 2	; Oscillator Calibration Value Bit2
                                 .equ	CAL3	= 3	; Oscillator Calibration Value Bit3
                                 .equ	CAL4	= 4	; Oscillator Calibration Value Bit4
                                 .equ	CAL5	= 5	; Oscillator Calibration Value Bit5
                                 .equ	CAL6	= 6	; Oscillator Calibration Value Bit6
                                 .equ	CAL7	= 7	; Oscillator Calibration Value Bit7
                                 
                                 ; CLKPR - 
                                 .equ	CLKPS0	= 0	; 
                                 .equ	CLKPS1	= 1	; 
                                 .equ	CLKPS2	= 2	; 
                                 .equ	CLKPS3	= 3	; 
                                 .equ	CLKPCE	= 7	; 
                                 
                                 ; SMCR - Sleep Mode Control Register
                                 .equ	SE	= 0	; Sleep Enable
                                 .equ	SM0	= 1	; Sleep Mode Select bit 0
                                 .equ	SM1	= 2	; Sleep Mode Select bit 1
                                 .equ	SM2	= 3	; Sleep Mode Select bit 2
                                 
                                 ; RAMPZ - RAM Page Z Select Register
                                 .equ	RAMPZ0	= 0	; RAM Page Z Select Register Bit 0
                                 .equ	RAMPZ1	= 1	; RAM Page Z Select Register Bit 1
                                 
                                 ; EIND - Extended Indirect Register
                                 .equ	EIND0	= 0	; Bit 0
                                 
                                 ; GPIOR2 - General Purpose IO Register 2
                                 .equ	GPIOR20	= 0	; General Purpose IO Register 2 bit 0
                                 .equ	GPIOR21	= 1	; General Purpose IO Register 2 bit 1
                                 .equ	GPIOR22	= 2	; General Purpose IO Register 2 bit 2
                                 .equ	GPIOR23	= 3	; General Purpose IO Register 2 bit 3
                                 .equ	GPIOR24	= 4	; General Purpose IO Register 2 bit 4
                                 .equ	GPIOR25	= 5	; General Purpose IO Register 2 bit 5
                                 .equ	GPIOR26	= 6	; General Purpose IO Register 2 bit 6
                                 .equ	GPIOR27	= 7	; General Purpose IO Register 2 bit 7
                                 
                                 ; GPIOR1 - General Purpose IO Register 1
                                 .equ	GPIOR10	= 0	; General Purpose IO Register 1 bit 0
                                 .equ	GPIOR11	= 1	; General Purpose IO Register 1 bit 1
                                 .equ	GPIOR12	= 2	; General Purpose IO Register 1 bit 2
                                 .equ	GPIOR13	= 3	; General Purpose IO Register 1 bit 3
                                 .equ	GPIOR14	= 4	; General Purpose IO Register 1 bit 4
                                 .equ	GPIOR15	= 5	; General Purpose IO Register 1 bit 5
                                 .equ	GPIOR16	= 6	; General Purpose IO Register 1 bit 6
                                 .equ	GPIOR17	= 7	; General Purpose IO Register 1 bit 7
                                 
                                 ; GPIOR0 - General Purpose IO Register 0
                                 .equ	GPIOR00	= 0	; General Purpose IO Register 0 bit 0
                                 .equ	GPIOR01	= 1	; General Purpose IO Register 0 bit 1
                                 .equ	GPIOR02	= 2	; General Purpose IO Register 0 bit 2
                                 .equ	GPIOR03	= 3	; General Purpose IO Register 0 bit 3
                                 .equ	GPIOR04	= 4	; General Purpose IO Register 0 bit 4
                                 .equ	GPIOR05	= 5	; General Purpose IO Register 0 bit 5
                                 .equ	GPIOR06	= 6	; General Purpose IO Register 0 bit 6
                                 .equ	GPIOR07	= 7	; General Purpose IO Register 0 bit 7
                                 
                                 ; PRR1 - Power Reduction Register1
                                 .equ	PRUSART1	= 0	; Power Reduction USART1
                                 .equ	PRUSART2	= 1	; Power Reduction USART2
                                 .equ	PRUSART3	= 2	; Power Reduction USART3
                                 .equ	PRTIM3	= 3	; Power Reduction Timer/Counter3
                                 .equ	PRTIM4	= 4	; Power Reduction Timer/Counter4
                                 .equ	PRTIM5	= 5	; Power Reduction Timer/Counter5
                                 
                                 ; PRR0 - Power Reduction Register0
                                 .equ	PRADC	= 0	; Power Reduction ADC
                                 .equ	PRUSART0	= 1	; Power Reduction USART
                                 .equ	PRSPI	= 2	; Power Reduction Serial Peripheral Interface
                                 .equ	PRTIM1	= 3	; Power Reduction Timer/Counter1
                                 .equ	PRTIM0	= 5	; Power Reduction Timer/Counter0
                                 .equ	PRTIM2	= 6	; Power Reduction Timer/Counter2
                                 .equ	PRTWI	= 7	; Power Reduction TWI
                                 
                                 
                                 ; ***** AD_CONVERTER *****************
                                 ; ADMUX - The ADC multiplexer Selection Register
                                 .equ	MUX0	= 0	; Analog Channel and Gain Selection Bits
                                 .equ	MUX1	= 1	; Analog Channel and Gain Selection Bits
                                 .equ	MUX2	= 2	; Analog Channel and Gain Selection Bits
                                 .equ	MUX3	= 3	; Analog Channel and Gain Selection Bits
                                 .equ	MUX4	= 4	; Analog Channel and Gain Selection Bits
                                 .equ	ADLAR	= 5	; Left Adjust Result
                                 .equ	REFS0	= 6	; Reference Selection Bit 0
                                 .equ	REFS1	= 7	; Reference Selection Bit 1
                                 
                                 ; ADCSRA - The ADC Control and Status register A
                                 .equ	ADPS0	= 0	; ADC  Prescaler Select Bits
                                 .equ	ADPS1	= 1	; ADC  Prescaler Select Bits
                                 .equ	ADPS2	= 2	; ADC  Prescaler Select Bits
                                 .equ	ADIE	= 3	; ADC Interrupt Enable
                                 .equ	ADIF	= 4	; ADC Interrupt Flag
                                 .equ	ADATE	= 5	; ADC  Auto Trigger Enable
                                 .equ	ADSC	= 6	; ADC Start Conversion
                                 .equ	ADEN	= 7	; ADC Enable
                                 
                                 ; ADCSRB - The ADC Control and Status register B
                                 .equ	ADTS0	= 0	; ADC Auto Trigger Source bit 0
                                 .equ	ADTS1	= 1	; ADC Auto Trigger Source bit 1
                                 .equ	ADTS2	= 2	; ADC Auto Trigger Source bit 2
                                 .equ	MUX5	= 3	; Analog Channel and Gain Selection Bits
                                 ;.equ	ACME	= 6	; 
                                 
                                 ; ADCH - ADC Data Register High Byte
                                 .equ	ADCH0	= 0	; ADC Data Register High Byte Bit 0
                                 .equ	ADCH1	= 1	; ADC Data Register High Byte Bit 1
                                 .equ	ADCH2	= 2	; ADC Data Register High Byte Bit 2
                                 .equ	ADCH3	= 3	; ADC Data Register High Byte Bit 3
                                 .equ	ADCH4	= 4	; ADC Data Register High Byte Bit 4
                                 .equ	ADCH5	= 5	; ADC Data Register High Byte Bit 5
                                 .equ	ADCH6	= 6	; ADC Data Register High Byte Bit 6
                                 .equ	ADCH7	= 7	; ADC Data Register High Byte Bit 7
                                 
                                 ; ADCL - ADC Data Register Low Byte
                                 .equ	ADCL0	= 0	; ADC Data Register Low Byte Bit 0
                                 .equ	ADCL1	= 1	; ADC Data Register Low Byte Bit 1
                                 .equ	ADCL2	= 2	; ADC Data Register Low Byte Bit 2
                                 .equ	ADCL3	= 3	; ADC Data Register Low Byte Bit 3
                                 .equ	ADCL4	= 4	; ADC Data Register Low Byte Bit 4
                                 .equ	ADCL5	= 5	; ADC Data Register Low Byte Bit 5
                                 .equ	ADCL6	= 6	; ADC Data Register Low Byte Bit 6
                                 .equ	ADCL7	= 7	; ADC Data Register Low Byte Bit 7
                                 
                                 ; DIDR0 - Digital Input Disable Register
                                 .equ	ADC0D	= 0	; 
                                 .equ	ADC1D	= 1	; 
                                 .equ	ADC2D	= 2	; 
                                 .equ	ADC3D	= 3	; 
                                 .equ	ADC4D	= 4	; 
                                 .equ	ADC5D	= 5	; 
                                 .equ	ADC6D	= 6	; 
                                 .equ	ADC7D	= 7	; 
                                 
                                 ; DIDR2 - Digital Input Disable Register
                                 .equ	ADC8D	= 0	; 
                                 .equ	ADC9D	= 1	; 
                                 .equ	ADC10D	= 2	; 
                                 .equ	ADC11D	= 3	; 
                                 .equ	ADC12D	= 4	; 
                                 .equ	ADC13D	= 5	; 
                                 .equ	ADC14D	= 6	; 
                                 .equ	ADC15D	= 7	; 
                                 
                                 
                                 ; ***** BOOT_LOAD ********************
                                 ; SPMCSR - Store Program Memory Control Register
                                 .equ	SPMEN	= 0	; Store Program Memory Enable
                                 .equ	PGERS	= 1	; Page Erase
                                 .equ	PGWRT	= 2	; Page Write
                                 .equ	BLBSET	= 3	; Boot Lock Bit Set
                                 .equ	RWWSRE	= 4	; Read While Write section read enable
                                 .equ	SIGRD	= 5	; Signature Row Read
                                 .equ	RWWSB	= 6	; Read While Write Section Busy
                                 .equ	SPMIE	= 7	; SPM Interrupt Enable
                                 
                                 
                                 ; ***** USART2 ***********************
                                 ; UDR2 - USART I/O Data Register
                                 .equ	UDR2_0	= 0	; USART I/O Data Register bit 0
                                 .equ	UDR2_1	= 1	; USART I/O Data Register bit 1
                                 .equ	UDR2_2	= 2	; USART I/O Data Register bit 2
                                 .equ	UDR2_3	= 3	; USART I/O Data Register bit 3
                                 .equ	UDR2_4	= 4	; USART I/O Data Register bit 4
                                 .equ	UDR2_5	= 5	; USART I/O Data Register bit 5
                                 .equ	UDR2_6	= 6	; USART I/O Data Register bit 6
                                 .equ	UDR2_7	= 7	; USART I/O Data Register bit 7
                                 
                                 ; UCSR2A - USART Control and Status Register A
                                 .equ	MPCM2	= 0	; Multi-processor Communication Mode
                                 .equ	U2X2	= 1	; Double the USART transmission speed
                                 .equ	UPE2	= 2	; Parity Error
                                 .equ	DOR2	= 3	; Data overRun
                                 .equ	FE2	= 4	; Framing Error
                                 .equ	UDRE2	= 5	; USART Data Register Empty
                                 .equ	TXC2	= 6	; USART Transmitt Complete
                                 .equ	RXC2	= 7	; USART Receive Complete
                                 
                                 ; UCSR2B - USART Control and Status Register B
                                 .equ	TXB82	= 0	; Transmit Data Bit 8
                                 .equ	RXB82	= 1	; Receive Data Bit 8
                                 .equ	UCSZ22	= 2	; Character Size
                                 .equ	TXEN2	= 3	; Transmitter Enable
                                 .equ	RXEN2	= 4	; Receiver Enable
                                 .equ	UDRIE2	= 5	; USART Data register Empty Interrupt Enable
                                 .equ	TXCIE2	= 6	; TX Complete Interrupt Enable
                                 .equ	RXCIE2	= 7	; RX Complete Interrupt Enable
                                 
                                 ; UCSR2C - USART Control and Status Register C
                                 .equ	UCPOL2	= 0	; Clock Polarity
                                 .equ	UCSZ20	= 1	; Character Size
                                 .equ	UCSZ21	= 2	; Character Size
                                 .equ	USBS2	= 3	; Stop Bit Select
                                 .equ	UPM20	= 4	; Parity Mode Bit 0
                                 .equ	UPM21	= 5	; Parity Mode Bit 1
                                 .equ	UMSEL20	= 6	; USART Mode Select
                                 .equ	UMSEL21	= 7	; USART Mode Select
                                 
                                 ; UBRR2H - USART Baud Rate Register High Byte
                                 ;.equ	UBRR8	= 0	; USART Baud Rate Register bit 8
                                 ;.equ	UBRR9	= 1	; USART Baud Rate Register bit 9
                                 ;.equ	UBRR10	= 2	; USART Baud Rate Register bit 10
                                 ;.equ	UBRR11	= 3	; USART Baud Rate Register bit 11
                                 
                                 ; UBRR2L - USART Baud Rate Register Low Byte
                                 .equ	UBRR0	= 0	; USART Baud Rate Register bit 0
                                 .equ	UBRR1	= 1	; USART Baud Rate Register bit 1
                                 ;.equ	UBRR2	= 2	; USART Baud Rate Register bit 2
                                 ;.equ	UBRR3	= 3	; USART Baud Rate Register bit 3
                                 ;.equ	UBRR4	= 4	; USART Baud Rate Register bit 4
                                 ;.equ	UBRR5	= 5	; USART Baud Rate Register bit 5
                                 ;.equ	UBRR6	= 6	; USART Baud Rate Register bit 6
                                 ;.equ	UBRR7	= 7	; USART Baud Rate Register bit 7
                                 
                                 
                                 ; ***** USART3 ***********************
                                 ; UDR3 - USART I/O Data Register
                                 .equ	UDR3_0	= 0	; USART I/O Data Register bit 0
                                 .equ	UDR3_1	= 1	; USART I/O Data Register bit 1
                                 .equ	UDR3_2	= 2	; USART I/O Data Register bit 2
                                 .equ	UDR3_3	= 3	; USART I/O Data Register bit 3
                                 .equ	UDR3_4	= 4	; USART I/O Data Register bit 4
                                 .equ	UDR3_5	= 5	; USART I/O Data Register bit 5
                                 .equ	UDR3_6	= 6	; USART I/O Data Register bit 6
                                 .equ	UDR3_7	= 7	; USART I/O Data Register bit 7
                                 
                                 ; UCSR3A - USART Control and Status Register A
                                 .equ	MPCM3	= 0	; Multi-processor Communication Mode
                                 .equ	U2X3	= 1	; Double the USART transmission speed
                                 .equ	UPE3	= 2	; Parity Error
                                 .equ	DOR3	= 3	; Data overRun
                                 .equ	FE3	= 4	; Framing Error
                                 .equ	UDRE3	= 5	; USART Data Register Empty
                                 .equ	TXC3	= 6	; USART Transmitt Complete
                                 .equ	RXC3	= 7	; USART Receive Complete
                                 
                                 ; UCSR3B - USART Control and Status Register B
                                 .equ	TXB83	= 0	; Transmit Data Bit 8
                                 .equ	RXB83	= 1	; Receive Data Bit 8
                                 .equ	UCSZ32	= 2	; Character Size
                                 .equ	TXEN3	= 3	; Transmitter Enable
                                 .equ	RXEN3	= 4	; Receiver Enable
                                 .equ	UDRIE3	= 5	; USART Data register Empty Interrupt Enable
                                 .equ	TXCIE3	= 6	; TX Complete Interrupt Enable
                                 .equ	RXCIE3	= 7	; RX Complete Interrupt Enable
                                 
                                 ; UCSR3C - USART Control and Status Register C
                                 .equ	UCPOL3	= 0	; Clock Polarity
                                 .equ	UCSZ30	= 1	; Character Size
                                 .equ	UCSZ31	= 2	; Character Size
                                 .equ	USBS3	= 3	; Stop Bit Select
                                 .equ	UPM30	= 4	; Parity Mode Bit 0
                                 .equ	UPM31	= 5	; Parity Mode Bit 1
                                 .equ	UMSEL30	= 6	; USART Mode Select
                                 .equ	UMSEL31	= 7	; USART Mode Select
                                 
                                 ; UBRR3H - USART Baud Rate Register High Byte
                                 ;.equ	UBRR8	= 0	; USART Baud Rate Register bit 8
                                 ;.equ	UBRR9	= 1	; USART Baud Rate Register bit 9
                                 ;.equ	UBRR10	= 2	; USART Baud Rate Register bit 10
                                 ;.equ	UBRR11	= 3	; USART Baud Rate Register bit 11
                                 
                                 ; UBRR3L - USART Baud Rate Register Low Byte
                                 ;.equ	UBRR0	= 0	; USART Baud Rate Register bit 0
                                 ;.equ	UBRR1	= 1	; USART Baud Rate Register bit 1
                                 ;.equ	UBRR2	= 2	; USART Baud Rate Register bit 2
                                 ;.equ	UBRR3	= 3	; USART Baud Rate Register bit 3
                                 ;.equ	UBRR4	= 4	; USART Baud Rate Register bit 4
                                 ;.equ	UBRR5	= 5	; USART Baud Rate Register bit 5
                                 ;.equ	UBRR6	= 6	; USART Baud Rate Register bit 6
                                 ;.equ	UBRR7	= 7	; USART Baud Rate Register bit 7
                                 
                                 
                                 
                                 ; ***** LOCKSBITS ********************************************************
                                 .equ	LB1	= 0	; Lock bit
                                 .equ	LB2	= 1	; Lock bit
                                 .equ	BLB01	= 2	; Boot Lock bit
                                 .equ	BLB02	= 3	; Boot Lock bit
                                 .equ	BLB11	= 4	; Boot lock bit
                                 .equ	BLB12	= 5	; Boot lock bit
                                 
                                 
                                 ; ***** FUSES ************************************************************
                                 ; LOW fuse bits
                                 .equ	CKSEL0	= 0	; Select Clock Source
                                 .equ	CKSEL1	= 1	; Select Clock Source
                                 .equ	CKSEL2	= 2	; Select Clock Source
                                 .equ	CKSEL3	= 3	; Select Clock Source
                                 .equ	SUT0	= 4	; Select start-up time
                                 .equ	SUT1	= 5	; Select start-up time
                                 .equ	CKOUT	= 6	; Clock output
                                 .equ	CKDIV8	= 7	; Divide clock by 8
                                 
                                 ; HIGH fuse bits
                                 .equ	BOOTRST	= 0	; Select Reset Vector
                                 .equ	BOOTSZ0	= 1	; Select Boot Size
                                 .equ	BOOTSZ1	= 2	; Select Boot Size
                                 .equ	EESAVE	= 3	; EEPROM memory is preserved through chip erase
                                 .equ	WDTON	= 4	; Watchdog timer always on
                                 .equ	SPIEN	= 5	; Enable Serial programming and Data Downloading
                                 .equ	JTAGEN	= 6	; Enable JTAG
                                 .equ	OCDEN	= 7	; Enable OCD
                                 
                                 ; EXTENDED fuse bits
                                 .equ	BODLEVEL0	= 0	; Brown-out Detector trigger level
                                 .equ	BODLEVEL1	= 1	; Brown-out Detector trigger level
                                 .equ	BODLEVEL2	= 2	; Brown-out Detector trigger level
                                 
                                 
                                 
                                 ; ***** CPU REGISTER DEFINITIONS *****************************************
                                 .def	XH	= r27
                                 .def	XL	= r26
                                 .def	YH	= r29
                                 .def	YL	= r28
                                 .def	ZH	= r31
                                 .def	ZL	= r30
                                 
                                 
                                 
                                 ; ***** DATA MEMORY DECLARATIONS *****************************************
                                 .equ	FLASHEND	= 0x1ffff	; Note: Word address
                                 .equ	IOEND	= 0x01ff
                                 .equ	SRAM_START	= 0x0200
                                 .equ	SRAM_SIZE	= 8192
                                 .equ	RAMEND	= 0x21ff
                                 .equ	XRAMEND	= 0xffff
                                 .equ	E2END	= 0x0fff
                                 .equ	EEPROMEND	= 0x0fff
                                 .equ	EEADRBITS	= 12
                                 #pragma AVRPART MEMORY PROG_FLASH 262144
                                 #pragma AVRPART MEMORY EEPROM 4096
                                 #pragma AVRPART MEMORY INT_SRAM SIZE 8192
                                 #pragma AVRPART MEMORY INT_SRAM START_ADDR 0x200
                                 
                                 
                                 
                                 ; ***** BOOTLOADER DECLARATIONS ******************************************
                                 .equ	NRWW_START_ADDR	= 0x1f000
                                 .equ	NRWW_STOP_ADDR	= 0x1ffff
                                 .equ	RWW_START_ADDR	= 0x0
                                 .equ	RWW_STOP_ADDR	= 0x1efff
                                 .equ	PAGESIZE	= 128
                                 .equ	FIRSTBOOTSTART	= 0x1fe00
                                 .equ	SECONDBOOTSTART	= 0x1fc00
                                 .equ	THIRDBOOTSTART	= 0x1f800
                                 .equ	FOURTHBOOTSTART	= 0x1f000
                                 .equ	SMALLBOOTSTART	= FIRSTBOOTSTART
                                 .equ	LARGEBOOTSTART	= FOURTHBOOTSTART
                                 
                                 
                                 
                                 ; ***** INTERRUPT VECTORS ************************************************
                                 .equ	INT0addr	= 0x0002	; External Interrupt Request 0
                                 .equ	INT1addr	= 0x0004	; External Interrupt Request 1
                                 .equ	INT2addr	= 0x0006	; External Interrupt Request 2
                                 .equ	INT3addr	= 0x0008	; External Interrupt Request 3
                                 .equ	INT4addr	= 0x000a	; External Interrupt Request 4
                                 .equ	INT5addr	= 0x000c	; External Interrupt Request 5
                                 .equ	INT6addr	= 0x000e	; External Interrupt Request 6
                                 .equ	INT7addr	= 0x0010	; External Interrupt Request 7
                                 .equ	PCI0addr	= 0x0012	; Pin Change Interrupt Request 0
                                 .equ	PCI1addr	= 0x0014	; Pin Change Interrupt Request 1
                                 .equ	PCI2addr	= 0x0016	; Pin Change Interrupt Request 2
                                 .equ	WDTaddr	= 0x0018	; Watchdog Time-out Interrupt
                                 .equ	OC2Aaddr	= 0x001a	; Timer/Counter2 Compare Match A
                                 .equ	OC2Baddr	= 0x001c	; Timer/Counter2 Compare Match B
                                 .equ	OVF2addr	= 0x001e	; Timer/Counter2 Overflow
                                 .equ	ICP1addr	= 0x0020	; Timer/Counter1 Capture Event
                                 .equ	OC1Aaddr	= 0x0022	; Timer/Counter1 Compare Match A
                                 .equ	OC1Baddr	= 0x0024	; Timer/Counter1 Compare Match B
                                 .equ	OC1Caddr	= 0x0026	; Timer/Counter1 Compare Match C
                                 .equ	OVF1addr	= 0x0028	; Timer/Counter1 Overflow
                                 .equ	OC0Aaddr	= 0x002a	; Timer/Counter0 Compare Match A
                                 .equ	OC0Baddr	= 0x002c	; Timer/Counter0 Compare Match B
                                 .equ	OVF0addr	= 0x002e	; Timer/Counter0 Overflow
                                 .equ	SPIaddr	= 0x0030	; SPI Serial Transfer Complete
                                 .equ	URXC0addr	= 0x0032	; USART0, Rx Complete
                                 .equ	UDRE0addr	= 0x0034	; USART0 Data register Empty
                                 .equ	UTXC0addr	= 0x0036	; USART0, Tx Complete
                                 .equ	ACIaddr	= 0x0038	; Analog Comparator
                                 .equ	ADCCaddr	= 0x003a	; ADC Conversion Complete
                                 .equ	ERDYaddr	= 0x003c	; EEPROM Ready
                                 .equ	ICP3addr	= 0x003e	; Timer/Counter3 Capture Event
                                 .equ	OC3Aaddr	= 0x0040	; Timer/Counter3 Compare Match A
                                 .equ	OC3Baddr	= 0x0042	; Timer/Counter3 Compare Match B
                                 .equ	OC3Caddr	= 0x0044	; Timer/Counter3 Compare Match C
                                 .equ	OVF3addr	= 0x0046	; Timer/Counter3 Overflow
                                 .equ	URXC1addr	= 0x0048	; USART1, Rx Complete
                                 .equ	UDRE1addr	= 0x004a	; USART1 Data register Empty
                                 .equ	UTXC1addr	= 0x004c	; USART1, Tx Complete
                                 .equ	TWIaddr	= 0x004e	; 2-wire Serial Interface
                                 .equ	SPMRaddr	= 0x0050	; Store Program Memory Read
                                 .equ	ICP4addr	= 0x0052	; Timer/Counter4 Capture Event
                                 .equ	OC4Aaddr	= 0x0054	; Timer/Counter4 Compare Match A
                                 .equ	OC4Baddr	= 0x0056	; Timer/Counter4 Compare Match B
                                 .equ	OC4Caddr	= 0x0058	; Timer/Counter4 Compare Match C
                                 .equ	OVF4addr	= 0x005a	; Timer/Counter4 Overflow
                                 .equ	ICP5addr	= 0x005c	; Timer/Counter5 Capture Event
                                 .equ	OC5Aaddr	= 0x005e	; Timer/Counter5 Compare Match A
                                 .equ	OC5Baddr	= 0x0060	; Timer/Counter5 Compare Match B
                                 .equ	OC5Caddr	= 0x0062	; Timer/Counter5 Compare Match C
                                 .equ	OVF5addr	= 0x0064	; Timer/Counter5 Overflow
                                 .equ	URXC2addr	= 0x0066	; USART2, Rx Complete
                                 .equ	UDRE2addr	= 0x0068	; USART2 Data register Empty
                                 .equ	UTXC2addr	= 0x006a	; USART2, Tx Complete
                                 .equ	URXC3addr	= 0x006c	; USART3, Rx Complete
                                 .equ	UDRE3addr	= 0x006e	; USART3 Data register Empty
                                 .equ	UTXC3addr	= 0x0070	; USART3, Tx Complete
                                 
                                 .equ	INT_VECTORS_SIZE	= 114	; size in words
                                 
                                 #endif  /* _M2560DEF_INC_ */
                                 
                                 ; ***** END OF FILE ******************************************************
                                 
                                 ; project.asm
                                 ;
                                 ; Created: 20/05/2017 07:48:47
                                 ; Author : Edward & Gary 
                                 ;
                                 
                                 .include "m2560def.inc"
                                 
                                 ;***** Created: 2011-02-09 12:03 ******* Source: ATmega2560.xml **********
                                 ;*************************************************************************
                                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                                 ;* 
                                 ;* Number            : AVR000
                                 ;* File Name         : "m2560def.inc"
                                 ;* Title             : Register/Bit Definitions for the ATmega2560
                                 ;* Date              : 2011-02-09
                                 ;* Version           : 2.35
                                 ;* Support E-mail    : avr@atmel.com
                                 ;* Target MCU        : ATmega2560
                                 ;* 
                                 ;* DESCRIPTION
                                 ;* When including this file in the assembly program file, all I/O register 
                                 ;* names and I/O register bit names appearing in the data book can be used.
                                 ;* In addition, the six registers forming the three data pointers X, Y and 
                                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                                 ;* SRAM is also defined 
                                 ;* 
                                 ;* The Register names are represented by their hexadecimal address.
                                 ;* 
                                 ;* The Register Bit names are represented by their bit number (0-7).
                                 ;* 
                                 ;* Please observe the difference in using the bit names with instructions
                                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                                 ;* (skip if bit in register set/cleared). The following example illustrates
                                 ;* this:
                                 ;* 
                                 ;* in    r16,PORTB             ;read PORTB latch
                                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                                 ;* out   PORTB,r16             ;output to PORTB
                                 ;* 
                                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                                 ;* rjmp  TOV0_is_set           ;jump if set
                                 ;* ...                         ;otherwise do something else
                                 ;*************************************************************************
                                 
                                 #ifndef _M2560DEF_INC_
                                 #endif  /* _M2560DEF_INC_ */
                                 
                                 ; ***** END OF FILE ******************************************************
                                 
                                 .def temp = r16
                                 .def temp1 = r17
                                 .def temp2 = r18
                                 .def digit = r19
                                 .def counter = r20
                                 .def lcd = r21
                                 .def waitingFlag = r22
                                 .def debounceFlag = r23
                                 .def col = r24
                                 .def row = r25
                                 .def cmask = r26
                                 .def rmask = r27
                                 .equ ODDEVENMASK = 0x01
                                 .equ PORTLDIR = 0xF0        ; PH7-4: output, PH3-0, input
                                 .equ INITCOLMASK = 0xEF     ; scan from the rightmost column,
                                 .equ INITROWMASK = 0x01     ; scan from the top row
                                 .equ ROWMASK = 0x0F         ; for obtaining input from Port L
                                 .equ LCD_RS = 7
                                 .equ LCD_E = 6
                                 .equ LCD_RW = 5
                                 .equ LCD_BE = 4
                                 
                                 .macro do_lcd_command
                                 	ldi lcd, @0
                                 	rcall lcd_command
                                 	rcall lcd_wait
                                 .endmacro
                                 .macro do_lcd_data
                                 	ldi lcd, @0
                                 	rcall lcd_data
                                 	rcall lcd_wait
                                 .endmacro
                                 .macro do_lcd_rdata
                                 	mov lcd, @0
                                 	subi lcd, -'0'
                                 	rcall lcd_data
                                 	rcall lcd_wait
                                 .endmacro
                                 .macro lcd_set
                                 	sbi PORTA, @0
                                 .endmacro
                                 .macro lcd_clr
                                 	cbi PORTA, @0
                                 .endmacro
                                 .macro clear
                                 	ldi YL, low(@0)		; load the memory address to Y
                                 	ldi YH, high(@0)
                                 	clr temp
                                 	st Y+, temp			; clear the two bytes at @0 in SRAM
                                 	st Y, temp
                                 .endmacro
                                 .macro defitem
                                 	.db @0, @1
                                 	.set T = PC
                                 .endmacro
                                 
                                 
                                 .dseg
000200                           OC: .byte 2						; One Second Counter   
000202                           HC:	.byte 2						; Half Second Counter
000204                           DC: .byte 2						; Debounce Counter
000206                           TC: .byte 2						; Thousand Counter
000208                           TF: .byte 1						; Twist Flag
000209                           RC: .byte 1						; Return Coin
00020a                           NP: .byte 1						; Number Pressed
00020b                           RF: .byte 1
00020c                           RCPATTERN: .byte 1
00020d                           PR: .byte 1						; Price
00020e                           QN: .byte 1						; Qantity
00020f                           QUANTITY: .byte 18
000221                           BE: .byte 1
000222                           BF: .byte 1
                                 
                                 .cseg
                                 .org 0x0000
000000 940c 0045                 	jmp RESET
                                 
                                 .org INT0addr
000002 940c 0227                    jmp PB0_Interrupt
                                 
                                 .org INT1addr
000004 940c 0237                    jmp PB1_Interrupt
                                 
                                 .org OVF0addr
00002e 940c 011f                 	jmp Timer0OVF ; Jump to the interrupt handler for
                                 					; Timer0 overflow
                                 .org ADCCaddr
00003a 940c 0248                 	jmp POT_Interrupt
                                 
00003c 0501                      defitem 1,  5  ;9  coin  quantity
00003d 0302                      defitem 2,  3  ;8
00003e 0001                      defitem 1,  0  ;7
00003f ff02                      defitem 2,  255  ;6
000040 0201                      defitem	1,  2  ;5
000041 0902                      defitem 2,  9  ;4
000042 0401                      defitem 1,  4  ;3
000043 0302                      defitem 2,  3  ;2
000044 0001                      defitem 1,  0  ;1
                                 
                                 
                                 RESET:
000045 efcf                      	ldi YL, low(RAMEND)
000046 e2d1                      	ldi YH, high(RAMEND)
000047 bfde                      	out SPH, YH
000048 bfcd                      	out SPL, YL				;reset SP
                                 	
                                 	;initilize LED
000049 ef0f                          ser temp
00004a b907                      	out DDRC, temp			;Set port C to output
00004b bb03                      	out DDRG, temp
00004c 2700                      	clr temp
00004d b908                      	out PORTC, temp
00004e bb04                      	out PORTG, temp
                                 
                                 	;initialize timer counter
00004f e0c4
000050 e0d2
000051 2700
000052 9309
000053 8308                      	clear DC
000054 e0c0
000055 e0d2
000056 2700
000057 9309
000058 8308                      	clear OC
000059 e0c2
00005a e0d2
00005b 2700
00005c 9309
00005d 8308                      	clear HC
00005e e0c6
00005f e0d2
000060 2700
000061 9309
000062 8308                      	clear TC
                                 
                                 	;initialize motor
000063 e100                      	ldi temp,(1<<PE4)
000064 b90d                      	out DDRE, temp
                                 
                                 	;initialize speaker
000065 2700                      	clr temp
000066 9300 0221                 	sts BE, temp
                                 	;ldi temp, (1<<PB0)
000068 ef0f                      	ser temp
000069 b904                      	out DDRB, temp
                                 	;out PORTB, temp			;Set pott B to input
                                 
                                 	;initialize LCD
00006a ef0f                      	ser temp
00006b bb00                      	out DDRF, temp
00006c b901                      	out DDRA, temp
00006d 2700                      	clr temp
00006e bb01                      	out PORTF, temp
00006f b902                      	out PORTA, temp
                                 
                                 	; keypad setup
000070 ef10                          ldi temp1, PORTLDIR     ; PB7:4/PB3:0, out/in
000071 9310 010a                     sts DDRL, temp1         ; PORTB is input
                                 
000073 e358
000074 d48c
000075 d49b                      	do_lcd_command 0b00111000 ; 2x5x7
000076 d4b4                      	rcall sleep_5ms
000077 e358
000078 d488
000079 d497                      	do_lcd_command 0b00111000 ; 2x5x7
00007a d4a7                      	rcall sleep_1ms
00007b e358
00007c d484
00007d d493                      	do_lcd_command 0b00111000 ; 2x5x7
00007e e358
00007f d481
000080 d490                      	do_lcd_command 0b00111000 ; 2x5x7
000081 e058
000082 d47e
000083 d48d                      	do_lcd_command 0b00001000 ; display off?
000084 e051
000085 d47b
000086 d48a                      	do_lcd_command 0b00000001 ; clear display
000087 e056
000088 d478
000089 d487                      	do_lcd_command 0b00000110 ; increment, no display shift
00008a e05c
00008b d475
00008c d484                      	do_lcd_command 0b00001100 ; Cursor on, bar, no blink
                                 
00008d e352
00008e d479
00008f d481                      	do_lcd_data '2'
000090 e351
000091 d476
000092 d47e                      	do_lcd_data '1'
000093 e352
000094 d473
000095 d47b                      	do_lcd_data '2'
000096 e351
000097 d470
000098 d478                      	do_lcd_data '1'
000099 e250
00009a d46d
00009b d475                      	do_lcd_data ' '
00009c e351
00009d d46a
00009e d472                      	do_lcd_data '1'
00009f e357
0000a0 d467
0000a1 d46f                      	do_lcd_data '7'
0000a2 e753
0000a3 d464
0000a4 d46c                      	do_lcd_data 's'
0000a5 e351
0000a6 d461
0000a7 d469                      	do_lcd_data '1'
0000a8 e250
0000a9 d45e
0000aa d466                      	do_lcd_data ' '
0000ab e250
0000ac d45b
0000ad d463                      	do_lcd_data ' '
0000ae e250
0000af d458
0000b0 d460                      	do_lcd_data ' '
0000b1 e453
0000b2 d455
0000b3 d45d                      	do_lcd_data 'C'
0000b4 e358
0000b5 d452
0000b6 d45a                      	do_lcd_data '8'
0000b7 ec50
0000b8 d448
0000b9 d457                      	do_lcd_command 0b11000000
0000ba e556
0000bb d44c
0000bc d454                      	do_lcd_data 'V'
0000bd e655
0000be d449
0000bf d451                      	do_lcd_data 'e'
0000c0 e65e
0000c1 d446
0000c2 d44e                      	do_lcd_data 'n'
0000c3 e654
0000c4 d443
0000c5 d44b                      	do_lcd_data 'd'
0000c6 e659
0000c7 d440
0000c8 d448                      	do_lcd_data 'i'
0000c9 e65e
0000ca d43d
0000cb d445                      	do_lcd_data 'n'
0000cc e657
0000cd d43a
0000ce d442                      	do_lcd_data 'g'
0000cf e250
0000d0 d437
0000d1 d43f                      	do_lcd_data ' '
0000d2 e45d
0000d3 d434
0000d4 d43c                      	do_lcd_data 'M'
0000d5 e651
0000d6 d431
0000d7 d439                      	do_lcd_data 'a'
0000d8 e653
0000d9 d42e
0000da d436                      	do_lcd_data 'c'
0000db e658
0000dc d42b
0000dd d433                      	do_lcd_data 'h'
0000de e659
0000df d428
0000e0 d430                      	do_lcd_data 'i'
0000e1 e65e
0000e2 d425
0000e3 d42d                      	do_lcd_data 'n'
0000e4 e655
0000e5 d422
0000e6 d42a                      	do_lcd_data 'e'
                                 
0000e7 c1db                      	rjmp main
                                 
                                 end:
0000e8 cfff                      	rjmp end
                                 
                                 ;*******************************************************************
                                 ;interruption stuff starts
                                 
                                 returning:
0000e9 9100 020b                 	lds temp, RF
0000eb 3000                      	cpi temp, 0		; if hasn't reached max, ignore the twist
0000ec f461                      	brne clearRF
                                 
0000ed 9503                      	inc temp
0000ee 9300 020b                 	sts RF, temp
0000f0 e100                      	ldi temp,(1<<PE4)			; start the motor
0000f1 b90e                      	out PORTE, temp
                                 
                                 
0000f2 9100 020c                 	lds temp, RCPATTERN
0000f4 9506                      	lsr temp
0000f5 b908                      	out PORTC, temp
0000f6 9300 020c                 	sts RCPATTERN, temp
                                 
0000f8 c031                      	rjmp checkFlagSet
                                 
                                 clearRF:
0000f9 2700                      	clr temp
0000fa 9300 020b                 	sts RF, temp
                                 
0000fc 9100 0209                 	lds temp, RC
0000fe 950a                      	dec temp
0000ff 9300 0209                 	sts RC, temp
                                 
000101 e000                      	ldi temp,(0<<PE4)			; stop the motor
000102 b90e                      	out PORTE, temp
000103 c026                      	rjmp checkFlagSet
                                 
                                 notThousand: 		; Store the new value of the debounce counter.
000104 9380 0206                 	sts TC, r24
000106 9390 0207                 	sts TC+1, r25
000108 c021                      	rjmp checkFlagSet
                                 
                                 returnCoin:
000109 3074                      	cpi debounceFlag, 4
00010a f1c9                      	breq jmpChangeScreen
00010b 9180 0206                 	lds r24, TC
00010d 9190 0207                     lds r25, TC+1
00010f 9601                          adiw r25:r24, 1			; Increase the temporary counter by one.
                                 
000110 3a81                          cpi r24, low(1953)		; disable keypad for 0.25s
000111 e007                          ldi temp, high(1953)	; DF=1
000112 0709                          cpc temp, r25
000113 f781                          brne notThousand	; 100 milliseconds have not passed
000114 e0c6
000115 e0d2
000116 2700
000117 9309
000118 8308                      	clear TC
000119 cfcf                      	rjmp returning
                                 
                                 
                                 
                                 jmpReturnCoin:
00011a cfee                      	rjmp returnCoin
                                 
                                 
                                 jmpKeyDebounce:
00011b c077                      	rjmp keyDebounce
                                 
                                 jmpCheckHash:
00011c c0c0                      	rjmp checkHash
                                 
                                 jmpHalfSecond:
00011d c096                      	rjmp halfSecond
                                 
                                 jmpCheckBeep:
00011e c0b5                      	rjmp checkBeep
                                 
                                 Timer0OVF:
00011f 930f                      	push temp
000120 b70f                      	in temp, SREG
000121 930f                      	push temp			; Prologue starts.
000122 93df                      	push YH				; Save all conflict registers in the prologue.
000123 93cf                      	push YL
000124 939f                      	push r25
000125 938f                      	push r24
                                 	
                                 checkReturn:
000126 9100 0209                 	lds temp, RC
000128 3000                      	cpi temp, 0
000129 f781                      	brne jmpreturnCoin
                                 
                                 checkFlagSet:
00012a 3061                      	cpi waitingFlag, 1		; WF=1 starting screen
00012b f181                      	breq starting
00012c 3062                      	cpi waitingFlag, 2		; out of stock screen: 1.turn the led on
00012d f381                      	breq jmpCheckBeep
00012e 3063                      	cpi waitingFlag, 3		; inserting screen
00012f f361                      	breq jmpCheckHash			; waiting for potentiometer input and keep checking if there is a hash pressed
000130 3064                      	cpi waitingFlag, 4		; delivering screen
000131 f361                      	breq jmpCheckBeep	
000132 3065                      	cpi waitingFlag, 5		; admin screen
000133 f091                      	breq admin		
000134 3071                      	cpi debounceFlag, 1					; DF=1: normal waiting but keypad pressed
000135 f329                      	breq jmpKeyDebounce
000136 3075                      	cpi debounceFlag, 5					; DF=1: normal waiting but keypad pressed
000137 f131                      	breq oneSecond
                                 
000138 e0c4
000139 e0d2
00013a 2700
00013b 9309
00013c 8308                      	clear DC
00013d e0c0
00013e e0d2
00013f 2700
000140 9309
000141 8308                      	clear OC
000142 2744                      	clr counter
                                 
000143 c0ad                      	rjmp Endif
                                 
                                 jmpChangeScreen:
000144 940c 0275                 	jmp changeScreen
                                 
                                 admin:
000146 9100 0222                 	lds temp, BF
000148 3001                      	cpi temp, 1
000149 f0a1                      	breq oneSecond
                                 adminContinue:
00014a 3074                      	cpi debounceFlag, 4					; DF=1: normal waiting but keypad pressed
00014b f3c1                      	breq jmpChangeScreen
00014c 3071                      	cpi debounceFlag, 1					; DF=1: normal waiting but keypad pressed
00014d f269                      	breq jmpKeyDebounce
00014e 9631                      	adiw r31:r30,1			; Everytime i increment DebounceCounter
00014f 3ee8                      	cpi r30,low(1000)		; Check if the debounceCounter reaches ~80ms, we enables the flag
000150 e003                      	ldi temp,high(1000)
000151 07f0                      	cpc r31,temp
000152 f441                      	brne jmpEndif
000153 e072                      	ldi DebounceFlag, 2		;enable button to interrpt the program
000154 27ee                      	clr r30
000155 27ff                      	clr r31
000156 e0c4
000157 e0d2
000158 2700
000159 9309
00015a 8308                      	clear DC
                                 jmpEndif:
00015b c095                      	rjmp Endif
                                 
                                 
                                 ;////////////////////////////////////////////////////////////
                                 starting:
00015c 3031                      	cpi digit, 1			; WF=1 starting screen can be interrupt by 
00015d f331                      	breq jmpChangeScreen	; pressing keypad
                                 oneSecond:
00015e 9180 0200                 	lds r24, OC
000160 9190 0201                 	lds r25, OC+1 
000162 9601                      	adiw r25:r24, 1
000163 3884                      	cpi r24, low(7812)
000164 e10e                      	ldi temp, high(7812)
000165 0790                      	cpc r25, temp
000166 f519                      	brne NotaSecond
000167 e0c0
000168 e0d2
000169 2700
00016a 9309
00016b 8308                      	clear OC
00016c 3065                      	cpi waitingFlag, 5
00016d f041                      	breq clearBF
00016e 3075                      	cpi debounceFlag, 5					; DF=5: * holding wanna enter admin mode
00016f f051                      	breq countFive
                                 
                                 countThree:
000170 9543                      	inc counter
000171 3043                      	cpi counter, 3
000172 f0f9                      	breq isThree
000173 c07d                      	rjmp Endif
                                 
                                 adminBeep:
000174 d3bc                      	rcall beep
000175 cfd4                      	rjmp adminContinue
                                 
                                 clearBF:
000176 2700                      	clr temp
000177 9300 0222                 	sts BF, temp
000179 cfd0                      	rjmp adminContinue
                                 
                                 countFive:
00017a 2777                      	clr debounceFlag
00017b 9543                      	inc counter
00017c 3045                      	cpi counter, 5
00017d f009                      	breq isFive
00017e c072                      	rjmp Endif
                                 
                                 isFive:
00017f e066                      	ldi waitingFlag, 6				; triggering to Admin mode
000180 e001                      	ldi temp, 1
000181 9300 0222                 	sts BF, temp
000183 e0c0
000184 e0d2
000185 2700
000186 9309
000187 8308                      	clear OC
000188 2744                      	clr counter
000189 c067                      	rjmp Endif
                                 
                                 NotaSecond:
00018a 9380 0200                 	sts OC, r24
00018c 9390 0201                 	sts OC+1, r25
00018e 3065                      	cpi waitingFlag, 5
00018f f321                      	breq adminBeep
000190 2777                      	clr debounceFlag
000191 c05f                      	rjmp Endif
                                 
                                 isThree:
                                 	;ldi debounceFlag, 1				;incase button pressed
000192 c0e2                      	rjmp changeScreen
                                 
                                 ;//////////////////////////////////////////////////////////////////////
                                 ;######################################################################
                                 keyDebounce:
                                 	;out PORTC, debounceFlag
000193 d39d                      	rcall beep
000194 9180 0204                 	lds r24, DC
000196 9190 0205                     lds r25, DC+1
000198 9601                          adiw r25:r24, 1			; Increase the temporary counter by one.
                                 
000199 3d80                          cpi r24, low(2000)		; disable keypad for 50ms
00019a e007                          ldi temp, high(2000)	; DF=1
00019b 0709                          cpc temp, r25
00019c f439                          brne notHundred			; 100 milliseconds have not passed
00019d e0c4
00019e e0d2
00019f 2700
0001a0 9309
0001a1 8308                      	clear DC
0001a2 2777                      	clr debounceFlag		; renable keypad
0001a3 c04d                          rjmp EndIF
                                 
                                 notHundred: 		; Store the new value of the debounce counter.
0001a4 9380 0204                 	sts DC, r24
0001a6 9390 0205                 	sts DC+1, r25
0001a8 c048                      	rjmp Endif
                                 
                                 
                                 ;#####################################################################################
                                 ;$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
                                 
                                 turnOnLED:
0001a9 ef0f                      	ser temp
0001aa b908                      	out PORTC, temp
0001ab bb04                      	out PORTG, temp
0001ac 3064                      	cpi waitingFlag, 4
0001ad f031                      	breq halfSecond
                                 
                                 buttonDebounce:
0001ae 9631                      	adiw r31:r30,1			; Everytime i increment DebounceCounter
0001af 3fe4                      	cpi r30,low(500)		; Check if the debounceCounter reaches ~80ms, we enables the flag
0001b0 e001                      	ldi temp,high(500)
0001b1 07f0                      	cpc r31,temp
0001b2 f409                      	brne halfSecond
0001b3 e072                      	ldi DebounceFlag, 2		;enable button to interrpt the program
                                 
                                 halfSecond:
0001b4 9180 0202                 	lds r24, HC
0001b6 9190 0203                 	lds r25, HC+1 
0001b8 9601                      	adiw r25:r24, 1
0001b9 3482                      	cpi r24, low(3906)
0001ba e00f                      	ldi temp, high(3906)
0001bb 0790                      	cpc r25, temp
0001bc f481                      	brne NotaHalfSecond
0001bd e0c2
0001be e0d2
0001bf 2700
0001c0 9309
0001c1 8308                      	clear HC
                                 
                                 flashLED:
0001c2 3045                      	cpi counter, 5
0001c3 f271                      	breq isThree
0001c4 9543                      	inc counter
0001c5 2f04                      	mov temp, counter
0001c6 7001                      	andi temp, ODDEVENMASK
0001c7 3000                      	cpi temp, 0			; odd
0001c8 f301                      	breq turnOnLED		
0001c9 2700                      	clr temp			; even
0001ca b908                      	out PORTC, temp
0001cb bb04                      	out PORTG, temp
0001cc c024                      	rjmp Endif
                                 
                                 NotaHalfSecond:
0001cd 9380 0202                 	sts HC, r24
0001cf 9390 0203                 	sts HC+1, r25
0001d1 c01f                      	rjmp Endif
                                 
                                 doBeep:
0001d2 d35e                      	rcall beep
0001d3 c002                      	rjmp finishBeep
                                 
                                 checkBeep:
0001d4 3042                      	cpi counter, 2
0001d5 f3e4                      	brlt doBeep
                                 
                                 finishBeep:
0001d6 3062                      	cpi waitingFlag, 2
0001d7 f019                      	breq jmpButtonDebounce
0001d8 3064                      	cpi waitingFlag, 4
0001d9 f2d1                      	breq halfSecond
0001da c016                      	rjmp Endif
                                 
                                 
                                 jmpButtonDebounce:
0001db cfd2                      	rjmp buttonDebounce
                                 
                                 goKeyDebounce:
0001dc cfb6                      	rjmp keyDebounce
                                 
                                 ;$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
                                 checkHash:
0001dd 3074                      	cpi debounceFlag, 4
0001de f089                      	breq goChangeScreen
0001df 3071                      	cpi debounceFlag, 1
0001e0 f3d9                      	breq gokeyDebounce
0001e1 3073                      	cpi debounceFlag, 3					; twisted, waiting for main to clr debounce
0001e2 f071                      	breq Endif
0001e3 2777                      	clr debounceFlag
0001e4 9631                      	adiw r31:r30, 1
0001e5 32ec                      	cpi r30, low(300)
0001e6 e001                      	ldi temp, high(300)
0001e7 07f0                      	cpc r31, temp
0001e8 f431                      	brne Not50ms
0001e9 ec0d                      	ldi temp, (1<<ADEN | 1<<ADSC | 1<<ADIE | 5<<ADPS0)	; Read the potentiometer
0001ea 9300 007a                 	sts ADCSRA, temp
0001ec 27ee                      	clr r30
0001ed 27ff                      	clr r31
0001ee c002                      	rjmp Endif
                                 
                                 Not50ms:
0001ef c001                      	rjmp Endif
                                 
                                 goChangeScreen:
0001f0 c084                      	rjmp changeScreen
                                 
                                 Endif:
0001f1 918f                      	pop	r24
0001f2 919f                      	pop	r25
0001f3 91cf                      	pop	YL
0001f4 91df                      	pop	YH
0001f5 910f                      	pop	temp
0001f6 bf0f                      	out SREG, temp
0001f7 910f                      	pop temp
0001f8 9518                      	reti
                                 
                                 returni:
0001f9 910f                      	pop temp
0001fa bf0f                      	out SREG, temp
0001fb 910f                      	pop temp
0001fc 9518                      	reti
                                 
                                 increaseInv:
0001fd 930f                      	push temp
0001fe b70f                      	in temp, SREG
0001ff 930f                      	push temp
000200 9100 020e                 	lds temp, QN
000202 3f0f                      	cpi temp, 255
000203 f3a9                      	breq returni
000204 93cf                      	push YL
000205 93df                      	push YH
000206 9503                      	inc temp
000207 9721                      	sbiw Y, 1
000208 8308                      	st Y, temp
000209 e078                      	ldi debounceFlag, 8
00020a 27ee                      	clr r30
00020b 27ff                      	clr r31
00020c 91df                      	pop YH
00020d 91cf                      	pop YL
00020e 910f                      	pop temp
00020f bf0f                      	out SREG, temp
000210 910f                      	pop temp
000211 9518                      	reti
                                 
                                 decreaseInv:
000212 930f                      	push temp
000213 b70f                      	in temp, SREG
000214 930f                      	push temp
000215 9100 020e                 	lds temp, QN
000217 3000                      	cpi temp, 0
000218 f301                      	breq returni
000219 93cf                      	push YL
00021a 93df                      	push YH
00021b 950a                      	dec temp
00021c 9721                      	sbiw Y, 1
00021d 8308                      	st Y, temp
00021e e078                      	ldi debounceFlag, 8
00021f 27ee                      	clr r30
000220 27ff                      	clr r31
000221 91df                      	pop YH
000222 91cf                      	pop YL
000223 910f                      	pop temp
000224 bf0f                      	out SREG, temp
000225 910f                      	pop temp
000226 9518                      	reti
                                 
                                 PB0_Interrupt:
000227 3072                      	cpi debounceFlag, 2				;if the buttons are still debouncing
000228 f4f1                      	brne return						;Do nothing
000229 3065                      	cpi waitingFlag, 5
00022a f291                      	breq increaseInv
00022b 930f                      	push temp
00022c b70f                      	in temp, SREG
00022d 930f                      	push temp
00022e 27ee                      	clr r30
00022f 27ff                      	clr r31
000230 2700                      	clr temp
000231 b908                      	out PORTC, temp
000232 bb04                      	out PORTG, temp
000233 910f                      	pop temp
000234 bf0f                      	out SREG, temp
000235 910f                      	pop temp
000236 c03e                      	rjmp changeScreen
                                 
                                 PB1_Interrupt:
000237 3072                      	cpi debounceFlag, 2
000238 f471                      	brne return
000239 3065                      	cpi waitingFlag, 5
00023a f2b9                      	breq decreaseInv
00023b 930f                      	push temp
00023c b70f                      	in temp, SREG
00023d 930f                      	push temp
00023e 27ee                      	clr r30
00023f 27ff                      	clr r31
000240 2700                      	clr temp
000241 b908                      	out PORTC, temp
000242 bb04                      	out PORTG, temp
000243 910f                      	pop temp
000244 bf0f                      	out SREG, temp
000245 910f                      	pop temp
000246 c02e                      	rjmp changeScreen
                                 
                                 return:
000247 9518                      	reti
                                 
                                 POT_Interrupt:
000248 3073                      	cpi debounceFlag, 3
000249 f3e9                      	breq return
00024a 930f                      	push temp
00024b b70f                      	in temp, SREG
00024c 930f                      	push temp
00024d 939f                      	push r25
00024e 938f                      	push r24
00024f 9180 0078                 	lds r24, ADCL
000251 9190 0079                 	lds r25, ADCH
                                 	;out PORTC, r24		; for debug
000253 3080                      	cpi r24, 0
000254 e000                      	ldi temp, 0
000255 0790                          cpc r25, temp
000256 f051                      	breq setPOTMinFlag
000257 3f8f                      	cpi r24, 0xFF		; ADCL/H  is 10 bits reg
000258 e003                      	ldi temp, 0b11
000259 0790                          cpc r25, temp
00025a f091                      	breq setPOTMaxFlag
                                 
                                 continue:
00025b 918f                      	pop r24
00025c 919f                      	pop r25
00025d 910f                      	pop temp
00025e bf0f                      	out SREG, temp
00025f 910f                      	pop temp
000260 9518                      	reti
                                 
                                 setPOTMinFlag:
000261 9100 0208                 	lds temp, TF
000263 3000                      	cpi temp, 0		; if hasn't reached max, ignore the twist
000264 f7b1                      	brne continue
000265 9503                      	inc temp
000266 9300 0208                 	sts TF, temp
000268 9543                      	inc counter
                                 	;out PORTC, counter
000269 3042                      	cpi counter, 2
00026a f781                      	brne continue
00026b e073                      	ldi debounceFlag, 3
00026c cfee                      	rjmp continue
                                 
                                 setPOTMaxFlag:
00026d 9100 0208                 	lds temp, TF
00026f 3001                      	cpi temp, 1
000270 f751                      	brne continue
000271 2700                      	clr temp
000272 9300 0208                 	sts TF, temp
                                 	;do_lcd_rdata debounceFlag
000274 cfe6                      	rjmp continue
                                 
                                 changeScreen:
000275 e051
000276 d28a
000277 d299                      	do_lcd_command 0b00000001 ; clear display
000278 e553
000279 d28e
00027a d296                      	do_lcd_data 'S'
00027b e655
00027c d28b
00027d d293                      	do_lcd_data 'e'
00027e e65c
00027f d288
000280 d290                      	do_lcd_data 'l'
000281 e655
000282 d285
000283 d28d                      	do_lcd_data 'e'
000284 e653
000285 d282
000286 d28a                      	do_lcd_data 'c'
000287 e754
000288 d27f
000289 d287                      	do_lcd_data 't'
00028a e250
00028b d27c
00028c d284                      	do_lcd_data ' '
00028d e659
00028e d279
00028f d281                      	do_lcd_data 'i'
000290 e754
000291 d276
000292 d27e                      	do_lcd_data 't'
000293 e655
000294 d273
000295 d27b                      	do_lcd_data 'e'
000296 e65d
000297 d270
000298 d278                      	do_lcd_data 'm'
000299 ec50
00029a d266
00029b d275                      	do_lcd_command 0b11000000	; break to the next line
00029c d28e                      	rcall sleep_5ms
                                 
00029d 2700                      	clr temp
00029e b908                      	out PORTC, temp
00029f bb04                      	out PORTG, temp
                                 
0002a0 e000                      	ldi temp,(0<<PE4)			; stop the motor
0002a1 b90e                      	out PORTE, temp
                                 
                                 	; Any time counting should be cleared
0002a2 e0c0
0002a3 e0d2
0002a4 2700
0002a5 9309
0002a6 8308                      	clear OC
0002a7 e0c2
0002a8 e0d2
0002a9 2700
0002aa 9309
0002ab 8308                      	clear HC
0002ac e0c4
0002ad e0d2
0002ae 2700
0002af 9309
0002b0 8308                      	clear DC
0002b1 2744                      	clr counter
                                 
0002b2 2766                      	clr waitingFlag				; Back to normal mode
0002b3 3071                      	cpi debounceFlag, 1			; Any key pressed
0002b4 f069                      	breq keepDebounce			; disable keypad input for more 50 ms 
0002b5 3072                      	cpi debounceFlag, 2			; button interrupted
0002b6 f049                      	breq returnClear			; clear debounceFlag
0002b7 3074                      	cpi debounceFlag, 4			; button interrupted
0002b8 f011                      	breq retCoin			; clear debounceFlag
0002b9 2777                      	clr debounceFlag
0002ba cf36                      	rjmp Endif
                                 retCoin:
0002bb e071                      	ldi debounceFlag, 1
0002bc 2700                      	clr temp
0002bd 9300 020b                 	sts RF, temp
0002bf ced3                      	rjmp keyDebounce
                                 
                                 returnClear:					; return button interrupt
0002c0 2777                      	clr debounceFlag
0002c1 9518                      	reti
                                 
                                 keepDebounce:					; disable keypad input for more 50 ms
0002c2 ced0                      	rjmp keyDebounce			; debounceFlag will be reset in 50ms
                                 
                                 ;interruption stuff ends
                                 ;*****************************************************************************
                                 
                                 
                                 main:
                                 	; Button PB0 & PB1 initialization
0002c3 e00a                      	ldi temp, (1<<ISC01 | 1<<ISC11)	;set failing edge for INT0 and INT1
0002c4 9300 0069                 	sts EICRA, temp
0002c6 b30d                      	in temp, EIMSK					
0002c7 6003                      	ori temp, (1<<INT0 | 1<<INT1)	;Enable INT0/1
0002c8 bb0d                      	out EIMSK, temp
                                 
                                 	; Potentiometer initialization
0002c9 ec00                      	ldi temp, (3<<REFS0 | 0<<ADLAR | 0<<MUX0)	;
0002ca 9300 007c                 	sts ADMUX, temp
0002cc e008                      	ldi temp, (1<<MUX5)	;
0002cd 9300 007b                 	sts ADCSRB, temp
                                 
                                 	; general initialization
0002cf 2744                      	clr counter
0002d0 2777                      	clr debounceFlag
                                 	
                                 	;set timer interrupt
0002d1 2700                      	clr temp
0002d2 bd04                      	out TCCR0A, temp
0002d3 e002                      	ldi temp, (1<<CS01)
0002d4 bd05                      	out TCCR0B, temp		; Prescaling value=8
0002d5 e001                      	ldi temp, 1<<TOIE0		; Enable timeroverflow flag
0002d6 9300 006e                 	sts TIMSK0, temp
0002d8 9478                      	sei						; Enable global interrupt*/
                                 
                                 	;initialize Z
0002d9 e0f0                      	ldi ZH, high(T << 1)
0002da e8ea                      	ldi ZL, low(T << 1)
0002db 9731                      	sbiw Z, 1
0002dc e0d2                      	ldi YH, high(QUANTITY)
0002dd e0cf                      	ldi YL, low(QUANTITY)
0002de 934f                      	push counter
                                 initQuantity:
                                 	;initialize the quantity
0002df 9104                      	lpm temp,Z
                                 	;subi temp, 48
0002e0 9731                      	sbiw Z, 1
0002e1 9543                      	inc counter
0002e2 9309                      	st Y+,temp
0002e3 3142                      	cpi counter, 18
0002e4 f7d1                      	brne initQuantity
0002e5 27ee                      	clr r30
0002e6 27ff                      	clr r31
0002e7 914f                      	pop counter
                                 
0002e8 e061                      	ldi waitingFlag, 1	;initialize the waiting from starting screen
                                 
                                 initKeypadClear:
0002e9 2733                      	clr digit
                                 initKeypad:
                                 	;out PORTC, counter
                                 	; waitingFlag check
0002ea 3062                      	cpi waitingFlag, 2		; WF=2 DF=1 out of stock screen
0002eb f3f1                      	breq initKeypad
0002ec 3066                      	cpi waitingFlag, 6		; WF=0 DF=6 enter Admin mode
0002ed f1a1                      	breq goInitAdmin
                                 	; debounce check
0002ee 3071                      	cpi debounceFlag, 1		; WF=0 DF=1 key pressed
0002ef f3d1                      	breq initKeypad
0002f0 3073                      	cpi debounceFlag, 3		; WF=3 DF=3 insertion finished
0002f1 f179                      	breq goPOT
                                 	
0002f2 3078                      	cpi debounceFlag, 8		; WF=5 DF=8 refresh admin screen
0002f3 f179                      	breq goAdmin
                                 
0002f4 eeaf                          ldi cmask, INITCOLMASK  ; initial column mask
0002f5 2788                          clr col                 ; initial column
0002f6 2700                      	clr temp
0002f7 2711                      	clr temp1
0002f8 2722                      	clr temp2
                                 
                                 colloop:
0002f9 3084                          cpi col, 4
0002fa f371                          breq initKeypadClear               ; If all keys are scanned, repeat.
0002fb 93a0 010b                     sts PORTL, cmask        ; Otherwise, scan a column.
                                   
0002fd ef1f                          ldi temp1, 0xFF         ; Slow down the scan operation.
                                 
                                 delay:
0002fe 951a                          dec temp1
0002ff f7f1                          brne delay              ; until temp1 is zero? - delay
                                 
000300 9110 0109                     lds temp1, PINL          ; Read PORTL
000302 701f                          andi temp1, ROWMASK     ; Get the keypad output value
000303 301f                          cpi temp1, 0xF          ; Check if any row is low
000304 f059                          breq nextcol            ; if not - switch to next column
                                 
                                                             ; If yes, find which row is low
000305 e0b1                          ldi rmask, INITROWMASK  ; initialize for row check
000306 2799                          clr row
                                 
                                 ; and going into the row loop
                                 rowloop:
000307 3094                          cpi row, 4              ; is row already 4?
000308 f039                          breq nextcol            ; the row scan is over - next column
000309 2f21                          mov temp2, temp1
00030a 232b                          and temp2, rmask        ; check un-masked bit
00030b f041                          breq convert            ; if bit is clear, the key is pressed
00030c 9593                          inc row                 ; else move to the next row
00030d 0fbb                          lsl rmask
00030e 940c 0307                     jmp rowloop
                                     
                                 nextcol:                    ; if row scan is over
000310 0faa                           lsl cmask
000311 9583                           inc col                ; increase col value
000312 940c 02f9                      jmp colloop            ; go to the next column
                                      
                                 convert:
000314 3031                      	cpi digit, 1			; button has not been released yet
000315 f2a1                      	breq initKeypad			; don't use it, scan again
                                 
000316 3083                          cpi col, 3              ; If the pressed key is in col 3
000317 f061                          breq letters           ; we have letter
                                                             ; If the key is not in col 3 and
000318 3093                          cpi row, 3              ; if the key is in row 3,
000319 f1a1                          breq symbols            ; we have a symbol or 0
00031a 2f19                          mov temp1, row          ; otherwise we have a number 1-9
00031b 0f11                          lsl temp1
00031c 0f19                          add temp1, row
00031d 0f18                          add temp1, col          ; temp1 = row*3 + col
00031e 5f1f                      	subi temp1, -1
00031f 940c 0377                     jmp convert_end
                                 
                                 goPOT:
000321 c127                      	rjmp POT
                                 goInitAdmin:
000322 c05d                      	rjmp initAdmin
                                 goAdmin:
000323 c062                      	rjmp adminMode
                                     
                                 letters:
000324 e031                      	ldi digit, 1
000325 3065                      	cpi waitingFlag, 5
000326 f019                      	breq letterAdmin
000327 e071                      	ldi debounceFlag, 1
000328 940c 02ea                     jmp initKeypad
                                 
                                 letterAdmin:
00032a 3090                      	cpi row, 0
00032b f039                      	breq A
00032c 3091                      	cpi row, 1
00032d f069                      	breq B
00032e 3092                      	cpi row, 2
00032f f099                      	breq C
                                 
                                 nothing:
000330 e071                      	ldi debounceFlag, 1
000331 940c 02ea                     jmp initKeypad
                                 
                                 A:
000333 e071                      	ldi debounceFlag, 1
000334 9120 020d                 	lds temp2, PR
000336 3023                      	cpi temp2, 3
000337 f3c1                      	breq nothing
000338 9523                      	inc temp2
000339 8328                      	st Y, temp2
00033a c04b                      	rjmp adminMode
                                 
                                 B:
00033b e071                      	ldi debounceFlag, 1
00033c 9120 020d                 	lds temp2, PR
00033e 3020                      	cpi temp2, 0
00033f f381                      	breq nothing
000340 952a                      	dec temp2
000341 8328                      	st Y, temp2
000342 c043                      	rjmp adminMode
                                 C:
000343 e071                      	ldi debounceFlag, 1
000344 930f                      	push temp
000345 93cf                      	push YL
000346 93df                      	push YH
000347 9721                      	sbiw Y, 1
000348 2700                      	clr temp
000349 8308                      	st Y, temp
00034a 91df                      	pop YH
00034b 91cf                      	pop YL
00034c 910f                      	pop temp
00034d c038                      	rjmp adminMode
                                 
                                 symbols:
00034e 3080                          cpi col, 0              ; Check if we have a star
00034f f0d1                          breq star
000350 3081                          cpi col, 1              ; or if we have zero
000351 f109                          breq zero
000352 e031                      	ldi digit, 1
000353 e071                      	ldi debounceFlag, 1
000354 3063                      	cpi waitingFlag, 3		; # is pressed inserting screen
000355 f021                      	breq abort
000356 3065                      	cpi waitingFlag, 5		; admin screen
000357 f081                      	breq abortAdmin
                                 	
000358 940c 02ea                     jmp initKeypad
                                 
                                 abort:
00035a 91cf                      	pop YL
00035b 91df                      	pop YH
00035c 914f                      	pop counter							; coin inserted
00035d 912f                      	pop temp2							; coin left
00035e 911f                      	pop temp1
00035f 910f                      	pop temp							; count left
                                 	;out PORTC, counter
000360 9340 0209                 	sts RC, counter
000362 9310 020c                 	sts RCPATTERN, temp1
000364 2744                      	clr counter
000365 e074                      	ldi debounceFlag, 4					; # pressed when it's inserting WF=3
000366 940c 02ea                 	jmp initKeypad
                                 
                                 abortAdmin:
000368 e074                      	ldi debounceFlag, 4			; #is pressed when it's in admin mode WF=5
000369 cf80                      	rjmp initKeypad
                                 
                                 star:
00036a 3060                      	cpi waitingFlag, 0
00036b f021                      	breq goingAdmin
00036c e031                      	ldi digit, 1
00036d e071                      	ldi debounceFlag, 1
00036e 940c 02ea                     jmp initKeypad
                                 
                                 goingAdmin:
000370 e075                      	ldi debounceFlag, 5				; * has been pressed
000371 940c 02ea                 	jmp initKeypad
                                 
                                 zero:
000373 e031                      	ldi digit, 1
000374 e071                      	ldi debounceFlag, 1
000375 940c 02ea                 	jmp initKeypad			; no need for that
                                 
                                 convert_end:
000377 9310 020a                 	sts NP, temp1
000379 e031                      	ldi digit, 1
00037a e071                      	ldi debounceFlag, 1					; disable keypad
00037b 3065                      	cpi waitingFlag, 5
00037c f049                      	breq adminMode
                                 	
00037d 3060                      	cpi waitingFlag, 0
00037e f1a1                      	breq findItem
                                 	
00037f cf6a                          rjmp initKeypad         			; restart the main loop
                                 
                                 initAdmin:
000380 e065                      	ldi waitingFlag, 5
000381 27ee                      	clr r30								; for button debounce
000382 27ff                      	clr r31
000383 e011                      	ldi temp1, 1
000384 9310 020a                 	sts NP, temp1
                                 adminMode:
000386 9110 020a                 	lds temp1, NP
000388 e051
000389 d177
00038a d186                      	do_lcd_command 0b00000001 ; clear display
                                 
00038b e451
00038c d17b
00038d d183                      	do_lcd_data 'A'
00038e e654
00038f d178
000390 d180                      	do_lcd_data 'd'
000391 e65d
000392 d175
000393 d17d                      	do_lcd_data 'm'
000394 e659
000395 d172
000396 d17a                      	do_lcd_data 'i'
000397 e65e
000398 d16f
000399 d177                      	do_lcd_data 'n'
00039a e250
00039b d16c
00039c d174                      	do_lcd_data ' '
00039d e65d
00039e d169
00039f d171                      	do_lcd_data 'm'
0003a0 e65f
0003a1 d166
0003a2 d16e                      	do_lcd_data 'o'
0003a3 e654
0003a4 d163
0003a5 d16b                      	do_lcd_data 'd'
0003a6 e655
0003a7 d160
0003a8 d168                      	do_lcd_data 'e'
0003a9 e250
0003aa d15d
0003ab d165                      	do_lcd_data ' '
0003ac 2f51
0003ad 5d50
0003ae d159
0003af d161                      	do_lcd_rdata temp1
                                 	
0003b0 9310 020a                 	sts NP, temp1
0003b2 c000                      	rjmp findItem
                                 
                                 findItem:
0003b3 9310 020a                 	sts NP, temp1						; Store the number been pressed
0003b5 e0d2                      	ldi YH, high(QUANTITY)
0003b6 e0cf                      	ldi YL, low(QUANTITY)
                                 
                                 inventory:
0003b7 951a                      	dec temp1
0003b8 3010                      	cpi temp1, 0
0003b9 f011                      	breq goInStock
0003ba 9622                      	adiw Y, 2
0003bb cffb                      	rjmp inventory
                                 
                                 goInStock:
0003bc c045                      	rjmp inStock
                                 
                                 showAdmin:
0003bd ec50
0003be d142
0003bf d151                      	do_lcd_command 0b11000000	; break to the next line
0003c0 9100 020e                 	lds temp, QN
0003c2 d113                      	rcall convert_digits
                                 	;do_lcd_rdata temp
0003c3 e250
0003c4 d143
0003c5 d14b                      	do_lcd_data ' '
0003c6 e250
0003c7 d140
0003c8 d148                      	do_lcd_data ' '
0003c9 e250
0003ca d13d
0003cb d145                      	do_lcd_data ' '
0003cc e250
0003cd d13a
0003ce d142                      	do_lcd_data ' '
0003cf e250
0003d0 d137
0003d1 d13f                      	do_lcd_data ' '
0003d2 e250
0003d3 d134
0003d4 d13c                      	do_lcd_data ' '
0003d5 e250
0003d6 d131
0003d7 d139                      	do_lcd_data ' '
0003d8 e250
0003d9 d12e
0003da d136                      	do_lcd_data ' '
0003db e254
0003dc d12b
0003dd d133                      	do_lcd_data '$'
0003de 9120 020d                 	lds temp2, PR
0003e0 2f52
0003e1 5d50
0003e2 d125
0003e3 d12d                      	do_lcd_rdata temp2
                                 	;ldi debounceFlag, 9
                                 	;out PORTC, debounceFlag
0003e4 cf05                      	rjmp initKeypad
                                 
                                 goOutOfStock:
0003e5 c07a                      	rjmp outOfStock
                                 
                                 makePattern:
0003e6 930f                      	push temp
0003e7 931f                      	push temp1
0003e8 932f                      	push temp2
0003e9 2711                      	clr temp1
0003ea 2722                      	clr temp2
                                 loopPattern:
0003eb 3000                      	cpi temp, 0
0003ec f079                      	breq showPattern
0003ed 3f1f                      	cpi temp1, 0xFF
0003ee f021                      	breq overEight
0003ef 0f11                      	lsl temp1
0003f0 9513                      	inc temp1
0003f1 950a                      	dec temp
                                 	
0003f2 cff8                      	rjmp loopPattern
                                 
                                 overEight:
0003f3 3023                      	cpi temp2, 0b11
0003f4 f419                      	brne notTen
0003f5 2711                      	clr temp1
0003f6 2722                      	clr temp2
0003f7 cff3                      	rjmp loopPattern
                                 notTen:
0003f8 0f22                      	lsl temp2
0003f9 9523                      	inc temp2
0003fa 950a                      	dec temp
0003fb cfef                      	rjmp loopPattern
                                 showPattern:
0003fc b918                      	out PORTC, temp1
0003fd bb24                      	out PORTG, temp2
0003fe 912f                      	pop temp2
0003ff 911f                      	pop temp1
000400 910f                      	pop temp
000401 cfbb                      	rjmp showAdmin
                                 
                                 inStock:
000402 9109                      	ld temp, Y+				;quantity
000403 9300 020e                 	sts QN, temp
000405 8128                      	ld temp2, Y				;price
000406 9320 020d                 	sts PR, temp2
                                 
000408 3065                      	cpi waitingFlag, 5
000409 f2e1                      	breq makePattern
                                 
00040a 3000                      	cpi temp, 0
00040b f2c9                      	breq goOutOfStock
00040c 2744                      	clr counter
                                 
                                 insertCoin:
00040d 930f                      	push temp
00040e 931f                      	push temp1
00040f 932f                      	push temp2
000410 934f                      	push counter
000411 93df                      	push YH
000412 93cf                      	push YL
000413 e051
000414 d0ec
000415 d0fb                      	do_lcd_command 0b00000001 ; clear display
000416 e459
000417 d0f0
000418 d0f8                      	do_lcd_data 'I'
000419 e65e
00041a d0ed
00041b d0f5                      	do_lcd_data 'n'
00041c e753
00041d d0ea
00041e d0f2                      	do_lcd_data 's'
00041f e655
000420 d0e7
000421 d0ef                      	do_lcd_data 'e'
000422 e752
000423 d0e4
000424 d0ec                      	do_lcd_data 'r'
000425 e754
000426 d0e1
000427 d0e9                      	do_lcd_data 't'
000428 e250
000429 d0de
00042a d0e6                      	do_lcd_data ' '
00042b e653
00042c d0db
00042d d0e3                      	do_lcd_data 'c'
00042e e65f
00042f d0d8
000430 d0e0                      	do_lcd_data 'o'
000431 e659
000432 d0d5
000433 d0dd                      	do_lcd_data 'i'
000434 e65e
000435 d0d2
000436 d0da                      	do_lcd_data 'n'
000437 e753
000438 d0cf
000439 d0d7                      	do_lcd_data 's'
00043a d09b                      	rcall convert_digits
                                 	;do_lcd_rdata temp			; count left
                                 	;do_lcd_rdata temp			; coin Inserted
00043b ec50
00043c d0c4
00043d d0d3                      	do_lcd_command 0b11000000	; break to the next line
00043e 2f52
00043f 5d50
000440 d0c7
000441 d0cf                      	do_lcd_rdata temp2			; coin left
                                 
                                 initPOT:								; WF=0 DF=1 
000442 e063                      	ldi waitingFlag, 3					; WF=3 DF=0 diable keyPad but "#" in normal mode
                                 										; waiting for twisted
                                 
000443 2700                      	clr temp							; Flag for two side
000444 9300 0208                 	sts TF, temp
000446 2744                      	clr counter
                                 	;clr debounceFlag							; for the num of coins inserted
000447 27ee                      	clr r30
000448 27ff                      	clr r31
                                 
                                 POT:
000449 3073                      	cpi debounceFlag, 3					; see if the twist has been twisted 
00044a f4a1                      	brne goInitial
00044b e400                      	ldi temp, (0<<ADEN | 1<<ADSC | 0<<ADIE)	; disable potentiometer
00044c 9300 007a                 	sts ADCSRA, temp
00044e 2777                      	clr debounceFlag
00044f 91cf                      	pop YL
000450 91df                      	pop YH
000451 914f                      	pop counter
000452 912f                      	pop temp2							; coin left
000453 911f                      	pop temp1
000454 910f                      	pop temp							; count left
000455 9543                      	inc counter
                                 
000456 0f11                      	lsl temp1
000457 9513                      	inc temp1
000458 b918                      	out PORTC, temp1
                                 	
000459 5021                      	subi temp2, 1						; 
00045a 3020                      	cpi temp2, 0						; if all coin has been inserted
00045b f411                      	brne goInsert						; refresh the screen
00045c 2766                      	clr waitingFlag
00045d c03b                      	rjmp delivery
                                 
                                 goInsert:
00045e cfae                      	rjmp insertCoin
                                 goInitial:
00045f ce8a                      	rjmp initKeypad
                                 
                                 outOfStock:
000460 9100 020a                 	lds temp, NP
000462 e051
000463 d09d
000464 d0ac                      	do_lcd_command 0b00000001 ; clear display
000465 e45f
000466 d0a1
000467 d0a9                      	do_lcd_data 'O'
000468 e755
000469 d09e
00046a d0a6                      	do_lcd_data 'u'
00046b e754
00046c d09b
00046d d0a3                      	do_lcd_data 't'
00046e e250
00046f d098
000470 d0a0                      	do_lcd_data ' '
000471 e65f
000472 d095
000473 d09d                      	do_lcd_data 'o'
000474 e656
000475 d092
000476 d09a                      	do_lcd_data 'f'
000477 e250
000478 d08f
000479 d097                      	do_lcd_data ' '
00047a e753
00047b d08c
00047c d094                      	do_lcd_data 's'
00047d e754
00047e d089
00047f d091                      	do_lcd_data 't'
000480 e65f
000481 d086
000482 d08e                      	do_lcd_data 'o'
000483 e653
000484 d083
000485 d08b                      	do_lcd_data 'c'
000486 e65b
000487 d080
000488 d088                      	do_lcd_data 'k'
000489 ec50
00048a d076
00048b d085                      	do_lcd_command 0b11000000	; break to the next line
00048c 2f50
00048d 5d50
00048e d079
00048f d081                      	do_lcd_rdata temp
000490 d09a                      	rcall sleep_5ms
000491 ef0f                      	ser temp					; let LED to be on as default
000492 b908                      	out PORTC, temp
000493 bb04                      	out PORTG, temp
                                 
000494 27ee                      	clr r30					; clr button debounce counter
000495 27ff                      	clr r31
000496 2744                      	clr counter
                                 
000497 e062                      	ldi waitingFlag, 2		; enter led subroutine in TFOVR, DF=1
000498 ce51                      	rjmp initKeypad
                                 
                                 delivery:
000499 5001                      	subi temp, 1
00049a 930a                      	st -Y, temp
00049b e051
00049c d064
00049d d073                      	do_lcd_command 0b00000001 ; clear display
                                 
00049e e454
00049f d068
0004a0 d070                      	do_lcd_data 'D'
0004a1 e655
0004a2 d065
0004a3 d06d                      	do_lcd_data 'e'
0004a4 e65c
0004a5 d062
0004a6 d06a                      	do_lcd_data 'l'
0004a7 e659
0004a8 d05f
0004a9 d067                      	do_lcd_data 'i'
0004aa e756
0004ab d05c
0004ac d064                      	do_lcd_data 'v'
0004ad e655
0004ae d059
0004af d061                      	do_lcd_data 'e'
0004b0 e752
0004b1 d056
0004b2 d05e                      	do_lcd_data 'r'
0004b3 e659
0004b4 d053
0004b5 d05b                      	do_lcd_data 'i'
0004b6 e65e
0004b7 d050
0004b8 d058                      	do_lcd_data 'n'
0004b9 e657
0004ba d04d
0004bb d055                      	do_lcd_data 'g'
0004bc e250
0004bd d04a
0004be d052                      	do_lcd_data ' '
0004bf e659
0004c0 d047
0004c1 d04f                      	do_lcd_data 'i'
0004c2 e754
0004c3 d044
0004c4 d04c                      	do_lcd_data 't'
0004c5 e655
0004c6 d041
0004c7 d049                      	do_lcd_data 'e'
0004c8 e65d
0004c9 d03e
0004ca d046                      	do_lcd_data 'm'
                                 
0004cb ec50
0004cc d034
0004cd d043                      	do_lcd_command 0b11000000	; break to the next line
                                 
0004ce ef0f                      	ser temp					; let LED to be on as default
0004cf b908                      	out PORTC, temp
0004d0 bb04                      	out PORTG, temp
                                 
0004d1 e100                      	ldi temp,(1<<PE4)			; start the motor
0004d2 b90e                      	out PORTE, temp
                                 
0004d3 e064                      	ldi waitingFlag, 4
                                 
0004d4 2744                      	clr counter
0004d5 cf89                      	rjmp goInitial
                                 
                                 
                                 
                                 
                                 
                                 ; main program ends here
                                 ;****************************************************************************************
                                 ;*******************************************    *****************************************
                                 ;*******************************************    *****************************************
                                 ;*******************************************    *****************************************
                                 ;***************************************   *    *   *************************************
                                 ;************************************  *   *    *   *   *********************************
                                 ;************************************  *   *    *   *  **********************************
                                 ;**************************************               ***********************************
                                 ;*****************************************          *************************************
                                 
                                 convert_digits:
0004d6 933f                      	push digit
0004d7 930f                      	push temp
0004d8 2733                      	clr digit
                                 	;push temp
0004d9 931f                      	push temp1
0004da 2711                      	clr temp1
                                 	;push temp2
                                 checkHundreds:
0004db 3604                      	cpi temp, 100			; is the number still > 100?
0004dc f498                      	brsh hundredsDigit		; if YES - increase hundreds digit
0004dd 3030                      	cpi digit, 0		
0004de f4c1                      	brne showHundredsDigit	; If digit ! 0 => this digit goes into stack
                                 		
                                 checkTensInit:
0004df 2733                      	clr digit
                                 checkTens:
0004e0 300a                      	cpi temp, 10			; is the number still > 10? 
0004e1 f490                      	brsh tensDigit			; if YES - increase tens digit
0004e2 3010                      	cpi temp1, 0
0004e3 f4c1                      	brne showTensDigit
0004e4 3030                      	cpi digit, 0			; is tens digit = 0?
0004e5 f4b1                      	brne showTensDigit		; if digit != 0 push it to the stack	
                                 	
                                 checkOnes:
0004e6 2733                      	clr digit
0004e7 2f30                      	mov digit, temp			; whatever is left in temp is the ones digit
                                 	; now all digit temp data is in the stack
                                 	; unload data into temp2, temp1, temp
                                 	; and the do_lcd_rdata in reverse order
                                 	; this will display the currentNumber value to LCD
                                 	; it's not an elegant solution but will do for now
0004e8 2f53
0004e9 5d50
0004ea d01d
0004eb d025                      	do_lcd_rdata digit
0004ec 911f                      	pop temp1
0004ed 910f                      	pop temp
0004ee 913f                      	pop digit
0004ef 9508                      	ret
                                 
                                 ; hundreds digit
                                 hundredsDigit:
0004f0 e011                      	ldi temp1, 1
0004f1 9533                      	inc digit
0004f2 5604                      	subi temp, 100			; and subtract a 100 from the number
0004f3 cfe7                      	rjmp checkHundreds		; check hundreds again
                                 
                                 ; tens digit
                                 tensDigit:
0004f4 9533                      	inc digit				; if YES increase the digit count
0004f5 500a                      	subi temp, 10			; and subtract a 10 from the number
0004f6 cfe9                      	rjmp checkTens			; check tens again
                                 
                                 showHundredsDigit:
0004f7 2f53
0004f8 5d50
0004f9 d00e
0004fa d016                      	do_lcd_rdata digit
0004fb cfe3                      	rjmp checkTensInit
                                 
                                 showTensDigit:
0004fc 2f53
0004fd 5d50
0004fe d009
0004ff d011                      	do_lcd_rdata digit
000500 cfe5                      	rjmp checkOnes
                                 
                                 
                                 ; lcd stuff
                                 
                                 lcd_command:
000501 bb51                      	out PORTF, lcd
000502 d01f                      	rcall sleep_1ms
000503 9a16                      	lcd_set LCD_E
000504 d01d                      	rcall sleep_1ms
000505 9816                      	lcd_clr LCD_E
000506 d01b                      	rcall sleep_1ms
000507 9508                      	ret
                                 
                                 lcd_data:
000508 bb51                      	out PORTF, lcd
000509 9a17                      	lcd_set LCD_RS
00050a d017                      	rcall sleep_1ms
00050b 9a16                      	lcd_set LCD_E
00050c d015                      	rcall sleep_1ms
00050d 9816                      	lcd_clr LCD_E
00050e d013                      	rcall sleep_1ms
00050f 9817                      	lcd_clr LCD_RS
000510 9508                      	ret
                                 
                                 
                                 lcd_wait:
000511 935f                      	push lcd
000512 2755                      	clr lcd
000513 bb50                      	out DDRF, lcd
000514 bb51                      	out PORTF, lcd
000515 9a15                      	lcd_set LCD_RW
                                 
                                 lcd_wait_loop:
000516 d00b                      	rcall sleep_1ms
000517 9a16                      	lcd_set LCD_E
000518 d009                      	rcall sleep_1ms
000519 b15f                      	in lcd, PINF
00051a 9816                      	lcd_clr LCD_E
00051b fd57                      	sbrc lcd, 7
00051c cff9                      	rjmp lcd_wait_loop
00051d 9815                      	lcd_clr LCD_RW
00051e ef5f                      	ser lcd
00051f bb50                      	out DDRF, lcd
000520 915f                      	pop lcd
000521 9508                      	ret
                                 
                                 ; For LCD delay
                                 .equ F_CPU = 16000000
                                 .equ DELAY_1MS = F_CPU / 4 / 1000 - 4
                                 ; 4 cycles per iteration - setup/call-return overhead
                                 
                                 sleep_1ms:
000522 938f                      		push r24
000523 939f                      		push r25
000524 e09f                      		ldi r25, high(DELAY_1MS)
000525 e98c                      		ldi r24, low(DELAY_1MS)
                                 delayloop_1ms:
000526 9701                      		sbiw r25:r24, 1
000527 f7f1                      		brne delayloop_1ms
000528 919f                      		pop r25
000529 918f                      		pop r24
00052a 9508                      		ret
                                 
                                 sleep_5ms:
00052b dff6                      		rcall sleep_1ms
00052c dff5                      		rcall sleep_1ms
00052d dff4                      		rcall sleep_1ms
00052e dff3                      		rcall sleep_1ms
00052f dff2                      		rcall sleep_1ms
000530 9508                      		ret
                                 beep:
000531 9100 0221                 	lds temp, BE
000533 9500                      	com temp
000534 b905                      	out PORTB, temp
000535 9300 0221                 	sts BE, temp


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

"ATmega2560" register use summary:
x  :   0 y  :  43 z  :   3 r0 :   0 r1 :   0 r2 :   0 r3 :   0 r4 :   0 
r5 :   0 r6 :   0 r7 :   0 r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 
r13:   0 r14:   0 r15:   0 r16: 246 r17:  43 r18:  29 r19:  21 r20:  28 
r21: 143 r22:  29 r23:  45 r24:  34 r25:  36 r26:   3 r27:   3 r28:  30 
r29:  30 r30:  17 r31:  17 
Registers used: 18 out of 35 (51.4%)

"ATmega2560" instruction use summary:
.lds  :   0 .sts  :   0 adc   :   0 add   :   2 adiw  :   8 and   :   1 
andi  :   2 asr   :   0 bclr  :   0 bld   :   0 brbc  :   0 brbs  :   0 
brcc  :   0 brcs  :   0 break :   0 breq  :  65 brge  :   0 brhc  :   0 
brhs  :   0 brid  :   0 brie  :   0 brlo  :   0 brlt  :   1 brmi  :   0 
brne  :  23 brpl  :   0 brsh  :   2 brtc  :   0 brts  :   0 brvc  :   0 
brvs  :   0 bset  :   0 bst   :   0 call  :   0 cbi   :   5 cbr   :   0 
clc   :   0 clh   :   0 cli   :   0 cln   :   0 clr   :  83 cls   :   0 
clt   :   0 clv   :   0 clz   :   0 com   :   1 cp    :   0 cpc   :   9 
cpi   :  88 cpse  :   0 dec   :   7 eicall:   0 eijmp :   0 elpm  :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :   8 inc   :  17 jmp   :  16 ld    :   2 ldd   :   0 ldi   : 215 
lds   :  27 lpm   :   2 lsl   :   6 lsr   :   1 mov   :  11 movw  :   0 
mul   :   0 muls  :   0 mulsu :   0 neg   :   0 nop   :   0 or    :   0 
ori   :   1 out   :  50 pop   :  49 push  :  41 rcall : 272 ret   :   7 
reti  :   7 rjmp  :  65 rol   :   0 ror   :   0 sbc   :   0 sbci  :   0 
sbi   :   5 sbic  :   0 sbis  :   0 sbiw  :   6 sbr   :   0 sbrc  :   1 
sbrs  :   0 sec   :   0 seh   :   0 sei   :   1 sen   :   0 ser   :   7 
ses   :   0 set   :   0 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  37 std   :   0 sts   :  36 sub   :   0 subi  :  12 swap  :   0 
tst   :   0 wdr   :   0 
Instructions used: 40 out of 116 (34.5%)

"ATmega2560" memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000a70   2554     18   2572  262144   1.0%
[.dseg] 0x000200 0x000223      0     35     35    8192   0.4%
[.eseg] 0x000000 0x000000      0      0      0    4096   0.0%

Assembly complete, 0 errors, 2 warnings
